
m_field_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005824  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  080059f8  080059f8  000069f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e8c  08005e8c  000071d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005e8c  08005e8c  00006e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e94  08005e94  000071d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e94  08005e94  00006e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e98  08005e98  00006e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08005e9c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012c0  200001d4  08006070  000071d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001494  08006070  00007494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000071d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb40  00000000  00000000  00007204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c4b  00000000  00000000  00013d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00004a30  00000000  00000000  0001598f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000810  00000000  00000000  0001a3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000623  00000000  00000000  0001abd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025ee4  00000000  00000000  0001b1f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d2d7  00000000  00000000  000410d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e84f7  00000000  00000000  0004e3ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001368a5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002478  00000000  00000000  001368e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00138d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080059dc 	.word	0x080059dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	080059dc 	.word	0x080059dc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000fb4:	b510      	push	{r4, lr}
 8000fb6:	b084      	sub	sp, #16
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000fb8:	2400      	movs	r4, #0
 8000fba:	9400      	str	r4, [sp, #0]
 8000fbc:	9401      	str	r4, [sp, #4]
 8000fbe:	9402      	str	r4, [sp, #8]
 8000fc0:	9403      	str	r4, [sp, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000fc2:	f000 fd0f 	bl	80019e4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	f88d 3000 	strb.w	r3, [sp]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000fcc:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000fd0:	9401      	str	r4, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000fd2:	221f      	movs	r2, #31
 8000fd4:	f88d 2008 	strb.w	r2, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000fd8:	2287      	movs	r2, #135	@ 0x87
 8000fda:	f88d 2009 	strb.w	r2, [sp, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000fde:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000fe2:	f88d 400b 	strb.w	r4, [sp, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000fe6:	f88d 300c 	strb.w	r3, [sp, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000fea:	f88d 300d 	strb.w	r3, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000fee:	f88d 400e 	strb.w	r4, [sp, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ff2:	f88d 400f 	strb.w	r4, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ff6:	4668      	mov	r0, sp
 8000ff8:	f000 fd12 	bl	8001a20 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ffc:	2004      	movs	r0, #4
 8000ffe:	f000 fcff 	bl	8001a00 <HAL_MPU_Enable>

}
 8001002:	b004      	add	sp, #16
 8001004:	bd10      	pop	{r4, pc}
	...

08001008 <MX_GPIO_Init>:
{
 8001008:	b570      	push	{r4, r5, r6, lr}
 800100a:	b08e      	sub	sp, #56	@ 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	2400      	movs	r4, #0
 800100e:	9409      	str	r4, [sp, #36]	@ 0x24
 8001010:	940a      	str	r4, [sp, #40]	@ 0x28
 8001012:	940b      	str	r4, [sp, #44]	@ 0x2c
 8001014:	940c      	str	r4, [sp, #48]	@ 0x30
 8001016:	940d      	str	r4, [sp, #52]	@ 0x34
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001018:	4b51      	ldr	r3, [pc, #324]	@ (8001160 <MX_GPIO_Init+0x158>)
 800101a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800101c:	f042 0204 	orr.w	r2, r2, #4
 8001020:	631a      	str	r2, [r3, #48]	@ 0x30
 8001022:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001024:	f002 0204 	and.w	r2, r2, #4
 8001028:	9201      	str	r2, [sp, #4]
 800102a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800102c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800102e:	f042 0220 	orr.w	r2, r2, #32
 8001032:	631a      	str	r2, [r3, #48]	@ 0x30
 8001034:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001036:	f002 0220 	and.w	r2, r2, #32
 800103a:	9202      	str	r2, [sp, #8]
 800103c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800103e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001040:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001044:	631a      	str	r2, [r3, #48]	@ 0x30
 8001046:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001048:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800104c:	9203      	str	r2, [sp, #12]
 800104e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001050:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001052:	f042 0202 	orr.w	r2, r2, #2
 8001056:	631a      	str	r2, [r3, #48]	@ 0x30
 8001058:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800105a:	f002 0202 	and.w	r2, r2, #2
 800105e:	9204      	str	r2, [sp, #16]
 8001060:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001062:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001064:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001068:	631a      	str	r2, [r3, #48]	@ 0x30
 800106a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800106c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001070:	9205      	str	r2, [sp, #20]
 8001072:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001074:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001076:	f042 0210 	orr.w	r2, r2, #16
 800107a:	631a      	str	r2, [r3, #48]	@ 0x30
 800107c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800107e:	f002 0210 	and.w	r2, r2, #16
 8001082:	9206      	str	r2, [sp, #24]
 8001084:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001086:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001088:	f042 0208 	orr.w	r2, r2, #8
 800108c:	631a      	str	r2, [r3, #48]	@ 0x30
 800108e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001090:	f002 0208 	and.w	r2, r2, #8
 8001094:	9207      	str	r2, [sp, #28]
 8001096:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001098:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800109a:	f042 0201 	orr.w	r2, r2, #1
 800109e:	631a      	str	r2, [r3, #48]	@ 0x30
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	9308      	str	r3, [sp, #32]
 80010a8:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOB, USER_LED_GREEN_Pin|USER_LED_BLUE_Pin, GPIO_PIN_RESET);
 80010aa:	4e2e      	ldr	r6, [pc, #184]	@ (8001164 <MX_GPIO_Init+0x15c>)
 80010ac:	4622      	mov	r2, r4
 80010ae:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 80010b2:	4630      	mov	r0, r6
 80010b4:	f000 fde2 	bl	8001c7c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_USER_SW_Pin;
 80010b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010bc:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010be:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010c2:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010c4:	2502      	movs	r5, #2
 80010c6:	950b      	str	r5, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIO_USER_SW_GPIO_Port, &GPIO_InitStruct);
 80010c8:	a909      	add	r1, sp, #36	@ 0x24
 80010ca:	4827      	ldr	r0, [pc, #156]	@ (8001168 <MX_GPIO_Init+0x160>)
 80010cc:	f000 fcd4 	bl	8001a78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D0A_Pin|D1A_Pin|D2A_Pin|D3A_Pin
 80010d0:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 80010d4:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d6:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010da:	a909      	add	r1, sp, #36	@ 0x24
 80010dc:	4823      	ldr	r0, [pc, #140]	@ (800116c <MX_GPIO_Init+0x164>)
 80010de:	f000 fccb 	bl	8001a78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CT0_Pin|CT1_Pin|CT18_Pin|CT19_Pin;
 80010e2:	f640 4306 	movw	r3, #3078	@ 0xc06
 80010e6:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e8:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ec:	a909      	add	r1, sp, #36	@ 0x24
 80010ee:	4630      	mov	r0, r6
 80010f0:	f000 fcc2 	bl	8001a78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CT7_Pin|CT8_Pin|CT23_Pin|CT22_Pin
 80010f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010f8:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fa:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010fe:	a909      	add	r1, sp, #36	@ 0x24
 8001100:	481b      	ldr	r0, [pc, #108]	@ (8001170 <MX_GPIO_Init+0x168>)
 8001102:	f000 fcb9 	bl	8001a78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CT9_Pin|CT10_Pin|CT11_Pin|CT12_Pin
 8001106:	f64f 7380 	movw	r3, #65408	@ 0xff80
 800110a:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110c:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001110:	a909      	add	r1, sp, #36	@ 0x24
 8001112:	4818      	ldr	r0, [pc, #96]	@ (8001174 <MX_GPIO_Init+0x16c>)
 8001114:	f000 fcb0 	bl	8001a78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USER_LED_GREEN_Pin|USER_LED_BLUE_Pin;
 8001118:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 800111c:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111e:	2301      	movs	r3, #1
 8001120:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001122:	950b      	str	r5, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001126:	a909      	add	r1, sp, #36	@ 0x24
 8001128:	4630      	mov	r0, r6
 800112a:	f000 fca5 	bl	8001a78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800112e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001132:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001138:	2303      	movs	r3, #3
 800113a:	930c      	str	r3, [sp, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800113c:	2307      	movs	r3, #7
 800113e:	930d      	str	r3, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001140:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8001144:	a909      	add	r1, sp, #36	@ 0x24
 8001146:	4630      	mov	r0, r6
 8001148:	f000 fc96 	bl	8001a78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800114c:	230a      	movs	r3, #10
 800114e:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001150:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001152:	950b      	str	r5, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001154:	a909      	add	r1, sp, #36	@ 0x24
 8001156:	4630      	mov	r0, r6
 8001158:	f000 fc8e 	bl	8001a78 <HAL_GPIO_Init>
}
 800115c:	b00e      	add	sp, #56	@ 0x38
 800115e:	bd70      	pop	{r4, r5, r6, pc}
 8001160:	40023800 	.word	0x40023800
 8001164:	40020400 	.word	0x40020400
 8001168:	40020800 	.word	0x40020800
 800116c:	40021400 	.word	0x40021400
 8001170:	40021800 	.word	0x40021800
 8001174:	40021000 	.word	0x40021000

08001178 <clear_buffer>:
	count = 0;
 8001178:	2100      	movs	r1, #0
	p_sample = sample;
 800117a:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <clear_buffer+0x1c>)
		p_sample->data_port_b = 0;
 800117c:	2200      	movs	r2, #0
 800117e:	801a      	strh	r2, [r3, #0]
		p_sample->data_port_e = 0;
 8001180:	805a      	strh	r2, [r3, #2]
		p_sample->data_port_f = 0;
 8001182:	809a      	strh	r2, [r3, #4]
		p_sample->data_port_g = 0;
 8001184:	80da      	strh	r2, [r3, #6]
	p_sample++;
 8001186:	3308      	adds	r3, #8
	}while(++count < SAMPLE_READ_MAX);
 8001188:	3101      	adds	r1, #1
 800118a:	f5b1 7ffa 	cmp.w	r1, #500	@ 0x1f4
 800118e:	dbf5      	blt.n	800117c <clear_buffer+0x4>
}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000200 	.word	0x20000200

08001198 <convert_number>:
		if((data & 0x0200) > 0){
 8001198:	f410 7f00 	tst.w	r0, #512	@ 0x200
 800119c:	d002      	beq.n	80011a4 <convert_number+0xc>
			value = data & 0x01ff;
 800119e:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80011a2:	4770      	bx	lr
			value = -(((~data + 1) & 0x01ff));
 80011a4:	4240      	negs	r0, r0
 80011a6:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80011aa:	4240      	negs	r0, r0
 80011ac:	b200      	sxth	r0, r0
}
 80011ae:	4770      	bx	lr

080011b0 <read_adc2>:
	p_sample = sample;
 80011b0:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <read_adc2+0x28>)
	count = 0;
 80011b2:	2200      	movs	r2, #0
		p_sample->data_port_b = GPIOB->IDR;
 80011b4:	4909      	ldr	r1, [pc, #36]	@ (80011dc <read_adc2+0x2c>)
 80011b6:	6909      	ldr	r1, [r1, #16]
 80011b8:	8019      	strh	r1, [r3, #0]
		p_sample->data_port_e = GPIOE->IDR;
 80011ba:	4909      	ldr	r1, [pc, #36]	@ (80011e0 <read_adc2+0x30>)
 80011bc:	6909      	ldr	r1, [r1, #16]
 80011be:	8059      	strh	r1, [r3, #2]
		p_sample->data_port_f = GPIOF->IDR;
 80011c0:	4908      	ldr	r1, [pc, #32]	@ (80011e4 <read_adc2+0x34>)
 80011c2:	6909      	ldr	r1, [r1, #16]
 80011c4:	8099      	strh	r1, [r3, #4]
		p_sample->data_port_g = GPIOG->IDR;
 80011c6:	4908      	ldr	r1, [pc, #32]	@ (80011e8 <read_adc2+0x38>)
 80011c8:	6909      	ldr	r1, [r1, #16]
 80011ca:	80d9      	strh	r1, [r3, #6]
		p_sample++;
 80011cc:	3308      	adds	r3, #8
	}while(++count < SAMPLE_READ_MAX);
 80011ce:	3201      	adds	r2, #1
 80011d0:	f5b2 7ffa 	cmp.w	r2, #500	@ 0x1f4
 80011d4:	dbee      	blt.n	80011b4 <read_adc2+0x4>
}
 80011d6:	4770      	bx	lr
 80011d8:	20000200 	.word	0x20000200
 80011dc:	40020400 	.word	0x40020400
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40021400 	.word	0x40021400
 80011e8:	40021800 	.word	0x40021800

080011ec <find_max2>:
void find_max2(){
 80011ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011f0:	b083      	sub	sp, #12
 80011f2:	2700      	movs	r7, #0
 80011f4:	9700      	str	r7, [sp, #0]
	curr = head;
 80011f6:	4b3f      	ldr	r3, [pc, #252]	@ (80012f4 <find_max2+0x108>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	4b3f      	ldr	r3, [pc, #252]	@ (80012f8 <find_max2+0x10c>)
 80011fc:	601a      	str	r2, [r3, #0]
	p_sample = sample;
 80011fe:	4d3f      	ldr	r5, [pc, #252]	@ (80012fc <find_max2+0x110>)
	max_ns_v = 0;
 8001200:	f04f 0a00 	mov.w	sl, #0
 8001204:	e00d      	b.n	8001222 <find_max2+0x36>
	if (count == 0) counter_first = counter;
 8001206:	9401      	str	r4, [sp, #4]
 8001208:	e036      	b.n	8001278 <find_max2+0x8c>
			max_ns_v = ((adc_value_a / 512.0 * 0.5) + 1.50);
 800120a:	4640      	mov	r0, r8
 800120c:	4649      	mov	r1, r9
 800120e:	f7ff fceb 	bl	8000be8 <__aeabi_d2f>
 8001212:	4682      	mov	sl, r0
			max_ns_adc = adc_value_a;
 8001214:	9600      	str	r6, [sp, #0]
			max_ns_t = counter;
 8001216:	46a3      	mov	fp, r4
	p_sample++;
 8001218:	3508      	adds	r5, #8
	} while(++count < SAMPLE_READ_MAX);
 800121a:	3701      	adds	r7, #1
 800121c:	f5b7 7ffa 	cmp.w	r7, #500	@ 0x1f4
 8001220:	da47      	bge.n	80012b2 <find_max2+0xc6>
		adc_data_a = p_sample->data_port_f & 0x03ff;
 8001222:	88a8      	ldrh	r0, [r5, #4]
		adc_data_b = (p_sample->data_port_g >> 6) & 0x03ff;
 8001224:	88ea      	ldrh	r2, [r5, #6]
	counter |= (temp1 & 0x0004) << 21;
 8001226:	0553      	lsls	r3, r2, #21
 8001228:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
	counter |= (temp1 & 0x0008) << 19;
 800122c:	04d1      	lsls	r1, r2, #19
 800122e:	f401 0180 	and.w	r1, r1, #4194304	@ 0x400000
 8001232:	430b      	orrs	r3, r1
	counter |= (temp1 & 0x0010) << 17;
 8001234:	0451      	lsls	r1, r2, #17
 8001236:	f401 1100 	and.w	r1, r1, #2097152	@ 0x200000
 800123a:	4319      	orrs	r1, r3
	counter |= (temp1 & 0x0020) << 15;
 800123c:	03d3      	lsls	r3, r2, #15
 800123e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001242:	430b      	orrs	r3, r1
	temp1 = p_sample->data_port_b;	// CT19-PB11, CT18-PB10
 8001244:	882c      	ldrh	r4, [r5, #0]
	temp2 = (temp1 >> 10) & 0x0003;
 8001246:	f3c4 2181 	ubfx	r1, r4, #10, #2
	counter |= (temp2 << 18);
 800124a:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
	temp1 = p_sample->data_port_e;	// CT17-PE15 ... CT9-PB7
 800124e:	8869      	ldrh	r1, [r5, #2]
	temp2 = (temp1 >> 7) & 0x01ff;
 8001250:	09c9      	lsrs	r1, r1, #7
	counter |= (temp2 << 9);
 8001252:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
	temp2 = temp1 & 0x0003;
 8001256:	f002 0203 	and.w	r2, r2, #3
	counter |= (temp2 << 7);
 800125a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
	temp2 = (temp1 >> 11) & 0x001f;
 800125e:	0ac2      	lsrs	r2, r0, #11
	counter |= (temp2 << 2);
 8001260:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
	temp2 = (temp1 >> 1) & 0x0003;
 8001264:	f3c4 0441 	ubfx	r4, r4, #1, #2
	counter |= temp2;
 8001268:	431c      	orrs	r4, r3
	adc_value_a = convert_number(adc_data_a);
 800126a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800126e:	f7ff ff93 	bl	8001198 <convert_number>
 8001272:	4606      	mov	r6, r0
	if (count == 0) counter_first = counter;
 8001274:	2f00      	cmp	r7, #0
 8001276:	d0c6      	beq.n	8001206 <find_max2+0x1a>
		if (((adc_value_a / 512.0 * 0.5) + 1.50) > max_ns_v) {
 8001278:	4630      	mov	r0, r6
 800127a:	f7ff f973 	bl	8000564 <__aeabi_i2d>
 800127e:	2200      	movs	r2, #0
 8001280:	4b1f      	ldr	r3, [pc, #124]	@ (8001300 <find_max2+0x114>)
 8001282:	f7ff f9d9 	bl	8000638 <__aeabi_dmul>
 8001286:	2200      	movs	r2, #0
 8001288:	4b1e      	ldr	r3, [pc, #120]	@ (8001304 <find_max2+0x118>)
 800128a:	f7ff f9d5 	bl	8000638 <__aeabi_dmul>
 800128e:	2200      	movs	r2, #0
 8001290:	4b1d      	ldr	r3, [pc, #116]	@ (8001308 <find_max2+0x11c>)
 8001292:	f7ff f81b 	bl	80002cc <__adddf3>
 8001296:	4680      	mov	r8, r0
 8001298:	4689      	mov	r9, r1
 800129a:	4650      	mov	r0, sl
 800129c:	f7ff f974 	bl	8000588 <__aeabi_f2d>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4640      	mov	r0, r8
 80012a6:	4649      	mov	r1, r9
 80012a8:	f7ff fc56 	bl	8000b58 <__aeabi_dcmpgt>
 80012ac:	2800      	cmp	r0, #0
 80012ae:	d0b3      	beq.n	8001218 <find_max2+0x2c>
 80012b0:	e7ab      	b.n	800120a <find_max2+0x1e>
	clear_buffer();
 80012b2:	f7ff ff61 	bl	8001178 <clear_buffer>
	printf("----------------------------------------------------\n");
 80012b6:	4c15      	ldr	r4, [pc, #84]	@ (800130c <find_max2+0x120>)
 80012b8:	4620      	mov	r0, r4
 80012ba:	f002 fc1b 	bl	8003af4 <puts>
	printf(" Max ADC = %d, Voltage = %2.4f\n", max_ns_adc,max_ns_v);
 80012be:	4650      	mov	r0, sl
 80012c0:	f7ff f962 	bl	8000588 <__aeabi_f2d>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	9900      	ldr	r1, [sp, #0]
 80012ca:	4811      	ldr	r0, [pc, #68]	@ (8001310 <find_max2+0x124>)
 80012cc:	f002 fbaa 	bl	8003a24 <iprintf>
	printf(" Trig @ %lu, Max @ %lu, Peak at %d us\n", counter_first, max_ns_t, (max_ns_t -counter_first) / 10 );
 80012d0:	9901      	ldr	r1, [sp, #4]
 80012d2:	ebab 0301 	sub.w	r3, fp, r1
 80012d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001314 <find_max2+0x128>)
 80012d8:	fba2 2303 	umull	r2, r3, r2, r3
 80012dc:	08db      	lsrs	r3, r3, #3
 80012de:	465a      	mov	r2, fp
 80012e0:	480d      	ldr	r0, [pc, #52]	@ (8001318 <find_max2+0x12c>)
 80012e2:	f002 fb9f 	bl	8003a24 <iprintf>
	printf("----------------------------------------------------\n");
 80012e6:	4620      	mov	r0, r4
 80012e8:	f002 fc04 	bl	8003af4 <puts>
}
 80012ec:	b003      	add	sp, #12
 80012ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012f2:	bf00      	nop
 80012f4:	200001fc 	.word	0x200001fc
 80012f8:	200001f8 	.word	0x200001f8
 80012fc:	20000200 	.word	0x20000200
 8001300:	3f600000 	.word	0x3f600000
 8001304:	3fe00000 	.word	0x3fe00000
 8001308:	3ff80000 	.word	0x3ff80000
 800130c:	080059f8 	.word	0x080059f8
 8001310:	08005a30 	.word	0x08005a30
 8001314:	cccccccd 	.word	0xcccccccd
 8001318:	08005a50 	.word	0x08005a50

0800131c <_write>:
{
 800131c:	b510      	push	{r4, lr}
 800131e:	4614      	mov	r4, r2
    HAL_UART_Transmit(debug_uart, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8001320:	f04f 33ff 	mov.w	r3, #4294967295
 8001324:	b292      	uxth	r2, r2
 8001326:	4803      	ldr	r0, [pc, #12]	@ (8001334 <_write+0x18>)
 8001328:	6800      	ldr	r0, [r0, #0]
 800132a:	f001 fd9b 	bl	8002e64 <HAL_UART_Transmit>
}
 800132e:	4620      	mov	r0, r4
 8001330:	bd10      	pop	{r4, pc}
 8001332:	bf00      	nop
 8001334:	200011a0 	.word	0x200011a0

08001338 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001338:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800133a:	e7fe      	b.n	800133a <Error_Handler+0x2>

0800133c <MX_USART1_UART_Init>:
{
 800133c:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 800133e:	480b      	ldr	r0, [pc, #44]	@ (800136c <MX_USART1_UART_Init+0x30>)
 8001340:	4b0b      	ldr	r3, [pc, #44]	@ (8001370 <MX_USART1_UART_Init+0x34>)
 8001342:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001344:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001348:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800134a:	2300      	movs	r3, #0
 800134c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800134e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001350:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001352:	220c      	movs	r2, #12
 8001354:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001356:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001358:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800135a:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800135c:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800135e:	f001 fe18 	bl	8002f92 <HAL_UART_Init>
 8001362:	b900      	cbnz	r0, 8001366 <MX_USART1_UART_Init+0x2a>
}
 8001364:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001366:	f7ff ffe7 	bl	8001338 <Error_Handler>
 800136a:	bf00      	nop
 800136c:	20001230 	.word	0x20001230
 8001370:	40011000 	.word	0x40011000

08001374 <MX_UART4_Init>:
{
 8001374:	b508      	push	{r3, lr}
  huart4.Instance = UART4;
 8001376:	480b      	ldr	r0, [pc, #44]	@ (80013a4 <MX_UART4_Init+0x30>)
 8001378:	4b0b      	ldr	r3, [pc, #44]	@ (80013a8 <MX_UART4_Init+0x34>)
 800137a:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 115200;
 800137c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001380:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001382:	2300      	movs	r3, #0
 8001384:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001386:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001388:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800138a:	220c      	movs	r2, #12
 800138c:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138e:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001390:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001392:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001394:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001396:	f001 fdfc 	bl	8002f92 <HAL_UART_Init>
 800139a:	b900      	cbnz	r0, 800139e <MX_UART4_Init+0x2a>
}
 800139c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800139e:	f7ff ffcb 	bl	8001338 <Error_Handler>
 80013a2:	bf00      	nop
 80013a4:	200012b8 	.word	0x200012b8
 80013a8:	40004c00 	.word	0x40004c00

080013ac <MX_USART2_UART_Init>:
{
 80013ac:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 80013ae:	480b      	ldr	r0, [pc, #44]	@ (80013dc <MX_USART2_UART_Init+0x30>)
 80013b0:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <MX_USART2_UART_Init+0x34>)
 80013b2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80013b4:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80013b8:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ba:	2300      	movs	r3, #0
 80013bc:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013be:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013c0:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013c2:	220c      	movs	r2, #12
 80013c4:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c8:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ca:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013cc:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ce:	f001 fde0 	bl	8002f92 <HAL_UART_Init>
 80013d2:	b900      	cbnz	r0, 80013d6 <MX_USART2_UART_Init+0x2a>
}
 80013d4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80013d6:	f7ff ffaf 	bl	8001338 <Error_Handler>
 80013da:	bf00      	nop
 80013dc:	200011a8 	.word	0x200011a8
 80013e0:	40004400 	.word	0x40004400

080013e4 <SystemClock_Config>:
{
 80013e4:	b500      	push	{lr}
 80013e6:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013e8:	2230      	movs	r2, #48	@ 0x30
 80013ea:	2100      	movs	r1, #0
 80013ec:	a808      	add	r0, sp, #32
 80013ee:	f002 fc61 	bl	8003cb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f2:	2300      	movs	r3, #0
 80013f4:	9303      	str	r3, [sp, #12]
 80013f6:	9304      	str	r3, [sp, #16]
 80013f8:	9305      	str	r3, [sp, #20]
 80013fa:	9306      	str	r3, [sp, #24]
 80013fc:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fe:	4b22      	ldr	r3, [pc, #136]	@ (8001488 <SystemClock_Config+0xa4>)
 8001400:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001402:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001406:	641a      	str	r2, [r3, #64]	@ 0x40
 8001408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800140e:	9301      	str	r3, [sp, #4]
 8001410:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001412:	4b1e      	ldr	r3, [pc, #120]	@ (800148c <SystemClock_Config+0xa8>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001422:	9302      	str	r3, [sp, #8]
 8001424:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001426:	2301      	movs	r3, #1
 8001428:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800142a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800142e:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001430:	2302      	movs	r3, #2
 8001432:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001434:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001438:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800143a:	2204      	movs	r2, #4
 800143c:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800143e:	22d8      	movs	r2, #216	@ 0xd8
 8001440:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001442:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001444:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001446:	a808      	add	r0, sp, #32
 8001448:	f000 fc5c 	bl	8001d04 <HAL_RCC_OscConfig>
 800144c:	b9b0      	cbnz	r0, 800147c <SystemClock_Config+0x98>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800144e:	f000 fc1b 	bl	8001c88 <HAL_PWREx_EnableOverDrive>
 8001452:	b9a8      	cbnz	r0, 8001480 <SystemClock_Config+0x9c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001454:	230f      	movs	r3, #15
 8001456:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001458:	2302      	movs	r3, #2
 800145a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800145c:	2300      	movs	r3, #0
 800145e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001460:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001464:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001466:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800146a:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800146c:	2107      	movs	r1, #7
 800146e:	a803      	add	r0, sp, #12
 8001470:	f000 fed0 	bl	8002214 <HAL_RCC_ClockConfig>
 8001474:	b930      	cbnz	r0, 8001484 <SystemClock_Config+0xa0>
}
 8001476:	b015      	add	sp, #84	@ 0x54
 8001478:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800147c:	f7ff ff5c 	bl	8001338 <Error_Handler>
    Error_Handler();
 8001480:	f7ff ff5a 	bl	8001338 <Error_Handler>
    Error_Handler();
 8001484:	f7ff ff58 	bl	8001338 <Error_Handler>
 8001488:	40023800 	.word	0x40023800
 800148c:	40007000 	.word	0x40007000

08001490 <main>:
{
 8001490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001492:	b09b      	sub	sp, #108	@ 0x6c
	const char str[100] = "Hello from STM32\n";
 8001494:	4d34      	ldr	r5, [pc, #208]	@ (8001568 <main+0xd8>)
 8001496:	ac01      	add	r4, sp, #4
 8001498:	6828      	ldr	r0, [r5, #0]
 800149a:	6869      	ldr	r1, [r5, #4]
 800149c:	68aa      	ldr	r2, [r5, #8]
 800149e:	68eb      	ldr	r3, [r5, #12]
 80014a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014a2:	8a2b      	ldrh	r3, [r5, #16]
 80014a4:	8023      	strh	r3, [r4, #0]
 80014a6:	2252      	movs	r2, #82	@ 0x52
 80014a8:	2100      	movs	r1, #0
 80014aa:	f10d 0016 	add.w	r0, sp, #22
 80014ae:	f002 fc01 	bl	8003cb4 <memset>
  MPU_Config();
 80014b2:	f7ff fd7f 	bl	8000fb4 <MPU_Config>
  HAL_Init();
 80014b6:	f000 f9fb 	bl	80018b0 <HAL_Init>
  esp_uart = &huart2;
 80014ba:	4b2c      	ldr	r3, [pc, #176]	@ (800156c <main+0xdc>)
 80014bc:	4a2c      	ldr	r2, [pc, #176]	@ (8001570 <main+0xe0>)
 80014be:	601a      	str	r2, [r3, #0]
  debug_uart = &huart4;
 80014c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001574 <main+0xe4>)
 80014c2:	4a2d      	ldr	r2, [pc, #180]	@ (8001578 <main+0xe8>)
 80014c4:	601a      	str	r2, [r3, #0]
  SystemClock_Config();
 80014c6:	f7ff ff8d 	bl	80013e4 <SystemClock_Config>
  MX_GPIO_Init();
 80014ca:	f7ff fd9d 	bl	8001008 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80014ce:	f7ff ff35 	bl	800133c <MX_USART1_UART_Init>
  MX_UART4_Init();
 80014d2:	f7ff ff4f 	bl	8001374 <MX_UART4_Init>
  MX_USART2_UART_Init();
 80014d6:	f7ff ff69 	bl	80013ac <MX_USART2_UART_Init>
  head = sample;
 80014da:	4c28      	ldr	r4, [pc, #160]	@ (800157c <main+0xec>)
 80014dc:	4d28      	ldr	r5, [pc, #160]	@ (8001580 <main+0xf0>)
 80014de:	6025      	str	r5, [r4, #0]
  tail = sample + SAMPLE_READ_MAX - 1;
 80014e0:	4e28      	ldr	r6, [pc, #160]	@ (8001584 <main+0xf4>)
 80014e2:	f605 7798 	addw	r7, r5, #3992	@ 0xf98
 80014e6:	6037      	str	r7, [r6, #0]
  printf("Setup :\n");
 80014e8:	4827      	ldr	r0, [pc, #156]	@ (8001588 <main+0xf8>)
 80014ea:	f002 fb03 	bl	8003af4 <puts>
  printf("Sample address start = 0x%X end = 0x%x\n", sample, &(sample[SAMPLE_READ_MAX-1]));
 80014ee:	463a      	mov	r2, r7
 80014f0:	4629      	mov	r1, r5
 80014f2:	4826      	ldr	r0, [pc, #152]	@ (800158c <main+0xfc>)
 80014f4:	f002 fa96 	bl	8003a24 <iprintf>
  printf("head = 0x%X tail = 0x%x\n", head, tail);
 80014f8:	6832      	ldr	r2, [r6, #0]
 80014fa:	6821      	ldr	r1, [r4, #0]
 80014fc:	4824      	ldr	r0, [pc, #144]	@ (8001590 <main+0x100>)
 80014fe:	f002 fa91 	bl	8003a24 <iprintf>
  curr = head;
 8001502:	4d24      	ldr	r5, [pc, #144]	@ (8001594 <main+0x104>)
 8001504:	6823      	ldr	r3, [r4, #0]
 8001506:	602b      	str	r3, [r5, #0]
  clear_buffer();
 8001508:	f7ff fe36 	bl	8001178 <clear_buffer>
  printf("Main program started\n");
 800150c:	4822      	ldr	r0, [pc, #136]	@ (8001598 <main+0x108>)
 800150e:	f002 faf1 	bl	8003af4 <puts>
  HAL_GPIO_WritePin(USER_LED_BLUE_GPIO_Port, USER_LED_BLUE_Pin, 0);
 8001512:	2200      	movs	r2, #0
 8001514:	2180      	movs	r1, #128	@ 0x80
 8001516:	4821      	ldr	r0, [pc, #132]	@ (800159c <main+0x10c>)
 8001518:	f000 fbb0 	bl	8001c7c <HAL_GPIO_WritePin>
  curr = head;
 800151c:	6823      	ldr	r3, [r4, #0]
 800151e:	602b      	str	r3, [r5, #0]
  trigger = 0;
 8001520:	4b1f      	ldr	r3, [pc, #124]	@ (80015a0 <main+0x110>)
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	e003      	b.n	8001530 <main+0xa0>
		read_adc2();
 8001528:	f7ff fe42 	bl	80011b0 <read_adc2>
		find_max2();
 800152c:	f7ff fe5e 	bl	80011ec <find_max2>
	  port_d = GPIOD->IDR;
 8001530:	4b1c      	ldr	r3, [pc, #112]	@ (80015a4 <main+0x114>)
 8001532:	691b      	ldr	r3, [r3, #16]
	  if((port_d & 0x0002) > 0){
 8001534:	f013 0f02 	tst.w	r3, #2
 8001538:	d1f6      	bne.n	8001528 <main+0x98>
	  }else if ((port_d & 0x0008) > 0){
 800153a:	f013 0f08 	tst.w	r3, #8
 800153e:	d0f7      	beq.n	8001530 <main+0xa0>
		printf("Trig-\n");
 8001540:	4819      	ldr	r0, [pc, #100]	@ (80015a8 <main+0x118>)
 8001542:	f002 fad7 	bl	8003af4 <puts>
		HAL_GPIO_WritePin(USER_LED_BLUE_GPIO_Port, USER_LED_BLUE_Pin, 1);
 8001546:	4c15      	ldr	r4, [pc, #84]	@ (800159c <main+0x10c>)
 8001548:	2201      	movs	r2, #1
 800154a:	2180      	movs	r1, #128	@ 0x80
 800154c:	4620      	mov	r0, r4
 800154e:	f000 fb95 	bl	8001c7c <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8001552:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001556:	f000 f9c9 	bl	80018ec <HAL_Delay>
		HAL_GPIO_WritePin(USER_LED_BLUE_GPIO_Port, USER_LED_BLUE_Pin, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	2180      	movs	r1, #128	@ 0x80
 800155e:	4620      	mov	r0, r4
 8001560:	f000 fb8c 	bl	8001c7c <HAL_GPIO_WritePin>
 8001564:	e7e4      	b.n	8001530 <main+0xa0>
 8001566:	bf00      	nop
 8001568:	08005ae4 	.word	0x08005ae4
 800156c:	200011a4 	.word	0x200011a4
 8001570:	200011a8 	.word	0x200011a8
 8001574:	200011a0 	.word	0x200011a0
 8001578:	200012b8 	.word	0x200012b8
 800157c:	200001fc 	.word	0x200001fc
 8001580:	20000200 	.word	0x20000200
 8001584:	200001f4 	.word	0x200001f4
 8001588:	08005a78 	.word	0x08005a78
 800158c:	08005a80 	.word	0x08005a80
 8001590:	08005aa8 	.word	0x08005aa8
 8001594:	200001f8 	.word	0x200001f8
 8001598:	08005ac4 	.word	0x08005ac4
 800159c:	40020400 	.word	0x40020400
 80015a0:	200001f0 	.word	0x200001f0
 80015a4:	40020c00 	.word	0x40020c00
 80015a8:	08005adc 	.word	0x08005adc

080015ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80015ae:	4b0a      	ldr	r3, [pc, #40]	@ (80015d8 <HAL_MspInit+0x2c>)
 80015b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015b2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80015b6:	641a      	str	r2, [r3, #64]	@ 0x40
 80015b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015ba:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80015be:	9200      	str	r2, [sp, #0]
 80015c0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80015c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80015c8:	645a      	str	r2, [r3, #68]	@ 0x44
 80015ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015d0:	9301      	str	r3, [sp, #4]
 80015d2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d4:	b002      	add	sp, #8
 80015d6:	4770      	bx	lr
 80015d8:	40023800 	.word	0x40023800

080015dc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015dc:	b510      	push	{r4, lr}
 80015de:	b0ac      	sub	sp, #176	@ 0xb0
 80015e0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e2:	2100      	movs	r1, #0
 80015e4:	9127      	str	r1, [sp, #156]	@ 0x9c
 80015e6:	9128      	str	r1, [sp, #160]	@ 0xa0
 80015e8:	9129      	str	r1, [sp, #164]	@ 0xa4
 80015ea:	912a      	str	r1, [sp, #168]	@ 0xa8
 80015ec:	912b      	str	r1, [sp, #172]	@ 0xac
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015ee:	2284      	movs	r2, #132	@ 0x84
 80015f0:	a806      	add	r0, sp, #24
 80015f2:	f002 fb5f 	bl	8003cb4 <memset>
  if(huart->Instance==UART4)
 80015f6:	6823      	ldr	r3, [r4, #0]
 80015f8:	4a47      	ldr	r2, [pc, #284]	@ (8001718 <HAL_UART_MspInit+0x13c>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d007      	beq.n	800160e <HAL_UART_MspInit+0x32>

    /* USER CODE BEGIN UART4_MspInit 1 */

    /* USER CODE END UART4_MspInit 1 */
  }
  else if(huart->Instance==USART1)
 80015fe:	4a47      	ldr	r2, [pc, #284]	@ (800171c <HAL_UART_MspInit+0x140>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d031      	beq.n	8001668 <HAL_UART_MspInit+0x8c>

    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8001604:	4a46      	ldr	r2, [pc, #280]	@ (8001720 <HAL_UART_MspInit+0x144>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d05a      	beq.n	80016c0 <HAL_UART_MspInit+0xe4>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 800160a:	b02c      	add	sp, #176	@ 0xb0
 800160c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800160e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001612:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001614:	a806      	add	r0, sp, #24
 8001616:	f000 fed9 	bl	80023cc <HAL_RCCEx_PeriphCLKConfig>
 800161a:	bb10      	cbnz	r0, 8001662 <HAL_UART_MspInit+0x86>
    __HAL_RCC_UART4_CLK_ENABLE();
 800161c:	4b41      	ldr	r3, [pc, #260]	@ (8001724 <HAL_UART_MspInit+0x148>)
 800161e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001620:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001624:	641a      	str	r2, [r3, #64]	@ 0x40
 8001626:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001628:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
 800162c:	9200      	str	r2, [sp, #0]
 800162e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001630:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001632:	f042 0204 	orr.w	r2, r2, #4
 8001636:	631a      	str	r2, [r3, #48]	@ 0x30
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	f003 0304 	and.w	r3, r3, #4
 800163e:	9301      	str	r3, [sp, #4]
 8001640:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001642:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001646:	9327      	str	r3, [sp, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	9328      	str	r3, [sp, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	9329      	str	r3, [sp, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001650:	2303      	movs	r3, #3
 8001652:	932a      	str	r3, [sp, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001654:	2308      	movs	r3, #8
 8001656:	932b      	str	r3, [sp, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001658:	a927      	add	r1, sp, #156	@ 0x9c
 800165a:	4833      	ldr	r0, [pc, #204]	@ (8001728 <HAL_UART_MspInit+0x14c>)
 800165c:	f000 fa0c 	bl	8001a78 <HAL_GPIO_Init>
 8001660:	e7d3      	b.n	800160a <HAL_UART_MspInit+0x2e>
      Error_Handler();
 8001662:	f7ff fe69 	bl	8001338 <Error_Handler>
 8001666:	e7d9      	b.n	800161c <HAL_UART_MspInit+0x40>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001668:	2340      	movs	r3, #64	@ 0x40
 800166a:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800166c:	a806      	add	r0, sp, #24
 800166e:	f000 fead 	bl	80023cc <HAL_RCCEx_PeriphCLKConfig>
 8001672:	bb10      	cbnz	r0, 80016ba <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001674:	4b2b      	ldr	r3, [pc, #172]	@ (8001724 <HAL_UART_MspInit+0x148>)
 8001676:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001678:	f042 0210 	orr.w	r2, r2, #16
 800167c:	645a      	str	r2, [r3, #68]	@ 0x44
 800167e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001680:	f002 0210 	and.w	r2, r2, #16
 8001684:	9202      	str	r2, [sp, #8]
 8001686:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001688:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800168a:	f042 0201 	orr.w	r2, r2, #1
 800168e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	9303      	str	r3, [sp, #12]
 8001698:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800169a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800169e:	9327      	str	r3, [sp, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	9328      	str	r3, [sp, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	9329      	str	r3, [sp, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a8:	2303      	movs	r3, #3
 80016aa:	932a      	str	r3, [sp, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016ac:	2307      	movs	r3, #7
 80016ae:	932b      	str	r3, [sp, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	a927      	add	r1, sp, #156	@ 0x9c
 80016b2:	481e      	ldr	r0, [pc, #120]	@ (800172c <HAL_UART_MspInit+0x150>)
 80016b4:	f000 f9e0 	bl	8001a78 <HAL_GPIO_Init>
 80016b8:	e7a7      	b.n	800160a <HAL_UART_MspInit+0x2e>
      Error_Handler();
 80016ba:	f7ff fe3d 	bl	8001338 <Error_Handler>
 80016be:	e7d9      	b.n	8001674 <HAL_UART_MspInit+0x98>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016c0:	2380      	movs	r3, #128	@ 0x80
 80016c2:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016c4:	a806      	add	r0, sp, #24
 80016c6:	f000 fe81 	bl	80023cc <HAL_RCCEx_PeriphCLKConfig>
 80016ca:	bb08      	cbnz	r0, 8001710 <HAL_UART_MspInit+0x134>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016cc:	4b15      	ldr	r3, [pc, #84]	@ (8001724 <HAL_UART_MspInit+0x148>)
 80016ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016d0:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80016d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80016d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016d8:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80016dc:	9204      	str	r2, [sp, #16]
 80016de:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016e2:	f042 0208 	orr.w	r2, r2, #8
 80016e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	9305      	str	r3, [sp, #20]
 80016f0:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80016f2:	2360      	movs	r3, #96	@ 0x60
 80016f4:	9327      	str	r3, [sp, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	9328      	str	r3, [sp, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	9329      	str	r3, [sp, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fe:	2303      	movs	r3, #3
 8001700:	932a      	str	r3, [sp, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001702:	2307      	movs	r3, #7
 8001704:	932b      	str	r3, [sp, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001706:	a927      	add	r1, sp, #156	@ 0x9c
 8001708:	4809      	ldr	r0, [pc, #36]	@ (8001730 <HAL_UART_MspInit+0x154>)
 800170a:	f000 f9b5 	bl	8001a78 <HAL_GPIO_Init>
}
 800170e:	e77c      	b.n	800160a <HAL_UART_MspInit+0x2e>
      Error_Handler();
 8001710:	f7ff fe12 	bl	8001338 <Error_Handler>
 8001714:	e7da      	b.n	80016cc <HAL_UART_MspInit+0xf0>
 8001716:	bf00      	nop
 8001718:	40004c00 	.word	0x40004c00
 800171c:	40011000 	.word	0x40011000
 8001720:	40004400 	.word	0x40004400
 8001724:	40023800 	.word	0x40023800
 8001728:	40020800 	.word	0x40020800
 800172c:	40020000 	.word	0x40020000
 8001730:	40020c00 	.word	0x40020c00

08001734 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001734:	e7fe      	b.n	8001734 <NMI_Handler>

08001736 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <HardFault_Handler>

08001738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001738:	b508      	push	{r3, lr}

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	printf("Error\n");
 800173a:	4802      	ldr	r0, [pc, #8]	@ (8001744 <MemManage_Handler+0xc>)
 800173c:	f002 f9da 	bl	8003af4 <puts>
  while (1)
 8001740:	e7fb      	b.n	800173a <MemManage_Handler+0x2>
 8001742:	bf00      	nop
 8001744:	08005af8 	.word	0x08005af8

08001748 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <BusFault_Handler>

0800174a <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800174a:	e7fe      	b.n	800174a <UsageFault_Handler>

0800174c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800174c:	4770      	bx	lr

0800174e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800174e:	4770      	bx	lr

08001750 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001750:	4770      	bx	lr

08001752 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001752:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001754:	f000 f8b8 	bl	80018c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001758:	bd08      	pop	{r3, pc}

0800175a <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800175a:	2001      	movs	r0, #1
 800175c:	4770      	bx	lr

0800175e <_kill>:

int _kill(int pid, int sig)
{
 800175e:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001760:	f002 fafa 	bl	8003d58 <__errno>
 8001764:	2316      	movs	r3, #22
 8001766:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001768:	f04f 30ff 	mov.w	r0, #4294967295
 800176c:	bd08      	pop	{r3, pc}

0800176e <_exit>:

void _exit (int status)
{
 800176e:	b508      	push	{r3, lr}
  _kill(status, -1);
 8001770:	f04f 31ff 	mov.w	r1, #4294967295
 8001774:	f7ff fff3 	bl	800175e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001778:	e7fe      	b.n	8001778 <_exit+0xa>

0800177a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800177a:	b570      	push	{r4, r5, r6, lr}
 800177c:	460c      	mov	r4, r1
 800177e:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001780:	2500      	movs	r5, #0
 8001782:	e006      	b.n	8001792 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8001784:	f3af 8000 	nop.w
 8001788:	4621      	mov	r1, r4
 800178a:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178e:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8001790:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001792:	42b5      	cmp	r5, r6
 8001794:	dbf6      	blt.n	8001784 <_read+0xa>
  }

  return len;
}
 8001796:	4630      	mov	r0, r6
 8001798:	bd70      	pop	{r4, r5, r6, pc}

0800179a <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 800179a:	f04f 30ff 	mov.w	r0, #4294967295
 800179e:	4770      	bx	lr

080017a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80017a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017a4:	604b      	str	r3, [r1, #4]
  return 0;
}
 80017a6:	2000      	movs	r0, #0
 80017a8:	4770      	bx	lr

080017aa <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80017aa:	2001      	movs	r0, #1
 80017ac:	4770      	bx	lr

080017ae <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80017ae:	2000      	movs	r0, #0
 80017b0:	4770      	bx	lr
	...

080017b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b4:	b510      	push	{r4, lr}
 80017b6:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b8:	4a0c      	ldr	r2, [pc, #48]	@ (80017ec <_sbrk+0x38>)
 80017ba:	490d      	ldr	r1, [pc, #52]	@ (80017f0 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017bc:	480d      	ldr	r0, [pc, #52]	@ (80017f4 <_sbrk+0x40>)
 80017be:	6800      	ldr	r0, [r0, #0]
 80017c0:	b140      	cbz	r0, 80017d4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c2:	480c      	ldr	r0, [pc, #48]	@ (80017f4 <_sbrk+0x40>)
 80017c4:	6800      	ldr	r0, [r0, #0]
 80017c6:	4403      	add	r3, r0
 80017c8:	1a52      	subs	r2, r2, r1
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d806      	bhi.n	80017dc <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80017ce:	4a09      	ldr	r2, [pc, #36]	@ (80017f4 <_sbrk+0x40>)
 80017d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80017d2:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80017d4:	4807      	ldr	r0, [pc, #28]	@ (80017f4 <_sbrk+0x40>)
 80017d6:	4c08      	ldr	r4, [pc, #32]	@ (80017f8 <_sbrk+0x44>)
 80017d8:	6004      	str	r4, [r0, #0]
 80017da:	e7f2      	b.n	80017c2 <_sbrk+0xe>
    errno = ENOMEM;
 80017dc:	f002 fabc 	bl	8003d58 <__errno>
 80017e0:	230c      	movs	r3, #12
 80017e2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295
 80017e8:	e7f3      	b.n	80017d2 <_sbrk+0x1e>
 80017ea:	bf00      	nop
 80017ec:	20050000 	.word	0x20050000
 80017f0:	00000400 	.word	0x00000400
 80017f4:	20001340 	.word	0x20001340
 80017f8:	20001498 	.word	0x20001498

080017fc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017fc:	4a03      	ldr	r2, [pc, #12]	@ (800180c <SystemInit+0x10>)
 80017fe:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001802:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001806:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001810:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001848 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001814:	f7ff fff2 	bl	80017fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001818:	480c      	ldr	r0, [pc, #48]	@ (800184c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800181a:	490d      	ldr	r1, [pc, #52]	@ (8001850 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800181c:	4a0d      	ldr	r2, [pc, #52]	@ (8001854 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001820:	e002      	b.n	8001828 <LoopCopyDataInit>

08001822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001826:	3304      	adds	r3, #4

08001828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800182c:	d3f9      	bcc.n	8001822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182e:	4a0a      	ldr	r2, [pc, #40]	@ (8001858 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001830:	4c0a      	ldr	r4, [pc, #40]	@ (800185c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001834:	e001      	b.n	800183a <LoopFillZerobss>

08001836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001838:	3204      	adds	r2, #4

0800183a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800183c:	d3fb      	bcc.n	8001836 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800183e:	f002 fa91 	bl	8003d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001842:	f7ff fe25 	bl	8001490 <main>
  bx  lr    
 8001846:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001848:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800184c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001850:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001854:	08005e9c 	.word	0x08005e9c
  ldr r2, =_sbss
 8001858:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800185c:	20001494 	.word	0x20001494

08001860 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001860:	e7fe      	b.n	8001860 <ADC_IRQHandler>
	...

08001864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001864:	b510      	push	{r4, lr}
 8001866:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001868:	4b0e      	ldr	r3, [pc, #56]	@ (80018a4 <HAL_InitTick+0x40>)
 800186a:	781a      	ldrb	r2, [r3, #0]
 800186c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001870:	fbb3 f3f2 	udiv	r3, r3, r2
 8001874:	4a0c      	ldr	r2, [pc, #48]	@ (80018a8 <HAL_InitTick+0x44>)
 8001876:	6810      	ldr	r0, [r2, #0]
 8001878:	fbb0 f0f3 	udiv	r0, r0, r3
 800187c:	f000 f89e 	bl	80019bc <HAL_SYSTICK_Config>
 8001880:	b968      	cbnz	r0, 800189e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001882:	2c0f      	cmp	r4, #15
 8001884:	d901      	bls.n	800188a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001886:	2001      	movs	r0, #1
 8001888:	e00a      	b.n	80018a0 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800188a:	2200      	movs	r2, #0
 800188c:	4621      	mov	r1, r4
 800188e:	f04f 30ff 	mov.w	r0, #4294967295
 8001892:	f000 f883 	bl	800199c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001896:	4b05      	ldr	r3, [pc, #20]	@ (80018ac <HAL_InitTick+0x48>)
 8001898:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800189a:	2000      	movs	r0, #0
 800189c:	e000      	b.n	80018a0 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800189e:	2001      	movs	r0, #1
}
 80018a0:	bd10      	pop	{r4, pc}
 80018a2:	bf00      	nop
 80018a4:	20000004 	.word	0x20000004
 80018a8:	20000000 	.word	0x20000000
 80018ac:	20000008 	.word	0x20000008

080018b0 <HAL_Init>:
{
 80018b0:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b2:	2003      	movs	r0, #3
 80018b4:	f000 f860 	bl	8001978 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80018b8:	200f      	movs	r0, #15
 80018ba:	f7ff ffd3 	bl	8001864 <HAL_InitTick>
  HAL_MspInit();
 80018be:	f7ff fe75 	bl	80015ac <HAL_MspInit>
}
 80018c2:	2000      	movs	r0, #0
 80018c4:	bd08      	pop	{r3, pc}
	...

080018c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80018c8:	4a03      	ldr	r2, [pc, #12]	@ (80018d8 <HAL_IncTick+0x10>)
 80018ca:	6811      	ldr	r1, [r2, #0]
 80018cc:	4b03      	ldr	r3, [pc, #12]	@ (80018dc <HAL_IncTick+0x14>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	440b      	add	r3, r1
 80018d2:	6013      	str	r3, [r2, #0]
}
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20001344 	.word	0x20001344
 80018dc:	20000004 	.word	0x20000004

080018e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80018e0:	4b01      	ldr	r3, [pc, #4]	@ (80018e8 <HAL_GetTick+0x8>)
 80018e2:	6818      	ldr	r0, [r3, #0]
}
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20001344 	.word	0x20001344

080018ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018ec:	b538      	push	{r3, r4, r5, lr}
 80018ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80018f0:	f7ff fff6 	bl	80018e0 <HAL_GetTick>
 80018f4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018f6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80018fa:	d002      	beq.n	8001902 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80018fc:	4b04      	ldr	r3, [pc, #16]	@ (8001910 <HAL_Delay+0x24>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001902:	f7ff ffed 	bl	80018e0 <HAL_GetTick>
 8001906:	1b40      	subs	r0, r0, r5
 8001908:	42a0      	cmp	r0, r4
 800190a:	d3fa      	bcc.n	8001902 <HAL_Delay+0x16>
  {
  }
}
 800190c:	bd38      	pop	{r3, r4, r5, pc}
 800190e:	bf00      	nop
 8001910:	20000004 	.word	0x20000004

08001914 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001914:	2800      	cmp	r0, #0
 8001916:	db04      	blt.n	8001922 <__NVIC_SetPriority+0xe>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001918:	0109      	lsls	r1, r1, #4
 800191a:	b2c9      	uxtb	r1, r1
 800191c:	4b04      	ldr	r3, [pc, #16]	@ (8001930 <__NVIC_SetPriority+0x1c>)
 800191e:	5419      	strb	r1, [r3, r0]
 8001920:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001922:	f000 000f 	and.w	r0, r0, #15
 8001926:	0109      	lsls	r1, r1, #4
 8001928:	b2c9      	uxtb	r1, r1
 800192a:	4b02      	ldr	r3, [pc, #8]	@ (8001934 <__NVIC_SetPriority+0x20>)
 800192c:	5419      	strb	r1, [r3, r0]
  }
}
 800192e:	4770      	bx	lr
 8001930:	e000e400 	.word	0xe000e400
 8001934:	e000ed14 	.word	0xe000ed14

08001938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001938:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800193a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800193e:	f1c0 0c07 	rsb	ip, r0, #7
 8001942:	f1bc 0f04 	cmp.w	ip, #4
 8001946:	bf28      	it	cs
 8001948:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194c:	1d03      	adds	r3, r0, #4
 800194e:	2b06      	cmp	r3, #6
 8001950:	d90f      	bls.n	8001972 <NVIC_EncodePriority+0x3a>
 8001952:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001954:	f04f 3eff 	mov.w	lr, #4294967295
 8001958:	fa0e f00c 	lsl.w	r0, lr, ip
 800195c:	ea21 0100 	bic.w	r1, r1, r0
 8001960:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001962:	fa0e fe03 	lsl.w	lr, lr, r3
 8001966:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 800196a:	ea41 0002 	orr.w	r0, r1, r2
 800196e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001972:	2300      	movs	r3, #0
 8001974:	e7ee      	b.n	8001954 <NVIC_EncodePriority+0x1c>
	...

08001978 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001978:	4906      	ldr	r1, [pc, #24]	@ (8001994 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 800197a:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001980:	041b      	lsls	r3, r3, #16
 8001982:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001984:	0200      	lsls	r0, r0, #8
 8001986:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800198a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800198c:	4a02      	ldr	r2, [pc, #8]	@ (8001998 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800198e:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8001990:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001992:	4770      	bx	lr
 8001994:	e000ed00 	.word	0xe000ed00
 8001998:	05fa0000 	.word	0x05fa0000

0800199c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800199c:	b510      	push	{r4, lr}
 800199e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a0:	4b05      	ldr	r3, [pc, #20]	@ (80019b8 <HAL_NVIC_SetPriority+0x1c>)
 80019a2:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a4:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80019a8:	f7ff ffc6 	bl	8001938 <NVIC_EncodePriority>
 80019ac:	4601      	mov	r1, r0
 80019ae:	4620      	mov	r0, r4
 80019b0:	f7ff ffb0 	bl	8001914 <__NVIC_SetPriority>
}
 80019b4:	bd10      	pop	{r4, pc}
 80019b6:	bf00      	nop
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019bc:	3801      	subs	r0, #1
 80019be:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80019c2:	d20b      	bcs.n	80019dc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80019c8:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ca:	4a05      	ldr	r2, [pc, #20]	@ (80019e0 <HAL_SYSTICK_Config+0x24>)
 80019cc:	21f0      	movs	r1, #240	@ 0xf0
 80019ce:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d2:	2000      	movs	r0, #0
 80019d4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d6:	2207      	movs	r2, #7
 80019d8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019da:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80019dc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80019de:	4770      	bx	lr
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80019e4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80019e8:	4b04      	ldr	r3, [pc, #16]	@ (80019fc <HAL_MPU_Disable+0x18>)
 80019ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019ec:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80019f0:	625a      	str	r2, [r3, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80019f2:	2200      	movs	r2, #0
 80019f4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001a00:	f040 0001 	orr.w	r0, r0, #1
 8001a04:	4b05      	ldr	r3, [pc, #20]	@ (8001a1c <HAL_MPU_Enable+0x1c>)
 8001a06:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001a0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a0c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001a10:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001a12:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001a16:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001a1a:	4770      	bx	lr
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001a20:	7843      	ldrb	r3, [r0, #1]
 8001a22:	4a14      	ldr	r2, [pc, #80]	@ (8001a74 <HAL_MPU_ConfigRegion+0x54>)
 8001a24:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001a28:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8001a2c:	f023 0301 	bic.w	r3, r3, #1
 8001a30:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001a34:	6843      	ldr	r3, [r0, #4]
 8001a36:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a3a:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a3c:	7ac3      	ldrb	r3, [r0, #11]
 8001a3e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a40:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a44:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a46:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a4a:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a4c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a50:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a52:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a56:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a5c:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a5e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a62:	7a01      	ldrb	r1, [r0, #8]
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a64:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001a68:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a6a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a6c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001a78:	2300      	movs	r3, #0
 8001a7a:	2b0f      	cmp	r3, #15
 8001a7c:	f200 80f4 	bhi.w	8001c68 <HAL_GPIO_Init+0x1f0>
{
 8001a80:	b570      	push	{r4, r5, r6, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	e066      	b.n	8001b54 <HAL_GPIO_Init+0xdc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a86:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a88:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001a8c:	2403      	movs	r4, #3
 8001a8e:	fa04 f40e 	lsl.w	r4, r4, lr
 8001a92:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a96:	68cc      	ldr	r4, [r1, #12]
 8001a98:	fa04 f40e 	lsl.w	r4, r4, lr
 8001a9c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001a9e:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa0:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aa2:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aa6:	684a      	ldr	r2, [r1, #4]
 8001aa8:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001aac:	409a      	lsls	r2, r3
 8001aae:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001ab0:	6042      	str	r2, [r0, #4]
 8001ab2:	e05d      	b.n	8001b70 <HAL_GPIO_Init+0xf8>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ab4:	08dc      	lsrs	r4, r3, #3
 8001ab6:	3408      	adds	r4, #8
 8001ab8:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001abc:	f003 0507 	and.w	r5, r3, #7
 8001ac0:	00ad      	lsls	r5, r5, #2
 8001ac2:	f04f 0e0f 	mov.w	lr, #15
 8001ac6:	fa0e fe05 	lsl.w	lr, lr, r5
 8001aca:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ace:	690a      	ldr	r2, [r1, #16]
 8001ad0:	40aa      	lsls	r2, r5
 8001ad2:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3] = temp;
 8001ad6:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001ada:	e05d      	b.n	8001b98 <HAL_GPIO_Init+0x120>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001adc:	2209      	movs	r2, #9
 8001ade:	e000      	b.n	8001ae2 <HAL_GPIO_Init+0x6a>
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	fa02 f20e 	lsl.w	r2, r2, lr
 8001ae6:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ae8:	3402      	adds	r4, #2
 8001aea:	4d60      	ldr	r5, [pc, #384]	@ (8001c6c <HAL_GPIO_Init+0x1f4>)
 8001aec:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001af0:	4a5f      	ldr	r2, [pc, #380]	@ (8001c70 <HAL_GPIO_Init+0x1f8>)
 8001af2:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001af4:	ea6f 020c 	mvn.w	r2, ip
 8001af8:	ea24 050c 	bic.w	r5, r4, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001afc:	684e      	ldr	r6, [r1, #4]
 8001afe:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8001b02:	d001      	beq.n	8001b08 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8001b04:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001b08:	4c59      	ldr	r4, [pc, #356]	@ (8001c70 <HAL_GPIO_Init+0x1f8>)
 8001b0a:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001b0c:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001b0e:	ea02 0504 	and.w	r5, r2, r4
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b12:	684e      	ldr	r6, [r1, #4]
 8001b14:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001b18:	d001      	beq.n	8001b1e <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8001b1a:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001b1e:	4c54      	ldr	r4, [pc, #336]	@ (8001c70 <HAL_GPIO_Init+0x1f8>)
 8001b20:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8001b22:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001b24:	ea02 0504 	and.w	r5, r2, r4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b28:	684e      	ldr	r6, [r1, #4]
 8001b2a:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8001b2e:	d001      	beq.n	8001b34 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001b30:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001b34:	4c4e      	ldr	r4, [pc, #312]	@ (8001c70 <HAL_GPIO_Init+0x1f8>)
 8001b36:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b38:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001b3a:	4022      	ands	r2, r4
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b3c:	684d      	ldr	r5, [r1, #4]
 8001b3e:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8001b42:	d001      	beq.n	8001b48 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001b44:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001b48:	4c49      	ldr	r4, [pc, #292]	@ (8001c70 <HAL_GPIO_Init+0x1f8>)
 8001b4a:	6022      	str	r2, [r4, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	2b0f      	cmp	r3, #15
 8001b50:	f200 8088 	bhi.w	8001c64 <HAL_GPIO_Init+0x1ec>
    ioposition = ((uint32_t)0x01) << position;
 8001b54:	2201      	movs	r2, #1
 8001b56:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b58:	680c      	ldr	r4, [r1, #0]
 8001b5a:	ea04 0c02 	and.w	ip, r4, r2
    if (iocurrent == ioposition)
 8001b5e:	ea32 0404 	bics.w	r4, r2, r4
 8001b62:	d1f3      	bne.n	8001b4c <HAL_GPIO_Init+0xd4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b64:	684c      	ldr	r4, [r1, #4]
 8001b66:	f004 0403 	and.w	r4, r4, #3
 8001b6a:	3c01      	subs	r4, #1
 8001b6c:	2c01      	cmp	r4, #1
 8001b6e:	d98a      	bls.n	8001a86 <HAL_GPIO_Init+0xe>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b70:	684a      	ldr	r2, [r1, #4]
 8001b72:	f002 0203 	and.w	r2, r2, #3
 8001b76:	2a03      	cmp	r2, #3
 8001b78:	d009      	beq.n	8001b8e <HAL_GPIO_Init+0x116>
        temp = GPIOx->PUPDR;
 8001b7a:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b7c:	005d      	lsls	r5, r3, #1
 8001b7e:	2203      	movs	r2, #3
 8001b80:	40aa      	lsls	r2, r5
 8001b82:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b86:	688a      	ldr	r2, [r1, #8]
 8001b88:	40aa      	lsls	r2, r5
 8001b8a:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001b8c:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b8e:	684a      	ldr	r2, [r1, #4]
 8001b90:	f002 0203 	and.w	r2, r2, #3
 8001b94:	2a02      	cmp	r2, #2
 8001b96:	d08d      	beq.n	8001ab4 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8001b98:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b9a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	fa02 f20e 	lsl.w	r2, r2, lr
 8001ba4:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ba8:	684a      	ldr	r2, [r1, #4]
 8001baa:	f002 0203 	and.w	r2, r2, #3
 8001bae:	fa02 f20e 	lsl.w	r2, r2, lr
 8001bb2:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001bb4:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bb6:	684a      	ldr	r2, [r1, #4]
 8001bb8:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8001bbc:	d0c6      	beq.n	8001b4c <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bbe:	4a2d      	ldr	r2, [pc, #180]	@ (8001c74 <HAL_GPIO_Init+0x1fc>)
 8001bc0:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8001bc2:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001bc6:	6454      	str	r4, [r2, #68]	@ 0x44
 8001bc8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001bca:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001bce:	9201      	str	r2, [sp, #4]
 8001bd0:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001bd2:	089c      	lsrs	r4, r3, #2
 8001bd4:	1ca5      	adds	r5, r4, #2
 8001bd6:	4a25      	ldr	r2, [pc, #148]	@ (8001c6c <HAL_GPIO_Init+0x1f4>)
 8001bd8:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001bdc:	f003 0e03 	and.w	lr, r3, #3
 8001be0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001be4:	220f      	movs	r2, #15
 8001be6:	fa02 f20e 	lsl.w	r2, r2, lr
 8001bea:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bee:	4a22      	ldr	r2, [pc, #136]	@ (8001c78 <HAL_GPIO_Init+0x200>)
 8001bf0:	4290      	cmp	r0, r2
 8001bf2:	f43f af75 	beq.w	8001ae0 <HAL_GPIO_Init+0x68>
 8001bf6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001bfa:	4290      	cmp	r0, r2
 8001bfc:	d022      	beq.n	8001c44 <HAL_GPIO_Init+0x1cc>
 8001bfe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c02:	4290      	cmp	r0, r2
 8001c04:	d020      	beq.n	8001c48 <HAL_GPIO_Init+0x1d0>
 8001c06:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c0a:	4290      	cmp	r0, r2
 8001c0c:	d01e      	beq.n	8001c4c <HAL_GPIO_Init+0x1d4>
 8001c0e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c12:	4290      	cmp	r0, r2
 8001c14:	d01c      	beq.n	8001c50 <HAL_GPIO_Init+0x1d8>
 8001c16:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c1a:	4290      	cmp	r0, r2
 8001c1c:	d01a      	beq.n	8001c54 <HAL_GPIO_Init+0x1dc>
 8001c1e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c22:	4290      	cmp	r0, r2
 8001c24:	d018      	beq.n	8001c58 <HAL_GPIO_Init+0x1e0>
 8001c26:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c2a:	4290      	cmp	r0, r2
 8001c2c:	d016      	beq.n	8001c5c <HAL_GPIO_Init+0x1e4>
 8001c2e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c32:	4290      	cmp	r0, r2
 8001c34:	d014      	beq.n	8001c60 <HAL_GPIO_Init+0x1e8>
 8001c36:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c3a:	4290      	cmp	r0, r2
 8001c3c:	f43f af4e 	beq.w	8001adc <HAL_GPIO_Init+0x64>
 8001c40:	220a      	movs	r2, #10
 8001c42:	e74e      	b.n	8001ae2 <HAL_GPIO_Init+0x6a>
 8001c44:	2201      	movs	r2, #1
 8001c46:	e74c      	b.n	8001ae2 <HAL_GPIO_Init+0x6a>
 8001c48:	2202      	movs	r2, #2
 8001c4a:	e74a      	b.n	8001ae2 <HAL_GPIO_Init+0x6a>
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	e748      	b.n	8001ae2 <HAL_GPIO_Init+0x6a>
 8001c50:	2204      	movs	r2, #4
 8001c52:	e746      	b.n	8001ae2 <HAL_GPIO_Init+0x6a>
 8001c54:	2205      	movs	r2, #5
 8001c56:	e744      	b.n	8001ae2 <HAL_GPIO_Init+0x6a>
 8001c58:	2206      	movs	r2, #6
 8001c5a:	e742      	b.n	8001ae2 <HAL_GPIO_Init+0x6a>
 8001c5c:	2207      	movs	r2, #7
 8001c5e:	e740      	b.n	8001ae2 <HAL_GPIO_Init+0x6a>
 8001c60:	2208      	movs	r2, #8
 8001c62:	e73e      	b.n	8001ae2 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8001c64:	b002      	add	sp, #8
 8001c66:	bd70      	pop	{r4, r5, r6, pc}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40013800 	.word	0x40013800
 8001c70:	40013c00 	.word	0x40013c00
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40020000 	.word	0x40020000

08001c7c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c7c:	b10a      	cbz	r2, 8001c82 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c7e:	6181      	str	r1, [r0, #24]
 8001c80:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c82:	0409      	lsls	r1, r1, #16
 8001c84:	6181      	str	r1, [r0, #24]
  }
}
 8001c86:	4770      	bx	lr

08001c88 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001c88:	b510      	push	{r4, lr}
 8001c8a:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cfc <HAL_PWREx_EnableOverDrive+0x74>)
 8001c8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c90:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001c94:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c9c:	9301      	str	r3, [sp, #4]
 8001c9e:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001ca0:	4a17      	ldr	r2, [pc, #92]	@ (8001d00 <HAL_PWREx_EnableOverDrive+0x78>)
 8001ca2:	6813      	ldr	r3, [r2, #0]
 8001ca4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ca8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001caa:	f7ff fe19 	bl	80018e0 <HAL_GetTick>
 8001cae:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001cb0:	4b13      	ldr	r3, [pc, #76]	@ (8001d00 <HAL_PWREx_EnableOverDrive+0x78>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8001cb8:	d108      	bne.n	8001ccc <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001cba:	f7ff fe11 	bl	80018e0 <HAL_GetTick>
 8001cbe:	1b00      	subs	r0, r0, r4
 8001cc0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8001cc4:	d9f4      	bls.n	8001cb0 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8001cc6:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8001cc8:	b002      	add	sp, #8
 8001cca:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001ccc:	4a0c      	ldr	r2, [pc, #48]	@ (8001d00 <HAL_PWREx_EnableOverDrive+0x78>)
 8001cce:	6813      	ldr	r3, [r2, #0]
 8001cd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cd4:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8001cd6:	f7ff fe03 	bl	80018e0 <HAL_GetTick>
 8001cda:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001cdc:	4b08      	ldr	r3, [pc, #32]	@ (8001d00 <HAL_PWREx_EnableOverDrive+0x78>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001ce4:	d107      	bne.n	8001cf6 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ce6:	f7ff fdfb 	bl	80018e0 <HAL_GetTick>
 8001cea:	1b00      	subs	r0, r0, r4
 8001cec:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8001cf0:	d9f4      	bls.n	8001cdc <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8001cf2:	2003      	movs	r0, #3
 8001cf4:	e7e8      	b.n	8001cc8 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	e7e6      	b.n	8001cc8 <HAL_PWREx_EnableOverDrive+0x40>
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40007000 	.word	0x40007000

08001d04 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d04:	2800      	cmp	r0, #0
 8001d06:	f000 81ff 	beq.w	8002108 <HAL_RCC_OscConfig+0x404>
{
 8001d0a:	b570      	push	{r4, r5, r6, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d10:	6803      	ldr	r3, [r0, #0]
 8001d12:	f013 0f01 	tst.w	r3, #1
 8001d16:	d029      	beq.n	8001d6c <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d18:	4b95      	ldr	r3, [pc, #596]	@ (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 030c 	and.w	r3, r3, #12
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	d01a      	beq.n	8001d5a <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d24:	4b92      	ldr	r3, [pc, #584]	@ (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 030c 	and.w	r3, r3, #12
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d00f      	beq.n	8001d50 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d30:	6863      	ldr	r3, [r4, #4]
 8001d32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d36:	d040      	beq.n	8001dba <HAL_RCC_OscConfig+0xb6>
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d154      	bne.n	8001de6 <HAL_RCC_OscConfig+0xe2>
 8001d3c:	4b8c      	ldr	r3, [pc, #560]	@ (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	e039      	b.n	8001dc4 <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d50:	4b87      	ldr	r3, [pc, #540]	@ (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001d58:	d0ea      	beq.n	8001d30 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5a:	4b85      	ldr	r3, [pc, #532]	@ (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001d62:	d003      	beq.n	8001d6c <HAL_RCC_OscConfig+0x68>
 8001d64:	6863      	ldr	r3, [r4, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 81d0 	beq.w	800210c <HAL_RCC_OscConfig+0x408>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d6c:	6823      	ldr	r3, [r4, #0]
 8001d6e:	f013 0f02 	tst.w	r3, #2
 8001d72:	d074      	beq.n	8001e5e <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d74:	4b7e      	ldr	r3, [pc, #504]	@ (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f013 0f0c 	tst.w	r3, #12
 8001d7c:	d05e      	beq.n	8001e3c <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d7e:	4b7c      	ldr	r3, [pc, #496]	@ (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 030c 	and.w	r3, r3, #12
 8001d86:	2b08      	cmp	r3, #8
 8001d88:	d053      	beq.n	8001e32 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d8a:	68e3      	ldr	r3, [r4, #12]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 8089 	beq.w	8001ea4 <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d92:	4a77      	ldr	r2, [pc, #476]	@ (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	6813      	ldr	r3, [r2, #0]
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9c:	f7ff fda0 	bl	80018e0 <HAL_GetTick>
 8001da0:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da2:	4b73      	ldr	r3, [pc, #460]	@ (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f013 0f02 	tst.w	r3, #2
 8001daa:	d172      	bne.n	8001e92 <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dac:	f7ff fd98 	bl	80018e0 <HAL_GetTick>
 8001db0:	1b40      	subs	r0, r0, r5
 8001db2:	2802      	cmp	r0, #2
 8001db4:	d9f5      	bls.n	8001da2 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8001db6:	2003      	movs	r0, #3
 8001db8:	e1ad      	b.n	8002116 <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dba:	4a6d      	ldr	r2, [pc, #436]	@ (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	6813      	ldr	r3, [r2, #0]
 8001dbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dc2:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dc4:	6863      	ldr	r3, [r4, #4]
 8001dc6:	b32b      	cbz	r3, 8001e14 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8001dc8:	f7ff fd8a 	bl	80018e0 <HAL_GetTick>
 8001dcc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dce:	4b68      	ldr	r3, [pc, #416]	@ (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001dd6:	d1c9      	bne.n	8001d6c <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd8:	f7ff fd82 	bl	80018e0 <HAL_GetTick>
 8001ddc:	1b40      	subs	r0, r0, r5
 8001dde:	2864      	cmp	r0, #100	@ 0x64
 8001de0:	d9f5      	bls.n	8001dce <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8001de2:	2003      	movs	r0, #3
 8001de4:	e197      	b.n	8002116 <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001de6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dea:	d009      	beq.n	8001e00 <HAL_RCC_OscConfig+0xfc>
 8001dec:	4b60      	ldr	r3, [pc, #384]	@ (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	e7e1      	b.n	8001dc4 <HAL_RCC_OscConfig+0xc0>
 8001e00:	4b5b      	ldr	r3, [pc, #364]	@ (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	e7d7      	b.n	8001dc4 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8001e14:	f7ff fd64 	bl	80018e0 <HAL_GetTick>
 8001e18:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e1a:	4b55      	ldr	r3, [pc, #340]	@ (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001e22:	d0a3      	beq.n	8001d6c <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e24:	f7ff fd5c 	bl	80018e0 <HAL_GetTick>
 8001e28:	1b40      	subs	r0, r0, r5
 8001e2a:	2864      	cmp	r0, #100	@ 0x64
 8001e2c:	d9f5      	bls.n	8001e1a <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8001e2e:	2003      	movs	r0, #3
 8001e30:	e171      	b.n	8002116 <HAL_RCC_OscConfig+0x412>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e32:	4b4f      	ldr	r3, [pc, #316]	@ (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001e3a:	d1a6      	bne.n	8001d8a <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3c:	4b4c      	ldr	r3, [pc, #304]	@ (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f013 0f02 	tst.w	r3, #2
 8001e44:	d003      	beq.n	8001e4e <HAL_RCC_OscConfig+0x14a>
 8001e46:	68e3      	ldr	r3, [r4, #12]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	f040 8161 	bne.w	8002110 <HAL_RCC_OscConfig+0x40c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e4e:	4a48      	ldr	r2, [pc, #288]	@ (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e50:	6813      	ldr	r3, [r2, #0]
 8001e52:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001e56:	6921      	ldr	r1, [r4, #16]
 8001e58:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001e5c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e5e:	6823      	ldr	r3, [r4, #0]
 8001e60:	f013 0f08 	tst.w	r3, #8
 8001e64:	d046      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e66:	6963      	ldr	r3, [r4, #20]
 8001e68:	b383      	cbz	r3, 8001ecc <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e6a:	4a41      	ldr	r2, [pc, #260]	@ (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e74:	f7ff fd34 	bl	80018e0 <HAL_GetTick>
 8001e78:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e7e:	f013 0f02 	tst.w	r3, #2
 8001e82:	d137      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e84:	f7ff fd2c 	bl	80018e0 <HAL_GetTick>
 8001e88:	1b40      	subs	r0, r0, r5
 8001e8a:	2802      	cmp	r0, #2
 8001e8c:	d9f5      	bls.n	8001e7a <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 8001e8e:	2003      	movs	r0, #3
 8001e90:	e141      	b.n	8002116 <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e92:	4a37      	ldr	r2, [pc, #220]	@ (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	6813      	ldr	r3, [r2, #0]
 8001e96:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001e9a:	6921      	ldr	r1, [r4, #16]
 8001e9c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	e7dc      	b.n	8001e5e <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 8001ea4:	4a32      	ldr	r2, [pc, #200]	@ (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001ea6:	6813      	ldr	r3, [r2, #0]
 8001ea8:	f023 0301 	bic.w	r3, r3, #1
 8001eac:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001eae:	f7ff fd17 	bl	80018e0 <HAL_GetTick>
 8001eb2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb4:	4b2e      	ldr	r3, [pc, #184]	@ (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f013 0f02 	tst.w	r3, #2
 8001ebc:	d0cf      	beq.n	8001e5e <HAL_RCC_OscConfig+0x15a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ebe:	f7ff fd0f 	bl	80018e0 <HAL_GetTick>
 8001ec2:	1b40      	subs	r0, r0, r5
 8001ec4:	2802      	cmp	r0, #2
 8001ec6:	d9f5      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 8001ec8:	2003      	movs	r0, #3
 8001eca:	e124      	b.n	8002116 <HAL_RCC_OscConfig+0x412>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ecc:	4a28      	ldr	r2, [pc, #160]	@ (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001ece:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8001ed0:	f023 0301 	bic.w	r3, r3, #1
 8001ed4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed6:	f7ff fd03 	bl	80018e0 <HAL_GetTick>
 8001eda:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001edc:	4b24      	ldr	r3, [pc, #144]	@ (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001ede:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ee0:	f013 0f02 	tst.w	r3, #2
 8001ee4:	d006      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee6:	f7ff fcfb 	bl	80018e0 <HAL_GetTick>
 8001eea:	1b40      	subs	r0, r0, r5
 8001eec:	2802      	cmp	r0, #2
 8001eee:	d9f5      	bls.n	8001edc <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 8001ef0:	2003      	movs	r0, #3
 8001ef2:	e110      	b.n	8002116 <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef4:	6823      	ldr	r3, [r4, #0]
 8001ef6:	f013 0f04 	tst.w	r3, #4
 8001efa:	d07d      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001efc:	4b1c      	ldr	r3, [pc, #112]	@ (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f00:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001f04:	d11e      	bne.n	8001f44 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f06:	4b1a      	ldr	r3, [pc, #104]	@ (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f0a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001f0e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f16:	9301      	str	r3, [sp, #4]
 8001f18:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001f1a:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f1c:	4b15      	ldr	r3, [pc, #84]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001f24:	d010      	beq.n	8001f48 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f26:	68a3      	ldr	r3, [r4, #8]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d025      	beq.n	8001f78 <HAL_RCC_OscConfig+0x274>
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d13b      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x2a4>
 8001f30:	4b0f      	ldr	r3, [pc, #60]	@ (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001f32:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001f34:	f022 0201 	bic.w	r2, r2, #1
 8001f38:	671a      	str	r2, [r3, #112]	@ 0x70
 8001f3a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001f3c:	f022 0204 	bic.w	r2, r2, #4
 8001f40:	671a      	str	r2, [r3, #112]	@ 0x70
 8001f42:	e01e      	b.n	8001f82 <HAL_RCC_OscConfig+0x27e>
  FlagStatus pwrclkchanged = RESET;
 8001f44:	2500      	movs	r5, #0
 8001f46:	e7e9      	b.n	8001f1c <HAL_RCC_OscConfig+0x218>
      PWR->CR1 |= PWR_CR1_DBP;
 8001f48:	4a0a      	ldr	r2, [pc, #40]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001f4a:	6813      	ldr	r3, [r2, #0]
 8001f4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f50:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001f52:	f7ff fcc5 	bl	80018e0 <HAL_GetTick>
 8001f56:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f58:	4b06      	ldr	r3, [pc, #24]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001f60:	d1e1      	bne.n	8001f26 <HAL_RCC_OscConfig+0x222>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f62:	f7ff fcbd 	bl	80018e0 <HAL_GetTick>
 8001f66:	1b80      	subs	r0, r0, r6
 8001f68:	2864      	cmp	r0, #100	@ 0x64
 8001f6a:	d9f5      	bls.n	8001f58 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 8001f6c:	2003      	movs	r0, #3
 8001f6e:	e0d2      	b.n	8002116 <HAL_RCC_OscConfig+0x412>
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f78:	4a6e      	ldr	r2, [pc, #440]	@ (8002134 <HAL_RCC_OscConfig+0x430>)
 8001f7a:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f82:	68a3      	ldr	r3, [r4, #8]
 8001f84:	b333      	cbz	r3, 8001fd4 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f86:	f7ff fcab 	bl	80018e0 <HAL_GetTick>
 8001f8a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f8c:	4b69      	ldr	r3, [pc, #420]	@ (8002134 <HAL_RCC_OscConfig+0x430>)
 8001f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f90:	f013 0f02 	tst.w	r3, #2
 8001f94:	d12f      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f96:	f7ff fca3 	bl	80018e0 <HAL_GetTick>
 8001f9a:	1b80      	subs	r0, r0, r6
 8001f9c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001fa0:	4298      	cmp	r0, r3
 8001fa2:	d9f3      	bls.n	8001f8c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001fa4:	2003      	movs	r0, #3
 8001fa6:	e0b6      	b.n	8002116 <HAL_RCC_OscConfig+0x412>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fa8:	2b05      	cmp	r3, #5
 8001faa:	d009      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x2bc>
 8001fac:	4b61      	ldr	r3, [pc, #388]	@ (8002134 <HAL_RCC_OscConfig+0x430>)
 8001fae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001fb0:	f022 0201 	bic.w	r2, r2, #1
 8001fb4:	671a      	str	r2, [r3, #112]	@ 0x70
 8001fb6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001fb8:	f022 0204 	bic.w	r2, r2, #4
 8001fbc:	671a      	str	r2, [r3, #112]	@ 0x70
 8001fbe:	e7e0      	b.n	8001f82 <HAL_RCC_OscConfig+0x27e>
 8001fc0:	4b5c      	ldr	r3, [pc, #368]	@ (8002134 <HAL_RCC_OscConfig+0x430>)
 8001fc2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001fc4:	f042 0204 	orr.w	r2, r2, #4
 8001fc8:	671a      	str	r2, [r3, #112]	@ 0x70
 8001fca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001fcc:	f042 0201 	orr.w	r2, r2, #1
 8001fd0:	671a      	str	r2, [r3, #112]	@ 0x70
 8001fd2:	e7d6      	b.n	8001f82 <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd4:	f7ff fc84 	bl	80018e0 <HAL_GetTick>
 8001fd8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fda:	4b56      	ldr	r3, [pc, #344]	@ (8002134 <HAL_RCC_OscConfig+0x430>)
 8001fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fde:	f013 0f02 	tst.w	r3, #2
 8001fe2:	d008      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe4:	f7ff fc7c 	bl	80018e0 <HAL_GetTick>
 8001fe8:	1b80      	subs	r0, r0, r6
 8001fea:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001fee:	4298      	cmp	r0, r3
 8001ff0:	d9f3      	bls.n	8001fda <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8001ff2:	2003      	movs	r0, #3
 8001ff4:	e08f      	b.n	8002116 <HAL_RCC_OscConfig+0x412>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ff6:	b9fd      	cbnz	r5, 8002038 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ff8:	69a3      	ldr	r3, [r4, #24]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 808a 	beq.w	8002114 <HAL_RCC_OscConfig+0x410>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002000:	4a4c      	ldr	r2, [pc, #304]	@ (8002134 <HAL_RCC_OscConfig+0x430>)
 8002002:	6892      	ldr	r2, [r2, #8]
 8002004:	f002 020c 	and.w	r2, r2, #12
 8002008:	2a08      	cmp	r2, #8
 800200a:	d058      	beq.n	80020be <HAL_RCC_OscConfig+0x3ba>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800200c:	2b02      	cmp	r3, #2
 800200e:	d019      	beq.n	8002044 <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002010:	4a48      	ldr	r2, [pc, #288]	@ (8002134 <HAL_RCC_OscConfig+0x430>)
 8002012:	6813      	ldr	r3, [r2, #0]
 8002014:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002018:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201a:	f7ff fc61 	bl	80018e0 <HAL_GetTick>
 800201e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002020:	4b44      	ldr	r3, [pc, #272]	@ (8002134 <HAL_RCC_OscConfig+0x430>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002028:	d047      	beq.n	80020ba <HAL_RCC_OscConfig+0x3b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800202a:	f7ff fc59 	bl	80018e0 <HAL_GetTick>
 800202e:	1b00      	subs	r0, r0, r4
 8002030:	2802      	cmp	r0, #2
 8002032:	d9f5      	bls.n	8002020 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8002034:	2003      	movs	r0, #3
 8002036:	e06e      	b.n	8002116 <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002038:	4a3e      	ldr	r2, [pc, #248]	@ (8002134 <HAL_RCC_OscConfig+0x430>)
 800203a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800203c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002040:	6413      	str	r3, [r2, #64]	@ 0x40
 8002042:	e7d9      	b.n	8001ff8 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8002044:	4a3b      	ldr	r2, [pc, #236]	@ (8002134 <HAL_RCC_OscConfig+0x430>)
 8002046:	6813      	ldr	r3, [r2, #0]
 8002048:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800204c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800204e:	f7ff fc47 	bl	80018e0 <HAL_GetTick>
 8002052:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002054:	4b37      	ldr	r3, [pc, #220]	@ (8002134 <HAL_RCC_OscConfig+0x430>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800205c:	d006      	beq.n	800206c <HAL_RCC_OscConfig+0x368>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205e:	f7ff fc3f 	bl	80018e0 <HAL_GetTick>
 8002062:	1b40      	subs	r0, r0, r5
 8002064:	2802      	cmp	r0, #2
 8002066:	d9f5      	bls.n	8002054 <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 8002068:	2003      	movs	r0, #3
 800206a:	e054      	b.n	8002116 <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800206c:	69e3      	ldr	r3, [r4, #28]
 800206e:	6a22      	ldr	r2, [r4, #32]
 8002070:	4313      	orrs	r3, r2
 8002072:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002074:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002078:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800207a:	0852      	lsrs	r2, r2, #1
 800207c:	3a01      	subs	r2, #1
 800207e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002082:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002084:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002088:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800208c:	4a29      	ldr	r2, [pc, #164]	@ (8002134 <HAL_RCC_OscConfig+0x430>)
 800208e:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002090:	6813      	ldr	r3, [r2, #0]
 8002092:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002096:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002098:	f7ff fc22 	bl	80018e0 <HAL_GetTick>
 800209c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209e:	4b25      	ldr	r3, [pc, #148]	@ (8002134 <HAL_RCC_OscConfig+0x430>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80020a6:	d106      	bne.n	80020b6 <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a8:	f7ff fc1a 	bl	80018e0 <HAL_GetTick>
 80020ac:	1b00      	subs	r0, r0, r4
 80020ae:	2802      	cmp	r0, #2
 80020b0:	d9f5      	bls.n	800209e <HAL_RCC_OscConfig+0x39a>
            return HAL_TIMEOUT;
 80020b2:	2003      	movs	r0, #3
 80020b4:	e02f      	b.n	8002116 <HAL_RCC_OscConfig+0x412>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80020b6:	2000      	movs	r0, #0
 80020b8:	e02d      	b.n	8002116 <HAL_RCC_OscConfig+0x412>
 80020ba:	2000      	movs	r0, #0
 80020bc:	e02b      	b.n	8002116 <HAL_RCC_OscConfig+0x412>
      pll_config = RCC->PLLCFGR;
 80020be:	4a1d      	ldr	r2, [pc, #116]	@ (8002134 <HAL_RCC_OscConfig+0x430>)
 80020c0:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d029      	beq.n	800211a <HAL_RCC_OscConfig+0x416>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c6:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80020ca:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020cc:	428b      	cmp	r3, r1
 80020ce:	d126      	bne.n	800211e <HAL_RCC_OscConfig+0x41a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020d0:	f002 033f 	and.w	r3, r2, #63	@ 0x3f
 80020d4:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d6:	428b      	cmp	r3, r1
 80020d8:	d123      	bne.n	8002122 <HAL_RCC_OscConfig+0x41e>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020da:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80020e0:	4013      	ands	r3, r2
 80020e2:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 80020e6:	d11e      	bne.n	8002126 <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80020e8:	f402 3140 	and.w	r1, r2, #196608	@ 0x30000
 80020ec:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80020ee:	085b      	lsrs	r3, r3, #1
 80020f0:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020f2:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 80020f6:	d118      	bne.n	800212a <HAL_RCC_OscConfig+0x426>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020f8:	f002 6270 	and.w	r2, r2, #251658240	@ 0xf000000
 80020fc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80020fe:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
 8002102:	d114      	bne.n	800212e <HAL_RCC_OscConfig+0x42a>
  return HAL_OK;
 8002104:	2000      	movs	r0, #0
 8002106:	e006      	b.n	8002116 <HAL_RCC_OscConfig+0x412>
    return HAL_ERROR;
 8002108:	2001      	movs	r0, #1
}
 800210a:	4770      	bx	lr
        return HAL_ERROR;
 800210c:	2001      	movs	r0, #1
 800210e:	e002      	b.n	8002116 <HAL_RCC_OscConfig+0x412>
        return HAL_ERROR;
 8002110:	2001      	movs	r0, #1
 8002112:	e000      	b.n	8002116 <HAL_RCC_OscConfig+0x412>
  return HAL_OK;
 8002114:	2000      	movs	r0, #0
}
 8002116:	b002      	add	sp, #8
 8002118:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800211a:	2001      	movs	r0, #1
 800211c:	e7fb      	b.n	8002116 <HAL_RCC_OscConfig+0x412>
 800211e:	2001      	movs	r0, #1
 8002120:	e7f9      	b.n	8002116 <HAL_RCC_OscConfig+0x412>
 8002122:	2001      	movs	r0, #1
 8002124:	e7f7      	b.n	8002116 <HAL_RCC_OscConfig+0x412>
 8002126:	2001      	movs	r0, #1
 8002128:	e7f5      	b.n	8002116 <HAL_RCC_OscConfig+0x412>
 800212a:	2001      	movs	r0, #1
 800212c:	e7f3      	b.n	8002116 <HAL_RCC_OscConfig+0x412>
 800212e:	2001      	movs	r0, #1
 8002130:	e7f1      	b.n	8002116 <HAL_RCC_OscConfig+0x412>
 8002132:	bf00      	nop
 8002134:	40023800 	.word	0x40023800

08002138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002138:	b508      	push	{r3, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800213a:	4b33      	ldr	r3, [pc, #204]	@ (8002208 <HAL_RCC_GetSysClockFreq+0xd0>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 030c 	and.w	r3, r3, #12
 8002142:	2b04      	cmp	r3, #4
 8002144:	d05b      	beq.n	80021fe <HAL_RCC_GetSysClockFreq+0xc6>
 8002146:	2b08      	cmp	r3, #8
 8002148:	d15b      	bne.n	8002202 <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800214a:	4b2f      	ldr	r3, [pc, #188]	@ (8002208 <HAL_RCC_GetSysClockFreq+0xd0>)
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002158:	d02c      	beq.n	80021b4 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800215a:	4b2b      	ldr	r3, [pc, #172]	@ (8002208 <HAL_RCC_GetSysClockFreq+0xd0>)
 800215c:	6858      	ldr	r0, [r3, #4]
 800215e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002162:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002166:	ebbc 0c00 	subs.w	ip, ip, r0
 800216a:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800216e:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002172:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002176:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800217a:	ebb1 010c 	subs.w	r1, r1, ip
 800217e:	eb63 030e 	sbc.w	r3, r3, lr
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002188:	00c9      	lsls	r1, r1, #3
 800218a:	eb11 0c00 	adds.w	ip, r1, r0
 800218e:	f143 0300 	adc.w	r3, r3, #0
 8002192:	0259      	lsls	r1, r3, #9
 8002194:	2300      	movs	r3, #0
 8002196:	ea4f 204c 	mov.w	r0, ip, lsl #9
 800219a:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 800219e:	f7fe fd73 	bl	8000c88 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80021a2:	4b19      	ldr	r3, [pc, #100]	@ (8002208 <HAL_RCC_GetSysClockFreq+0xd0>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80021aa:	3301      	adds	r3, #1
 80021ac:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80021ae:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80021b2:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021b4:	4b14      	ldr	r3, [pc, #80]	@ (8002208 <HAL_RCC_GetSysClockFreq+0xd0>)
 80021b6:	6858      	ldr	r0, [r3, #4]
 80021b8:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80021bc:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80021c0:	ebbc 0c00 	subs.w	ip, ip, r0
 80021c4:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80021c8:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80021cc:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80021d0:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80021d4:	ebb1 010c 	subs.w	r1, r1, ip
 80021d8:	eb63 030e 	sbc.w	r3, r3, lr
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021e2:	00c9      	lsls	r1, r1, #3
 80021e4:	eb11 0c00 	adds.w	ip, r1, r0
 80021e8:	f143 0300 	adc.w	r3, r3, #0
 80021ec:	0299      	lsls	r1, r3, #10
 80021ee:	2300      	movs	r3, #0
 80021f0:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80021f4:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80021f8:	f7fe fd46 	bl	8000c88 <__aeabi_uldivmod>
 80021fc:	e7d1      	b.n	80021a2 <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 80021fe:	4803      	ldr	r0, [pc, #12]	@ (800220c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002200:	e7d7      	b.n	80021b2 <HAL_RCC_GetSysClockFreq+0x7a>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002202:	4803      	ldr	r0, [pc, #12]	@ (8002210 <HAL_RCC_GetSysClockFreq+0xd8>)
  return sysclockfreq;
 8002204:	e7d5      	b.n	80021b2 <HAL_RCC_GetSysClockFreq+0x7a>
 8002206:	bf00      	nop
 8002208:	40023800 	.word	0x40023800
 800220c:	007a1200 	.word	0x007a1200
 8002210:	00f42400 	.word	0x00f42400

08002214 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002214:	2800      	cmp	r0, #0
 8002216:	f000 80a0 	beq.w	800235a <HAL_RCC_ClockConfig+0x146>
{
 800221a:	b570      	push	{r4, r5, r6, lr}
 800221c:	460d      	mov	r5, r1
 800221e:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002220:	4b52      	ldr	r3, [pc, #328]	@ (800236c <HAL_RCC_ClockConfig+0x158>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 030f 	and.w	r3, r3, #15
 8002228:	428b      	cmp	r3, r1
 800222a:	d20b      	bcs.n	8002244 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222c:	4a4f      	ldr	r2, [pc, #316]	@ (800236c <HAL_RCC_ClockConfig+0x158>)
 800222e:	6813      	ldr	r3, [r2, #0]
 8002230:	f023 030f 	bic.w	r3, r3, #15
 8002234:	430b      	orrs	r3, r1
 8002236:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002238:	6813      	ldr	r3, [r2, #0]
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	428b      	cmp	r3, r1
 8002240:	f040 808d 	bne.w	800235e <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002244:	6823      	ldr	r3, [r4, #0]
 8002246:	f013 0f02 	tst.w	r3, #2
 800224a:	d017      	beq.n	800227c <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800224c:	f013 0f04 	tst.w	r3, #4
 8002250:	d004      	beq.n	800225c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002252:	4a47      	ldr	r2, [pc, #284]	@ (8002370 <HAL_RCC_ClockConfig+0x15c>)
 8002254:	6893      	ldr	r3, [r2, #8]
 8002256:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800225a:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800225c:	6823      	ldr	r3, [r4, #0]
 800225e:	f013 0f08 	tst.w	r3, #8
 8002262:	d004      	beq.n	800226e <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002264:	4a42      	ldr	r2, [pc, #264]	@ (8002370 <HAL_RCC_ClockConfig+0x15c>)
 8002266:	6893      	ldr	r3, [r2, #8]
 8002268:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800226c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800226e:	4a40      	ldr	r2, [pc, #256]	@ (8002370 <HAL_RCC_ClockConfig+0x15c>)
 8002270:	6893      	ldr	r3, [r2, #8]
 8002272:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002276:	68a1      	ldr	r1, [r4, #8]
 8002278:	430b      	orrs	r3, r1
 800227a:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800227c:	6823      	ldr	r3, [r4, #0]
 800227e:	f013 0f01 	tst.w	r3, #1
 8002282:	d031      	beq.n	80022e8 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002284:	6863      	ldr	r3, [r4, #4]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d020      	beq.n	80022cc <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800228a:	2b02      	cmp	r3, #2
 800228c:	d025      	beq.n	80022da <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228e:	4a38      	ldr	r2, [pc, #224]	@ (8002370 <HAL_RCC_ClockConfig+0x15c>)
 8002290:	6812      	ldr	r2, [r2, #0]
 8002292:	f012 0f02 	tst.w	r2, #2
 8002296:	d064      	beq.n	8002362 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002298:	4935      	ldr	r1, [pc, #212]	@ (8002370 <HAL_RCC_ClockConfig+0x15c>)
 800229a:	688a      	ldr	r2, [r1, #8]
 800229c:	f022 0203 	bic.w	r2, r2, #3
 80022a0:	4313      	orrs	r3, r2
 80022a2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80022a4:	f7ff fb1c 	bl	80018e0 <HAL_GetTick>
 80022a8:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022aa:	4b31      	ldr	r3, [pc, #196]	@ (8002370 <HAL_RCC_ClockConfig+0x15c>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 030c 	and.w	r3, r3, #12
 80022b2:	6862      	ldr	r2, [r4, #4]
 80022b4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80022b8:	d016      	beq.n	80022e8 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ba:	f7ff fb11 	bl	80018e0 <HAL_GetTick>
 80022be:	1b80      	subs	r0, r0, r6
 80022c0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80022c4:	4298      	cmp	r0, r3
 80022c6:	d9f0      	bls.n	80022aa <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80022c8:	2003      	movs	r0, #3
 80022ca:	e045      	b.n	8002358 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022cc:	4a28      	ldr	r2, [pc, #160]	@ (8002370 <HAL_RCC_ClockConfig+0x15c>)
 80022ce:	6812      	ldr	r2, [r2, #0]
 80022d0:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80022d4:	d1e0      	bne.n	8002298 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80022d6:	2001      	movs	r0, #1
 80022d8:	e03e      	b.n	8002358 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022da:	4a25      	ldr	r2, [pc, #148]	@ (8002370 <HAL_RCC_ClockConfig+0x15c>)
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80022e2:	d1d9      	bne.n	8002298 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80022e4:	2001      	movs	r0, #1
 80022e6:	e037      	b.n	8002358 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022e8:	4b20      	ldr	r3, [pc, #128]	@ (800236c <HAL_RCC_ClockConfig+0x158>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 030f 	and.w	r3, r3, #15
 80022f0:	42ab      	cmp	r3, r5
 80022f2:	d90a      	bls.n	800230a <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f4:	4a1d      	ldr	r2, [pc, #116]	@ (800236c <HAL_RCC_ClockConfig+0x158>)
 80022f6:	6813      	ldr	r3, [r2, #0]
 80022f8:	f023 030f 	bic.w	r3, r3, #15
 80022fc:	432b      	orrs	r3, r5
 80022fe:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002300:	6813      	ldr	r3, [r2, #0]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	42ab      	cmp	r3, r5
 8002308:	d12d      	bne.n	8002366 <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800230a:	6823      	ldr	r3, [r4, #0]
 800230c:	f013 0f04 	tst.w	r3, #4
 8002310:	d006      	beq.n	8002320 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002312:	4a17      	ldr	r2, [pc, #92]	@ (8002370 <HAL_RCC_ClockConfig+0x15c>)
 8002314:	6893      	ldr	r3, [r2, #8]
 8002316:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800231a:	68e1      	ldr	r1, [r4, #12]
 800231c:	430b      	orrs	r3, r1
 800231e:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002320:	6823      	ldr	r3, [r4, #0]
 8002322:	f013 0f08 	tst.w	r3, #8
 8002326:	d007      	beq.n	8002338 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002328:	4a11      	ldr	r2, [pc, #68]	@ (8002370 <HAL_RCC_ClockConfig+0x15c>)
 800232a:	6893      	ldr	r3, [r2, #8]
 800232c:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002330:	6921      	ldr	r1, [r4, #16]
 8002332:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002336:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002338:	f7ff fefe 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 800233c:	4b0c      	ldr	r3, [pc, #48]	@ (8002370 <HAL_RCC_ClockConfig+0x15c>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002344:	4a0b      	ldr	r2, [pc, #44]	@ (8002374 <HAL_RCC_ClockConfig+0x160>)
 8002346:	5cd3      	ldrb	r3, [r2, r3]
 8002348:	40d8      	lsrs	r0, r3
 800234a:	4b0b      	ldr	r3, [pc, #44]	@ (8002378 <HAL_RCC_ClockConfig+0x164>)
 800234c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800234e:	4b0b      	ldr	r3, [pc, #44]	@ (800237c <HAL_RCC_ClockConfig+0x168>)
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	f7ff fa87 	bl	8001864 <HAL_InitTick>
  return HAL_OK;
 8002356:	2000      	movs	r0, #0
}
 8002358:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800235a:	2001      	movs	r0, #1
}
 800235c:	4770      	bx	lr
      return HAL_ERROR;
 800235e:	2001      	movs	r0, #1
 8002360:	e7fa      	b.n	8002358 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8002362:	2001      	movs	r0, #1
 8002364:	e7f8      	b.n	8002358 <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 8002366:	2001      	movs	r0, #1
 8002368:	e7f6      	b.n	8002358 <HAL_RCC_ClockConfig+0x144>
 800236a:	bf00      	nop
 800236c:	40023c00 	.word	0x40023c00
 8002370:	40023800 	.word	0x40023800
 8002374:	08005b08 	.word	0x08005b08
 8002378:	20000000 	.word	0x20000000
 800237c:	20000008 	.word	0x20000008

08002380 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002380:	4b01      	ldr	r3, [pc, #4]	@ (8002388 <HAL_RCC_GetHCLKFreq+0x8>)
 8002382:	6818      	ldr	r0, [r3, #0]
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	20000000 	.word	0x20000000

0800238c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800238c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800238e:	f7ff fff7 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 8002392:	4b04      	ldr	r3, [pc, #16]	@ (80023a4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800239a:	4a03      	ldr	r2, [pc, #12]	@ (80023a8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800239c:	5cd3      	ldrb	r3, [r2, r3]
}
 800239e:	40d8      	lsrs	r0, r3
 80023a0:	bd08      	pop	{r3, pc}
 80023a2:	bf00      	nop
 80023a4:	40023800 	.word	0x40023800
 80023a8:	08005b00 	.word	0x08005b00

080023ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023ac:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023ae:	f7ff ffe7 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 80023b2:	4b04      	ldr	r3, [pc, #16]	@ (80023c4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80023ba:	4a03      	ldr	r2, [pc, #12]	@ (80023c8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80023bc:	5cd3      	ldrb	r3, [r2, r3]
}
 80023be:	40d8      	lsrs	r0, r3
 80023c0:	bd08      	pop	{r3, pc}
 80023c2:	bf00      	nop
 80023c4:	40023800 	.word	0x40023800
 80023c8:	08005b00 	.word	0x08005b00

080023cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ce:	b083      	sub	sp, #12
 80023d0:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80023d2:	6806      	ldr	r6, [r0, #0]
 80023d4:	f016 0601 	ands.w	r6, r6, #1
 80023d8:	d00d      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80023da:	4ba7      	ldr	r3, [pc, #668]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 80023e8:	430a      	orrs	r2, r1
 80023ea:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80023ec:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 8139 	beq.w	8002666 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  uint32_t plli2sused = 0;
 80023f4:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80023f6:	6825      	ldr	r5, [r4, #0]
 80023f8:	f415 2500 	ands.w	r5, r5, #524288	@ 0x80000
 80023fc:	d011      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023fe:	4a9e      	ldr	r2, [pc, #632]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002400:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8002404:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002408:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800240a:	430b      	orrs	r3, r1
 800240c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002410:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002412:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002416:	f000 8128 	beq.w	800266a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 8127 	beq.w	800266e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  uint32_t pllsaiused = 0;
 8002420:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002422:	6823      	ldr	r3, [r4, #0]
 8002424:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8002428:	d00f      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800242a:	4a93      	ldr	r2, [pc, #588]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800242c:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8002430:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002434:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8002436:	430b      	orrs	r3, r1
 8002438:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800243c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800243e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002442:	f000 8116 	beq.w	8002672 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002446:	b903      	cbnz	r3, 800244a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      pllsaiused = 1;
 8002448:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800244a:	6823      	ldr	r3, [r4, #0]
 800244c:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8002450:	d000      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
      plli2sused = 1;
 8002452:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002454:	f013 0f20 	tst.w	r3, #32
 8002458:	f040 8110 	bne.w	800267c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800245c:	6823      	ldr	r3, [r4, #0]
 800245e:	f013 0f10 	tst.w	r3, #16
 8002462:	d00c      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002464:	4b84      	ldr	r3, [pc, #528]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002466:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800246a:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800246e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8002472:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002476:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8002478:	430a      	orrs	r2, r1
 800247a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800247e:	6823      	ldr	r3, [r4, #0]
 8002480:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8002484:	d008      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002486:	4a7c      	ldr	r2, [pc, #496]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002488:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800248c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002490:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8002492:	430b      	orrs	r3, r1
 8002494:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002498:	6823      	ldr	r3, [r4, #0]
 800249a:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800249e:	d008      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024a0:	4a75      	ldr	r2, [pc, #468]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80024a2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80024a6:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80024aa:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 80024ac:	430b      	orrs	r3, r1
 80024ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024b2:	6823      	ldr	r3, [r4, #0]
 80024b4:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80024b8:	d008      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024ba:	4a6f      	ldr	r2, [pc, #444]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80024bc:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80024c0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80024c4:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 80024c6:	430b      	orrs	r3, r1
 80024c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80024cc:	6823      	ldr	r3, [r4, #0]
 80024ce:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80024d2:	d008      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80024d4:	4a68      	ldr	r2, [pc, #416]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80024d6:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80024da:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80024de:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80024e0:	430b      	orrs	r3, r1
 80024e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024e6:	6823      	ldr	r3, [r4, #0]
 80024e8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80024ec:	d008      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024ee:	4a62      	ldr	r2, [pc, #392]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80024f0:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80024f4:	f023 0303 	bic.w	r3, r3, #3
 80024f8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80024fa:	430b      	orrs	r3, r1
 80024fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002500:	6823      	ldr	r3, [r4, #0]
 8002502:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002506:	d008      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002508:	4a5b      	ldr	r2, [pc, #364]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800250a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800250e:	f023 030c 	bic.w	r3, r3, #12
 8002512:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8002514:	430b      	orrs	r3, r1
 8002516:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800251a:	6823      	ldr	r3, [r4, #0]
 800251c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002520:	d008      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002522:	4a55      	ldr	r2, [pc, #340]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002524:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002528:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800252c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800252e:	430b      	orrs	r3, r1
 8002530:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002534:	6823      	ldr	r3, [r4, #0]
 8002536:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800253a:	d008      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800253c:	4a4e      	ldr	r2, [pc, #312]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800253e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002542:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002546:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8002548:	430b      	orrs	r3, r1
 800254a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800254e:	6823      	ldr	r3, [r4, #0]
 8002550:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002554:	d008      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002556:	4a48      	ldr	r2, [pc, #288]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002558:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800255c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002560:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8002562:	430b      	orrs	r3, r1
 8002564:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002568:	6823      	ldr	r3, [r4, #0]
 800256a:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800256e:	d008      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002570:	4a41      	ldr	r2, [pc, #260]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002572:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002576:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800257a:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800257c:	430b      	orrs	r3, r1
 800257e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002582:	6823      	ldr	r3, [r4, #0]
 8002584:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8002588:	d008      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800258a:	4a3b      	ldr	r2, [pc, #236]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800258c:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002590:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002594:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8002596:	430b      	orrs	r3, r1
 8002598:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800259c:	6823      	ldr	r3, [r4, #0]
 800259e:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 80025a2:	d008      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80025a4:	4a34      	ldr	r2, [pc, #208]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80025a6:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80025aa:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80025ae:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 80025b0:	430b      	orrs	r3, r1
 80025b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80025b6:	6823      	ldr	r3, [r4, #0]
 80025b8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80025bc:	d008      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80025be:	4a2e      	ldr	r2, [pc, #184]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80025c0:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80025c4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80025c8:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 80025ca:	430b      	orrs	r3, r1
 80025cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80025d0:	6823      	ldr	r3, [r4, #0]
 80025d2:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 80025d6:	d00d      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80025d8:	4a27      	ldr	r2, [pc, #156]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80025da:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80025de:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80025e2:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 80025e4:	430b      	orrs	r3, r1
 80025e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80025ea:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 80025ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025f0:	f000 80aa 	beq.w	8002748 <HAL_RCCEx_PeriphCLKConfig+0x37c>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80025f4:	6823      	ldr	r3, [r4, #0]
 80025f6:	f013 0f08 	tst.w	r3, #8
 80025fa:	d000      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    pllsaiused = 1;
 80025fc:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80025fe:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8002602:	d008      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002604:	4a1c      	ldr	r2, [pc, #112]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002606:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800260a:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 800260e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8002610:	430b      	orrs	r3, r1
 8002612:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002616:	6823      	ldr	r3, [r4, #0]
 8002618:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800261c:	d009      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800261e:	4a16      	ldr	r2, [pc, #88]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002620:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002624:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002628:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 800262c:	430b      	orrs	r3, r1
 800262e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002632:	b926      	cbnz	r6, 800263e <HAL_RCCEx_PeriphCLKConfig+0x272>
 8002634:	6823      	ldr	r3, [r4, #0]
 8002636:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800263a:	f000 8105 	beq.w	8002848 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800263e:	4a0e      	ldr	r2, [pc, #56]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002640:	6813      	ldr	r3, [r2, #0]
 8002642:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002646:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002648:	f7ff f94a 	bl	80018e0 <HAL_GetTick>
 800264c:	4606      	mov	r6, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800264e:	4b0a      	ldr	r3, [pc, #40]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8002656:	d079      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002658:	f7ff f942 	bl	80018e0 <HAL_GetTick>
 800265c:	1b80      	subs	r0, r0, r6
 800265e:	2864      	cmp	r0, #100	@ 0x64
 8002660:	d9f5      	bls.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x282>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002662:	2003      	movs	r0, #3
 8002664:	e0f3      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x482>
      plli2sused = 1;
 8002666:	2601      	movs	r6, #1
 8002668:	e6c5      	b.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 800266a:	2601      	movs	r6, #1
 800266c:	e6d5      	b.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x4e>
      pllsaiused = 1;
 800266e:	2501      	movs	r5, #1
 8002670:	e6d7      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x56>
      plli2sused = 1;
 8002672:	2601      	movs	r6, #1
 8002674:	e6e7      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002676:	bf00      	nop
 8002678:	40023800 	.word	0x40023800
    __HAL_RCC_PWR_CLK_ENABLE();
 800267c:	4b7f      	ldr	r3, [pc, #508]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800267e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002680:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002684:	641a      	str	r2, [r3, #64]	@ 0x40
 8002686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800268c:	9301      	str	r3, [sp, #4]
 800268e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8002690:	4a7b      	ldr	r2, [pc, #492]	@ (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8002692:	6813      	ldr	r3, [r2, #0]
 8002694:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002698:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800269a:	f7ff f921 	bl	80018e0 <HAL_GetTick>
 800269e:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80026a0:	4b77      	ldr	r3, [pc, #476]	@ (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80026a8:	d106      	bne.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026aa:	f7ff f919 	bl	80018e0 <HAL_GetTick>
 80026ae:	1bc0      	subs	r0, r0, r7
 80026b0:	2864      	cmp	r0, #100	@ 0x64
 80026b2:	d9f5      	bls.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        return HAL_TIMEOUT;
 80026b4:	2003      	movs	r0, #3
 80026b6:	e0ca      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x482>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026b8:	4b70      	ldr	r3, [pc, #448]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80026ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026bc:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80026c0:	d015      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x322>
 80026c2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80026c4:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d010      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x322>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026cc:	4b6b      	ldr	r3, [pc, #428]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80026ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80026d0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80026d4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80026d6:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 80026da:	6719      	str	r1, [r3, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026dc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80026de:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80026e2:	6719      	str	r1, [r3, #112]	@ 0x70
      RCC->BDCR = tmpreg0;
 80026e4:	671a      	str	r2, [r3, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80026e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e8:	f013 0f01 	tst.w	r3, #1
 80026ec:	d112      	bne.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x348>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80026f0:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80026f4:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 80026f8:	d01d      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80026fa:	4a60      	ldr	r2, [pc, #384]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80026fc:	6893      	ldr	r3, [r2, #8]
 80026fe:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002702:	6093      	str	r3, [r2, #8]
 8002704:	495d      	ldr	r1, [pc, #372]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8002706:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 8002708:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800270a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800270e:	4313      	orrs	r3, r2
 8002710:	670b      	str	r3, [r1, #112]	@ 0x70
 8002712:	e6a3      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 8002714:	f7ff f8e4 	bl	80018e0 <HAL_GetTick>
 8002718:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800271a:	4b58      	ldr	r3, [pc, #352]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800271c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800271e:	f013 0f02 	tst.w	r3, #2
 8002722:	d1e4      	bne.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x322>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002724:	f7ff f8dc 	bl	80018e0 <HAL_GetTick>
 8002728:	1bc0      	subs	r0, r0, r7
 800272a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800272e:	4298      	cmp	r0, r3
 8002730:	d9f3      	bls.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x34e>
            return HAL_TIMEOUT;
 8002732:	2003      	movs	r0, #3
 8002734:	e08b      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x482>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002736:	4851      	ldr	r0, [pc, #324]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8002738:	6882      	ldr	r2, [r0, #8]
 800273a:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 800273e:	4951      	ldr	r1, [pc, #324]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8002740:	4019      	ands	r1, r3
 8002742:	430a      	orrs	r2, r1
 8002744:	6082      	str	r2, [r0, #8]
 8002746:	e7dd      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x338>
      pllsaiused = 1;
 8002748:	2501      	movs	r5, #1
 800274a:	e753      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x228>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800274c:	6823      	ldr	r3, [r4, #0]
 800274e:	f013 0f01 	tst.w	r3, #1
 8002752:	d013      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8002754:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002756:	b98b      	cbnz	r3, 800277c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002758:	4a48      	ldr	r2, [pc, #288]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800275a:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800275e:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002762:	6860      	ldr	r0, [r4, #4]
 8002764:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002768:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800276c:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8002770:	430b      	orrs	r3, r1
 8002772:	68a1      	ldr	r1, [r4, #8]
 8002774:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002778:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800277c:	6823      	ldr	r3, [r4, #0]
 800277e:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8002782:	d003      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8002784:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002786:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 800278a:	d006      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800278c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8002790:	d01e      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x404>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002792:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002794:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002798:	d11a      	bne.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x404>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800279a:	4a38      	ldr	r2, [pc, #224]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800279c:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027a0:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80027a4:	6860      	ldr	r0, [r4, #4]
 80027a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027aa:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80027ae:	68e0      	ldr	r0, [r4, #12]
 80027b0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80027b4:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 80027b8:	430b      	orrs	r3, r1
 80027ba:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80027be:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 80027c2:	f023 031f 	bic.w	r3, r3, #31
 80027c6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80027c8:	3901      	subs	r1, #1
 80027ca:	430b      	orrs	r3, r1
 80027cc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027d0:	6823      	ldr	r3, [r4, #0]
 80027d2:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80027d6:	d011      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80027d8:	4a28      	ldr	r2, [pc, #160]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80027da:	f8d2 0084 	ldr.w	r0, [r2, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027de:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80027e2:	6866      	ldr	r6, [r4, #4]
 80027e4:	6923      	ldr	r3, [r4, #16]
 80027e6:	041b      	lsls	r3, r3, #16
 80027e8:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 80027ec:	f000 6070 	and.w	r0, r0, #251658240	@ 0xf000000
 80027f0:	4303      	orrs	r3, r0
 80027f2:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 80027f6:	430b      	orrs	r3, r1
 80027f8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80027fc:	6823      	ldr	r3, [r4, #0]
 80027fe:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002802:	d00d      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x454>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002804:	6862      	ldr	r2, [r4, #4]
 8002806:	6923      	ldr	r3, [r4, #16]
 8002808:	041b      	lsls	r3, r3, #16
 800280a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800280e:	68e2      	ldr	r2, [r4, #12]
 8002810:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002814:	68a2      	ldr	r2, [r4, #8]
 8002816:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800281a:	4a18      	ldr	r2, [pc, #96]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800281c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002820:	4a16      	ldr	r2, [pc, #88]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8002822:	6813      	ldr	r3, [r2, #0]
 8002824:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002828:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800282a:	f7ff f859 	bl	80018e0 <HAL_GetTick>
 800282e:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002830:	4b12      	ldr	r3, [pc, #72]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8002838:	d106      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800283a:	f7ff f851 	bl	80018e0 <HAL_GetTick>
 800283e:	1b80      	subs	r0, r0, r6
 8002840:	2864      	cmp	r0, #100	@ 0x64
 8002842:	d9f5      	bls.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x464>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002844:	2003      	movs	r0, #3
 8002846:	e002      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x482>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002848:	2d01      	cmp	r5, #1
 800284a:	d002      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x486>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800284c:	2000      	movs	r0, #0
}
 800284e:	b003      	add	sp, #12
 8002850:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 8002852:	4a0a      	ldr	r2, [pc, #40]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8002854:	6813      	ldr	r3, [r2, #0]
 8002856:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800285a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800285c:	f7ff f840 	bl	80018e0 <HAL_GetTick>
 8002860:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002862:	4b06      	ldr	r3, [pc, #24]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 800286a:	d00d      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800286c:	f7ff f838 	bl	80018e0 <HAL_GetTick>
 8002870:	1b40      	subs	r0, r0, r5
 8002872:	2864      	cmp	r0, #100	@ 0x64
 8002874:	d9f5      	bls.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x496>
        return HAL_TIMEOUT;
 8002876:	2003      	movs	r0, #3
 8002878:	e7e9      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x482>
 800287a:	bf00      	nop
 800287c:	40023800 	.word	0x40023800
 8002880:	40007000 	.word	0x40007000
 8002884:	0ffffcff 	.word	0x0ffffcff
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002888:	6823      	ldr	r3, [r4, #0]
 800288a:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 800288e:	d001      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
 8002890:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002892:	b122      	cbz	r2, 800289e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002894:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8002898:	d01d      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800289a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800289c:	b9db      	cbnz	r3, 80028d6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800289e:	4a35      	ldr	r2, [pc, #212]	@ (8002974 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 80028a0:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80028a4:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80028a8:	6960      	ldr	r0, [r4, #20]
 80028aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028ae:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80028b2:	69a0      	ldr	r0, [r4, #24]
 80028b4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80028b8:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 80028bc:	430b      	orrs	r3, r1
 80028be:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80028c2:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 80028c6:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 80028ca:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80028cc:	3901      	subs	r1, #1
 80028ce:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80028d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80028d6:	6823      	ldr	r3, [r4, #0]
 80028d8:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 80028dc:	d003      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80028de:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 80028e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028e4:	d031      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x57e>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80028e6:	6823      	ldr	r3, [r4, #0]
 80028e8:	f013 0f08 	tst.w	r3, #8
 80028ec:	d019      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x556>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80028ee:	4a21      	ldr	r2, [pc, #132]	@ (8002974 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 80028f0:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80028f4:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80028f8:	6960      	ldr	r0, [r4, #20]
 80028fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028fe:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002902:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8002906:	430b      	orrs	r3, r1
 8002908:	69e1      	ldr	r1, [r4, #28]
 800290a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800290e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002912:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8002916:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800291a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800291c:	430b      	orrs	r3, r1
 800291e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8002922:	4a14      	ldr	r2, [pc, #80]	@ (8002974 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8002924:	6813      	ldr	r3, [r2, #0]
 8002926:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800292a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800292c:	f7fe ffd8 	bl	80018e0 <HAL_GetTick>
 8002930:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002932:	4b10      	ldr	r3, [pc, #64]	@ (8002974 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 800293a:	d119      	bne.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800293c:	f7fe ffd0 	bl	80018e0 <HAL_GetTick>
 8002940:	1b00      	subs	r0, r0, r4
 8002942:	2864      	cmp	r0, #100	@ 0x64
 8002944:	d9f5      	bls.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x566>
        return HAL_TIMEOUT;
 8002946:	2003      	movs	r0, #3
 8002948:	e781      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x482>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800294a:	4a0a      	ldr	r2, [pc, #40]	@ (8002974 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 800294c:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002950:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002954:	6965      	ldr	r5, [r4, #20]
 8002956:	6a23      	ldr	r3, [r4, #32]
 8002958:	041b      	lsls	r3, r3, #16
 800295a:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800295e:	f000 6070 	and.w	r0, r0, #251658240	@ 0xf000000
 8002962:	4303      	orrs	r3, r0
 8002964:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 8002968:	430b      	orrs	r3, r1
 800296a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800296e:	e7ba      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
  return HAL_OK;
 8002970:	2000      	movs	r0, #0
 8002972:	e76c      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8002974:	40023800 	.word	0x40023800

08002978 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002978:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800297a:	e852 3f00 	ldrex	r3, [r2]
 800297e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002982:	e842 3100 	strex	r1, r3, [r2]
 8002986:	2900      	cmp	r1, #0
 8002988:	d1f6      	bne.n	8002978 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800298a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800298c:	f102 0308 	add.w	r3, r2, #8
 8002990:	e853 3f00 	ldrex	r3, [r3]
 8002994:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002998:	3208      	adds	r2, #8
 800299a:	e842 3100 	strex	r1, r3, [r2]
 800299e:	2900      	cmp	r1, #0
 80029a0:	d1f3      	bne.n	800298a <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029a2:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d006      	beq.n	80029b6 <UART_EndRxTransfer+0x3e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029a8:	2320      	movs	r3, #32
 80029aa:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ae:	2300      	movs	r3, #0
 80029b0:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80029b2:	6683      	str	r3, [r0, #104]	@ 0x68
}
 80029b4:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029b6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b8:	e852 3f00 	ldrex	r3, [r2]
 80029bc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c0:	e842 3100 	strex	r1, r3, [r2]
 80029c4:	2900      	cmp	r1, #0
 80029c6:	d1f6      	bne.n	80029b6 <UART_EndRxTransfer+0x3e>
 80029c8:	e7ee      	b.n	80029a8 <UART_EndRxTransfer+0x30>
	...

080029cc <UART_SetConfig>:
{
 80029cc:	b510      	push	{r4, lr}
 80029ce:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029d0:	6883      	ldr	r3, [r0, #8]
 80029d2:	6902      	ldr	r2, [r0, #16]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	6942      	ldr	r2, [r0, #20]
 80029d8:	4313      	orrs	r3, r2
 80029da:	69c2      	ldr	r2, [r0, #28]
 80029dc:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029de:	6801      	ldr	r1, [r0, #0]
 80029e0:	6808      	ldr	r0, [r1, #0]
 80029e2:	4a91      	ldr	r2, [pc, #580]	@ (8002c28 <UART_SetConfig+0x25c>)
 80029e4:	4002      	ands	r2, r0
 80029e6:	431a      	orrs	r2, r3
 80029e8:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029ea:	6822      	ldr	r2, [r4, #0]
 80029ec:	6853      	ldr	r3, [r2, #4]
 80029ee:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80029f2:	68e1      	ldr	r1, [r4, #12]
 80029f4:	430b      	orrs	r3, r1
 80029f6:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029f8:	69a2      	ldr	r2, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 80029fa:	6a23      	ldr	r3, [r4, #32]
 80029fc:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029fe:	6821      	ldr	r1, [r4, #0]
 8002a00:	688b      	ldr	r3, [r1, #8]
 8002a02:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002a06:	4313      	orrs	r3, r2
 8002a08:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a0a:	6823      	ldr	r3, [r4, #0]
 8002a0c:	4a87      	ldr	r2, [pc, #540]	@ (8002c2c <UART_SetConfig+0x260>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d018      	beq.n	8002a44 <UART_SetConfig+0x78>
 8002a12:	4a87      	ldr	r2, [pc, #540]	@ (8002c30 <UART_SetConfig+0x264>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d03a      	beq.n	8002a8e <UART_SetConfig+0xc2>
 8002a18:	4a86      	ldr	r2, [pc, #536]	@ (8002c34 <UART_SetConfig+0x268>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d04f      	beq.n	8002abe <UART_SetConfig+0xf2>
 8002a1e:	4a86      	ldr	r2, [pc, #536]	@ (8002c38 <UART_SetConfig+0x26c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d05e      	beq.n	8002ae2 <UART_SetConfig+0x116>
 8002a24:	4a85      	ldr	r2, [pc, #532]	@ (8002c3c <UART_SetConfig+0x270>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d06d      	beq.n	8002b06 <UART_SetConfig+0x13a>
 8002a2a:	4a85      	ldr	r2, [pc, #532]	@ (8002c40 <UART_SetConfig+0x274>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d07f      	beq.n	8002b30 <UART_SetConfig+0x164>
 8002a30:	4a84      	ldr	r2, [pc, #528]	@ (8002c44 <UART_SetConfig+0x278>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	f000 8091 	beq.w	8002b5a <UART_SetConfig+0x18e>
 8002a38:	4a83      	ldr	r2, [pc, #524]	@ (8002c48 <UART_SetConfig+0x27c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	f000 80a2 	beq.w	8002b84 <UART_SetConfig+0x1b8>
 8002a40:	2310      	movs	r3, #16
 8002a42:	e00b      	b.n	8002a5c <UART_SetConfig+0x90>
 8002a44:	4b81      	ldr	r3, [pc, #516]	@ (8002c4c <UART_SetConfig+0x280>)
 8002a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d81b      	bhi.n	8002a8a <UART_SetConfig+0xbe>
 8002a52:	e8df f003 	tbb	[pc, r3]
 8002a56:	1602      	.short	0x1602
 8002a58:	18ab      	.short	0x18ab
 8002a5a:	2301      	movs	r3, #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a5c:	69e0      	ldr	r0, [r4, #28]
 8002a5e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002a62:	f000 80d7 	beq.w	8002c14 <UART_SetConfig+0x248>
    switch (clocksource)
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	f200 8138 	bhi.w	8002cdc <UART_SetConfig+0x310>
 8002a6c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002a70:	01270114 	.word	0x01270114
 8002a74:	01360112 	.word	0x01360112
 8002a78:	0136012a 	.word	0x0136012a
 8002a7c:	01360136 	.word	0x01360136
 8002a80:	012d      	.short	0x012d
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a82:	2304      	movs	r3, #4
 8002a84:	e7ea      	b.n	8002a5c <UART_SetConfig+0x90>
 8002a86:	2308      	movs	r3, #8
 8002a88:	e7e8      	b.n	8002a5c <UART_SetConfig+0x90>
 8002a8a:	2310      	movs	r3, #16
 8002a8c:	e7e6      	b.n	8002a5c <UART_SetConfig+0x90>
 8002a8e:	4b6f      	ldr	r3, [pc, #444]	@ (8002c4c <UART_SetConfig+0x280>)
 8002a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a94:	f003 030c 	and.w	r3, r3, #12
 8002a98:	2b0c      	cmp	r3, #12
 8002a9a:	d80e      	bhi.n	8002aba <UART_SetConfig+0xee>
 8002a9c:	e8df f003 	tbb	[pc, r3]
 8002aa0:	0d0d0d07 	.word	0x0d0d0d07
 8002aa4:	0d0d0d09 	.word	0x0d0d0d09
 8002aa8:	0d0d0d88 	.word	0x0d0d0d88
 8002aac:	0b          	.byte	0x0b
 8002aad:	00          	.byte	0x00
 8002aae:	2300      	movs	r3, #0
 8002ab0:	e7d4      	b.n	8002a5c <UART_SetConfig+0x90>
 8002ab2:	2304      	movs	r3, #4
 8002ab4:	e7d2      	b.n	8002a5c <UART_SetConfig+0x90>
 8002ab6:	2308      	movs	r3, #8
 8002ab8:	e7d0      	b.n	8002a5c <UART_SetConfig+0x90>
 8002aba:	2310      	movs	r3, #16
 8002abc:	e7ce      	b.n	8002a5c <UART_SetConfig+0x90>
 8002abe:	4b63      	ldr	r3, [pc, #396]	@ (8002c4c <UART_SetConfig+0x280>)
 8002ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ac4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002ac8:	2b20      	cmp	r3, #32
 8002aca:	d073      	beq.n	8002bb4 <UART_SetConfig+0x1e8>
 8002acc:	d805      	bhi.n	8002ada <UART_SetConfig+0x10e>
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d072      	beq.n	8002bb8 <UART_SetConfig+0x1ec>
 8002ad2:	2b10      	cmp	r3, #16
 8002ad4:	d172      	bne.n	8002bbc <UART_SetConfig+0x1f0>
 8002ad6:	2304      	movs	r3, #4
 8002ad8:	e7c0      	b.n	8002a5c <UART_SetConfig+0x90>
 8002ada:	2b30      	cmp	r3, #48	@ 0x30
 8002adc:	d170      	bne.n	8002bc0 <UART_SetConfig+0x1f4>
 8002ade:	2308      	movs	r3, #8
 8002ae0:	e7bc      	b.n	8002a5c <UART_SetConfig+0x90>
 8002ae2:	4b5a      	ldr	r3, [pc, #360]	@ (8002c4c <UART_SetConfig+0x280>)
 8002ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002aec:	2b80      	cmp	r3, #128	@ 0x80
 8002aee:	d069      	beq.n	8002bc4 <UART_SetConfig+0x1f8>
 8002af0:	d805      	bhi.n	8002afe <UART_SetConfig+0x132>
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d068      	beq.n	8002bc8 <UART_SetConfig+0x1fc>
 8002af6:	2b40      	cmp	r3, #64	@ 0x40
 8002af8:	d168      	bne.n	8002bcc <UART_SetConfig+0x200>
 8002afa:	2304      	movs	r3, #4
 8002afc:	e7ae      	b.n	8002a5c <UART_SetConfig+0x90>
 8002afe:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b00:	d166      	bne.n	8002bd0 <UART_SetConfig+0x204>
 8002b02:	2308      	movs	r3, #8
 8002b04:	e7aa      	b.n	8002a5c <UART_SetConfig+0x90>
 8002b06:	4b51      	ldr	r3, [pc, #324]	@ (8002c4c <UART_SetConfig+0x280>)
 8002b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b14:	d05e      	beq.n	8002bd4 <UART_SetConfig+0x208>
 8002b16:	d806      	bhi.n	8002b26 <UART_SetConfig+0x15a>
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d05d      	beq.n	8002bd8 <UART_SetConfig+0x20c>
 8002b1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b20:	d15c      	bne.n	8002bdc <UART_SetConfig+0x210>
 8002b22:	2304      	movs	r3, #4
 8002b24:	e79a      	b.n	8002a5c <UART_SetConfig+0x90>
 8002b26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b2a:	d159      	bne.n	8002be0 <UART_SetConfig+0x214>
 8002b2c:	2308      	movs	r3, #8
 8002b2e:	e795      	b.n	8002a5c <UART_SetConfig+0x90>
 8002b30:	4b46      	ldr	r3, [pc, #280]	@ (8002c4c <UART_SetConfig+0x280>)
 8002b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b36:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b3e:	d051      	beq.n	8002be4 <UART_SetConfig+0x218>
 8002b40:	d806      	bhi.n	8002b50 <UART_SetConfig+0x184>
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d050      	beq.n	8002be8 <UART_SetConfig+0x21c>
 8002b46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b4a:	d14f      	bne.n	8002bec <UART_SetConfig+0x220>
 8002b4c:	2304      	movs	r3, #4
 8002b4e:	e785      	b.n	8002a5c <UART_SetConfig+0x90>
 8002b50:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b54:	d14c      	bne.n	8002bf0 <UART_SetConfig+0x224>
 8002b56:	2308      	movs	r3, #8
 8002b58:	e780      	b.n	8002a5c <UART_SetConfig+0x90>
 8002b5a:	4b3c      	ldr	r3, [pc, #240]	@ (8002c4c <UART_SetConfig+0x280>)
 8002b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b60:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002b64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b68:	d044      	beq.n	8002bf4 <UART_SetConfig+0x228>
 8002b6a:	d806      	bhi.n	8002b7a <UART_SetConfig+0x1ae>
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d043      	beq.n	8002bf8 <UART_SetConfig+0x22c>
 8002b70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b74:	d142      	bne.n	8002bfc <UART_SetConfig+0x230>
 8002b76:	2304      	movs	r3, #4
 8002b78:	e770      	b.n	8002a5c <UART_SetConfig+0x90>
 8002b7a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002b7e:	d13f      	bne.n	8002c00 <UART_SetConfig+0x234>
 8002b80:	2308      	movs	r3, #8
 8002b82:	e76b      	b.n	8002a5c <UART_SetConfig+0x90>
 8002b84:	4b31      	ldr	r3, [pc, #196]	@ (8002c4c <UART_SetConfig+0x280>)
 8002b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b8a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002b8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b92:	d037      	beq.n	8002c04 <UART_SetConfig+0x238>
 8002b94:	d805      	bhi.n	8002ba2 <UART_SetConfig+0x1d6>
 8002b96:	b3bb      	cbz	r3, 8002c08 <UART_SetConfig+0x23c>
 8002b98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b9c:	d136      	bne.n	8002c0c <UART_SetConfig+0x240>
 8002b9e:	2304      	movs	r3, #4
 8002ba0:	e75c      	b.n	8002a5c <UART_SetConfig+0x90>
 8002ba2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002ba6:	d133      	bne.n	8002c10 <UART_SetConfig+0x244>
 8002ba8:	2308      	movs	r3, #8
 8002baa:	e757      	b.n	8002a5c <UART_SetConfig+0x90>
 8002bac:	2302      	movs	r3, #2
 8002bae:	e755      	b.n	8002a5c <UART_SetConfig+0x90>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e753      	b.n	8002a5c <UART_SetConfig+0x90>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e751      	b.n	8002a5c <UART_SetConfig+0x90>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	e74f      	b.n	8002a5c <UART_SetConfig+0x90>
 8002bbc:	2310      	movs	r3, #16
 8002bbe:	e74d      	b.n	8002a5c <UART_SetConfig+0x90>
 8002bc0:	2310      	movs	r3, #16
 8002bc2:	e74b      	b.n	8002a5c <UART_SetConfig+0x90>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	e749      	b.n	8002a5c <UART_SetConfig+0x90>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	e747      	b.n	8002a5c <UART_SetConfig+0x90>
 8002bcc:	2310      	movs	r3, #16
 8002bce:	e745      	b.n	8002a5c <UART_SetConfig+0x90>
 8002bd0:	2310      	movs	r3, #16
 8002bd2:	e743      	b.n	8002a5c <UART_SetConfig+0x90>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	e741      	b.n	8002a5c <UART_SetConfig+0x90>
 8002bd8:	2300      	movs	r3, #0
 8002bda:	e73f      	b.n	8002a5c <UART_SetConfig+0x90>
 8002bdc:	2310      	movs	r3, #16
 8002bde:	e73d      	b.n	8002a5c <UART_SetConfig+0x90>
 8002be0:	2310      	movs	r3, #16
 8002be2:	e73b      	b.n	8002a5c <UART_SetConfig+0x90>
 8002be4:	2302      	movs	r3, #2
 8002be6:	e739      	b.n	8002a5c <UART_SetConfig+0x90>
 8002be8:	2301      	movs	r3, #1
 8002bea:	e737      	b.n	8002a5c <UART_SetConfig+0x90>
 8002bec:	2310      	movs	r3, #16
 8002bee:	e735      	b.n	8002a5c <UART_SetConfig+0x90>
 8002bf0:	2310      	movs	r3, #16
 8002bf2:	e733      	b.n	8002a5c <UART_SetConfig+0x90>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	e731      	b.n	8002a5c <UART_SetConfig+0x90>
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	e72f      	b.n	8002a5c <UART_SetConfig+0x90>
 8002bfc:	2310      	movs	r3, #16
 8002bfe:	e72d      	b.n	8002a5c <UART_SetConfig+0x90>
 8002c00:	2310      	movs	r3, #16
 8002c02:	e72b      	b.n	8002a5c <UART_SetConfig+0x90>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e729      	b.n	8002a5c <UART_SetConfig+0x90>
 8002c08:	2300      	movs	r3, #0
 8002c0a:	e727      	b.n	8002a5c <UART_SetConfig+0x90>
 8002c0c:	2310      	movs	r3, #16
 8002c0e:	e725      	b.n	8002a5c <UART_SetConfig+0x90>
 8002c10:	2310      	movs	r3, #16
 8002c12:	e723      	b.n	8002a5c <UART_SetConfig+0x90>
    switch (clocksource)
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d85b      	bhi.n	8002cd0 <UART_SetConfig+0x304>
 8002c18:	e8df f003 	tbb	[pc, r3]
 8002c1c:	5a3a341a 	.word	0x5a3a341a
 8002c20:	5a5a5a37 	.word	0x5a5a5a37
 8002c24:	1e          	.byte	0x1e
 8002c25:	00          	.byte	0x00
 8002c26:	bf00      	nop
 8002c28:	efff69f3 	.word	0xefff69f3
 8002c2c:	40011000 	.word	0x40011000
 8002c30:	40004400 	.word	0x40004400
 8002c34:	40004800 	.word	0x40004800
 8002c38:	40004c00 	.word	0x40004c00
 8002c3c:	40005000 	.word	0x40005000
 8002c40:	40011400 	.word	0x40011400
 8002c44:	40007800 	.word	0x40007800
 8002c48:	40007c00 	.word	0x40007c00
 8002c4c:	40023800 	.word	0x40023800
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c50:	f7ff fb9c 	bl	800238c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002c54:	2800      	cmp	r0, #0
 8002c56:	d03d      	beq.n	8002cd4 <UART_SetConfig+0x308>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c58:	6862      	ldr	r2, [r4, #4]
 8002c5a:	0853      	lsrs	r3, r2, #1
 8002c5c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002c60:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c64:	f1a3 0110 	sub.w	r1, r3, #16
 8002c68:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8002c6c:	4291      	cmp	r1, r2
 8002c6e:	d833      	bhi.n	8002cd8 <UART_SetConfig+0x30c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c76:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8002c7a:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8002c7c:	6822      	ldr	r2, [r4, #0]
 8002c7e:	60d3      	str	r3, [r2, #12]
 8002c80:	2000      	movs	r0, #0
 8002c82:	e030      	b.n	8002ce6 <UART_SetConfig+0x31a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c84:	f7ff fb92 	bl	80023ac <HAL_RCC_GetPCLK2Freq>
        break;
 8002c88:	e7e4      	b.n	8002c54 <UART_SetConfig+0x288>
        pclk = HAL_RCC_GetSysClockFreq();
 8002c8a:	f7ff fa55 	bl	8002138 <HAL_RCC_GetSysClockFreq>
        break;
 8002c8e:	e7e1      	b.n	8002c54 <UART_SetConfig+0x288>
        pclk = (uint32_t) HSI_VALUE;
 8002c90:	4817      	ldr	r0, [pc, #92]	@ (8002cf0 <UART_SetConfig+0x324>)
 8002c92:	e7e1      	b.n	8002c58 <UART_SetConfig+0x28c>
    switch (clocksource)
 8002c94:	4816      	ldr	r0, [pc, #88]	@ (8002cf0 <UART_SetConfig+0x324>)
 8002c96:	e002      	b.n	8002c9e <UART_SetConfig+0x2d2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c98:	f7ff fb78 	bl	800238c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002c9c:	b300      	cbz	r0, 8002ce0 <UART_SetConfig+0x314>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c9e:	6863      	ldr	r3, [r4, #4]
 8002ca0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002ca4:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ca8:	f1a0 0210 	sub.w	r2, r0, #16
 8002cac:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d817      	bhi.n	8002ce4 <UART_SetConfig+0x318>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002cb4:	6823      	ldr	r3, [r4, #0]
 8002cb6:	b280      	uxth	r0, r0
 8002cb8:	60d8      	str	r0, [r3, #12]
 8002cba:	2000      	movs	r0, #0
 8002cbc:	e013      	b.n	8002ce6 <UART_SetConfig+0x31a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cbe:	f7ff fb75 	bl	80023ac <HAL_RCC_GetPCLK2Freq>
        break;
 8002cc2:	e7eb      	b.n	8002c9c <UART_SetConfig+0x2d0>
        pclk = HAL_RCC_GetSysClockFreq();
 8002cc4:	f7ff fa38 	bl	8002138 <HAL_RCC_GetSysClockFreq>
        break;
 8002cc8:	e7e8      	b.n	8002c9c <UART_SetConfig+0x2d0>
        pclk = (uint32_t) LSE_VALUE;
 8002cca:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002cce:	e7e6      	b.n	8002c9e <UART_SetConfig+0x2d2>
    switch (clocksource)
 8002cd0:	2001      	movs	r0, #1
 8002cd2:	e008      	b.n	8002ce6 <UART_SetConfig+0x31a>
 8002cd4:	2000      	movs	r0, #0
 8002cd6:	e006      	b.n	8002ce6 <UART_SetConfig+0x31a>
        ret = HAL_ERROR;
 8002cd8:	2001      	movs	r0, #1
 8002cda:	e004      	b.n	8002ce6 <UART_SetConfig+0x31a>
    switch (clocksource)
 8002cdc:	2001      	movs	r0, #1
 8002cde:	e002      	b.n	8002ce6 <UART_SetConfig+0x31a>
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	e000      	b.n	8002ce6 <UART_SetConfig+0x31a>
        ret = HAL_ERROR;
 8002ce4:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8002cea:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 8002cec:	bd10      	pop	{r4, pc}
 8002cee:	bf00      	nop
 8002cf0:	00f42400 	.word	0x00f42400

08002cf4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cf4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002cf6:	f013 0f08 	tst.w	r3, #8
 8002cfa:	d006      	beq.n	8002d0a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cfc:	6802      	ldr	r2, [r0, #0]
 8002cfe:	6853      	ldr	r3, [r2, #4]
 8002d00:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002d04:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8002d06:	430b      	orrs	r3, r1
 8002d08:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d0a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002d0c:	f013 0f01 	tst.w	r3, #1
 8002d10:	d006      	beq.n	8002d20 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d12:	6802      	ldr	r2, [r0, #0]
 8002d14:	6853      	ldr	r3, [r2, #4]
 8002d16:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002d1a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8002d1c:	430b      	orrs	r3, r1
 8002d1e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d20:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002d22:	f013 0f02 	tst.w	r3, #2
 8002d26:	d006      	beq.n	8002d36 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d28:	6802      	ldr	r2, [r0, #0]
 8002d2a:	6853      	ldr	r3, [r2, #4]
 8002d2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d30:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8002d32:	430b      	orrs	r3, r1
 8002d34:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d36:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002d38:	f013 0f04 	tst.w	r3, #4
 8002d3c:	d006      	beq.n	8002d4c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d3e:	6802      	ldr	r2, [r0, #0]
 8002d40:	6853      	ldr	r3, [r2, #4]
 8002d42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d46:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8002d48:	430b      	orrs	r3, r1
 8002d4a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d4c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002d4e:	f013 0f10 	tst.w	r3, #16
 8002d52:	d006      	beq.n	8002d62 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d54:	6802      	ldr	r2, [r0, #0]
 8002d56:	6893      	ldr	r3, [r2, #8]
 8002d58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d5c:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8002d5e:	430b      	orrs	r3, r1
 8002d60:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d62:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002d64:	f013 0f20 	tst.w	r3, #32
 8002d68:	d006      	beq.n	8002d78 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d6a:	6802      	ldr	r2, [r0, #0]
 8002d6c:	6893      	ldr	r3, [r2, #8]
 8002d6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d72:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8002d74:	430b      	orrs	r3, r1
 8002d76:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d78:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002d7a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8002d7e:	d00a      	beq.n	8002d96 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d80:	6802      	ldr	r2, [r0, #0]
 8002d82:	6853      	ldr	r3, [r2, #4]
 8002d84:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002d88:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8002d8a:	430b      	orrs	r3, r1
 8002d8c:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d8e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002d90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d94:	d00b      	beq.n	8002dae <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d96:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002d98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002d9c:	d006      	beq.n	8002dac <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d9e:	6802      	ldr	r2, [r0, #0]
 8002da0:	6853      	ldr	r3, [r2, #4]
 8002da2:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8002da6:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8002da8:	430b      	orrs	r3, r1
 8002daa:	6053      	str	r3, [r2, #4]
}
 8002dac:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002dae:	6802      	ldr	r2, [r0, #0]
 8002db0:	6853      	ldr	r3, [r2, #4]
 8002db2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002db6:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8002db8:	430b      	orrs	r3, r1
 8002dba:	6053      	str	r3, [r2, #4]
 8002dbc:	e7eb      	b.n	8002d96 <UART_AdvFeatureConfig+0xa2>

08002dbe <UART_WaitOnFlagUntilTimeout>:
{
 8002dbe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002dc2:	4605      	mov	r5, r0
 8002dc4:	460e      	mov	r6, r1
 8002dc6:	4617      	mov	r7, r2
 8002dc8:	4699      	mov	r9, r3
 8002dca:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dce:	682b      	ldr	r3, [r5, #0]
 8002dd0:	69dc      	ldr	r4, [r3, #28]
 8002dd2:	ea36 0404 	bics.w	r4, r6, r4
 8002dd6:	bf0c      	ite	eq
 8002dd8:	2401      	moveq	r4, #1
 8002dda:	2400      	movne	r4, #0
 8002ddc:	42bc      	cmp	r4, r7
 8002dde:	d13a      	bne.n	8002e56 <UART_WaitOnFlagUntilTimeout+0x98>
    if (Timeout != HAL_MAX_DELAY)
 8002de0:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002de4:	d0f3      	beq.n	8002dce <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de6:	f7fe fd7b 	bl	80018e0 <HAL_GetTick>
 8002dea:	eba0 0009 	sub.w	r0, r0, r9
 8002dee:	4540      	cmp	r0, r8
 8002df0:	d834      	bhi.n	8002e5c <UART_WaitOnFlagUntilTimeout+0x9e>
 8002df2:	f1b8 0f00 	cmp.w	r8, #0
 8002df6:	d033      	beq.n	8002e60 <UART_WaitOnFlagUntilTimeout+0xa2>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002df8:	682b      	ldr	r3, [r5, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	f012 0f04 	tst.w	r2, #4
 8002e00:	d0e5      	beq.n	8002dce <UART_WaitOnFlagUntilTimeout+0x10>
 8002e02:	f1b6 0240 	subs.w	r2, r6, #64	@ 0x40
 8002e06:	bf18      	it	ne
 8002e08:	2201      	movne	r2, #1
 8002e0a:	2e80      	cmp	r6, #128	@ 0x80
 8002e0c:	d0df      	beq.n	8002dce <UART_WaitOnFlagUntilTimeout+0x10>
 8002e0e:	2a00      	cmp	r2, #0
 8002e10:	d0dd      	beq.n	8002dce <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e12:	69da      	ldr	r2, [r3, #28]
 8002e14:	f012 0f08 	tst.w	r2, #8
 8002e18:	d111      	bne.n	8002e3e <UART_WaitOnFlagUntilTimeout+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e1a:	69da      	ldr	r2, [r3, #28]
 8002e1c:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8002e20:	d0d5      	beq.n	8002dce <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e26:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8002e28:	4628      	mov	r0, r5
 8002e2a:	f7ff fda5 	bl	8002978 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e2e:	2320      	movs	r3, #32
 8002e30:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8002e34:	2300      	movs	r3, #0
 8002e36:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78
          return HAL_TIMEOUT;
 8002e3a:	2003      	movs	r0, #3
 8002e3c:	e00c      	b.n	8002e58 <UART_WaitOnFlagUntilTimeout+0x9a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e3e:	2408      	movs	r4, #8
 8002e40:	621c      	str	r4, [r3, #32]
          UART_EndRxTransfer(huart);
 8002e42:	4628      	mov	r0, r5
 8002e44:	f7ff fd98 	bl	8002978 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e48:	f8c5 4084 	str.w	r4, [r5, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78
          return HAL_ERROR;
 8002e52:	2001      	movs	r0, #1
 8002e54:	e000      	b.n	8002e58 <UART_WaitOnFlagUntilTimeout+0x9a>
  return HAL_OK;
 8002e56:	2000      	movs	r0, #0
}
 8002e58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8002e5c:	2003      	movs	r0, #3
 8002e5e:	e7fb      	b.n	8002e58 <UART_WaitOnFlagUntilTimeout+0x9a>
 8002e60:	2003      	movs	r0, #3
 8002e62:	e7f9      	b.n	8002e58 <UART_WaitOnFlagUntilTimeout+0x9a>

08002e64 <HAL_UART_Transmit>:
{
 8002e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002e6c:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8002e6e:	2b20      	cmp	r3, #32
 8002e70:	d157      	bne.n	8002f22 <HAL_UART_Transmit+0xbe>
 8002e72:	4604      	mov	r4, r0
 8002e74:	460d      	mov	r5, r1
 8002e76:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002e78:	2a00      	cmp	r2, #0
 8002e7a:	bf18      	it	ne
 8002e7c:	2900      	cmpne	r1, #0
 8002e7e:	d101      	bne.n	8002e84 <HAL_UART_Transmit+0x20>
      return  HAL_ERROR;
 8002e80:	2001      	movs	r0, #1
 8002e82:	e04f      	b.n	8002f24 <HAL_UART_Transmit+0xc0>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e84:	2300      	movs	r3, #0
 8002e86:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e8a:	2321      	movs	r3, #33	@ 0x21
 8002e8c:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 8002e8e:	f7fe fd27 	bl	80018e0 <HAL_GetTick>
 8002e92:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8002e94:	f8a4 8050 	strh.w	r8, [r4, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002e98:	f8a4 8052 	strh.w	r8, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e9c:	68a3      	ldr	r3, [r4, #8]
 8002e9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ea2:	d002      	beq.n	8002eaa <HAL_UART_Transmit+0x46>
      pdata16bits = NULL;
 8002ea4:	f04f 0800 	mov.w	r8, #0
 8002ea8:	e015      	b.n	8002ed6 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eaa:	6923      	ldr	r3, [r4, #16]
 8002eac:	b33b      	cbz	r3, 8002efe <HAL_UART_Transmit+0x9a>
      pdata16bits = NULL;
 8002eae:	f04f 0800 	mov.w	r8, #0
 8002eb2:	e010      	b.n	8002ed6 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8002eb4:	2320      	movs	r3, #32
 8002eb6:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8002eb8:	2003      	movs	r0, #3
 8002eba:	e033      	b.n	8002f24 <HAL_UART_Transmit+0xc0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ebc:	f838 3b02 	ldrh.w	r3, [r8], #2
 8002ec0:	6822      	ldr	r2, [r4, #0]
 8002ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ec6:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8002ec8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8002ecc:	b292      	uxth	r2, r2
 8002ece:	3a01      	subs	r2, #1
 8002ed0:	b292      	uxth	r2, r2
 8002ed2:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002ed6:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	b193      	cbz	r3, 8002f04 <HAL_UART_Transmit+0xa0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ede:	9600      	str	r6, [sp, #0]
 8002ee0:	463b      	mov	r3, r7
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2180      	movs	r1, #128	@ 0x80
 8002ee6:	4620      	mov	r0, r4
 8002ee8:	f7ff ff69 	bl	8002dbe <UART_WaitOnFlagUntilTimeout>
 8002eec:	2800      	cmp	r0, #0
 8002eee:	d1e1      	bne.n	8002eb4 <HAL_UART_Transmit+0x50>
      if (pdata8bits == NULL)
 8002ef0:	2d00      	cmp	r5, #0
 8002ef2:	d0e3      	beq.n	8002ebc <HAL_UART_Transmit+0x58>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ef4:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002ef8:	6823      	ldr	r3, [r4, #0]
 8002efa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002efc:	e7e4      	b.n	8002ec8 <HAL_UART_Transmit+0x64>
      pdata16bits = (const uint16_t *) pData;
 8002efe:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8002f00:	2500      	movs	r5, #0
 8002f02:	e7e8      	b.n	8002ed6 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f04:	9600      	str	r6, [sp, #0]
 8002f06:	463b      	mov	r3, r7
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2140      	movs	r1, #64	@ 0x40
 8002f0c:	4620      	mov	r0, r4
 8002f0e:	f7ff ff56 	bl	8002dbe <UART_WaitOnFlagUntilTimeout>
 8002f12:	b910      	cbnz	r0, 8002f1a <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8002f14:	2320      	movs	r3, #32
 8002f16:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8002f18:	e004      	b.n	8002f24 <HAL_UART_Transmit+0xc0>
      huart->gState = HAL_UART_STATE_READY;
 8002f1a:	2320      	movs	r3, #32
 8002f1c:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8002f1e:	2003      	movs	r0, #3
 8002f20:	e000      	b.n	8002f24 <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 8002f22:	2002      	movs	r0, #2
}
 8002f24:	b002      	add	sp, #8
 8002f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002f2a <UART_CheckIdleState>:
{
 8002f2a:	b510      	push	{r4, lr}
 8002f2c:	b082      	sub	sp, #8
 8002f2e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f30:	2300      	movs	r3, #0
 8002f32:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8002f36:	f7fe fcd3 	bl	80018e0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f3a:	6823      	ldr	r3, [r4, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f013 0f08 	tst.w	r3, #8
 8002f42:	d10a      	bne.n	8002f5a <UART_CheckIdleState+0x30>
  huart->gState = HAL_UART_STATE_READY;
 8002f44:	2320      	movs	r3, #32
 8002f46:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002f48:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f50:	6660      	str	r0, [r4, #100]	@ 0x64
  __HAL_UNLOCK(huart);
 8002f52:	f884 0078 	strb.w	r0, [r4, #120]	@ 0x78
}
 8002f56:	b002      	add	sp, #8
 8002f58:	bd10      	pop	{r4, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f5a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	4603      	mov	r3, r0
 8002f62:	2200      	movs	r2, #0
 8002f64:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002f68:	4620      	mov	r0, r4
 8002f6a:	f7ff ff28 	bl	8002dbe <UART_WaitOnFlagUntilTimeout>
 8002f6e:	2800      	cmp	r0, #0
 8002f70:	d0e8      	beq.n	8002f44 <UART_CheckIdleState+0x1a>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002f72:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f74:	e852 3f00 	ldrex	r3, [r2]
 8002f78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f7c:	e842 3100 	strex	r1, r3, [r2]
 8002f80:	2900      	cmp	r1, #0
 8002f82:	d1f6      	bne.n	8002f72 <UART_CheckIdleState+0x48>
      huart->gState = HAL_UART_STATE_READY;
 8002f84:	2320      	movs	r3, #32
 8002f86:	67e3      	str	r3, [r4, #124]	@ 0x7c
      __HAL_UNLOCK(huart);
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
      return HAL_TIMEOUT;
 8002f8e:	2003      	movs	r0, #3
 8002f90:	e7e1      	b.n	8002f56 <UART_CheckIdleState+0x2c>

08002f92 <HAL_UART_Init>:
  if (huart == NULL)
 8002f92:	b368      	cbz	r0, 8002ff0 <HAL_UART_Init+0x5e>
{
 8002f94:	b510      	push	{r4, lr}
 8002f96:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002f98:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8002f9a:	b303      	cbz	r3, 8002fde <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8002f9c:	2324      	movs	r3, #36	@ 0x24
 8002f9e:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8002fa0:	6822      	ldr	r2, [r4, #0]
 8002fa2:	6813      	ldr	r3, [r2, #0]
 8002fa4:	f023 0301 	bic.w	r3, r3, #1
 8002fa8:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002faa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002fac:	b9e3      	cbnz	r3, 8002fe8 <HAL_UART_Init+0x56>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fae:	4620      	mov	r0, r4
 8002fb0:	f7ff fd0c 	bl	80029cc <UART_SetConfig>
 8002fb4:	2801      	cmp	r0, #1
 8002fb6:	d011      	beq.n	8002fdc <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fb8:	6822      	ldr	r2, [r4, #0]
 8002fba:	6853      	ldr	r3, [r2, #4]
 8002fbc:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8002fc0:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fc2:	6822      	ldr	r2, [r4, #0]
 8002fc4:	6893      	ldr	r3, [r2, #8]
 8002fc6:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8002fca:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002fcc:	6822      	ldr	r2, [r4, #0]
 8002fce:	6813      	ldr	r3, [r2, #0]
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002fd6:	4620      	mov	r0, r4
 8002fd8:	f7ff ffa7 	bl	8002f2a <UART_CheckIdleState>
}
 8002fdc:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002fde:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8002fe2:	f7fe fafb 	bl	80015dc <HAL_UART_MspInit>
 8002fe6:	e7d9      	b.n	8002f9c <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8002fe8:	4620      	mov	r0, r4
 8002fea:	f7ff fe83 	bl	8002cf4 <UART_AdvFeatureConfig>
 8002fee:	e7de      	b.n	8002fae <HAL_UART_Init+0x1c>
    return HAL_ERROR;
 8002ff0:	2001      	movs	r0, #1
}
 8002ff2:	4770      	bx	lr

08002ff4 <__cvt>:
 8002ff4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ff8:	ec57 6b10 	vmov	r6, r7, d0
 8002ffc:	2f00      	cmp	r7, #0
 8002ffe:	460c      	mov	r4, r1
 8003000:	4619      	mov	r1, r3
 8003002:	463b      	mov	r3, r7
 8003004:	bfbb      	ittet	lt
 8003006:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800300a:	461f      	movlt	r7, r3
 800300c:	2300      	movge	r3, #0
 800300e:	232d      	movlt	r3, #45	@ 0x2d
 8003010:	700b      	strb	r3, [r1, #0]
 8003012:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003014:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003018:	4691      	mov	r9, r2
 800301a:	f023 0820 	bic.w	r8, r3, #32
 800301e:	bfbc      	itt	lt
 8003020:	4632      	movlt	r2, r6
 8003022:	4616      	movlt	r6, r2
 8003024:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003028:	d005      	beq.n	8003036 <__cvt+0x42>
 800302a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800302e:	d100      	bne.n	8003032 <__cvt+0x3e>
 8003030:	3401      	adds	r4, #1
 8003032:	2102      	movs	r1, #2
 8003034:	e000      	b.n	8003038 <__cvt+0x44>
 8003036:	2103      	movs	r1, #3
 8003038:	ab03      	add	r3, sp, #12
 800303a:	9301      	str	r3, [sp, #4]
 800303c:	ab02      	add	r3, sp, #8
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	ec47 6b10 	vmov	d0, r6, r7
 8003044:	4653      	mov	r3, sl
 8003046:	4622      	mov	r2, r4
 8003048:	f000 ff3e 	bl	8003ec8 <_dtoa_r>
 800304c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003050:	4605      	mov	r5, r0
 8003052:	d119      	bne.n	8003088 <__cvt+0x94>
 8003054:	f019 0f01 	tst.w	r9, #1
 8003058:	d00e      	beq.n	8003078 <__cvt+0x84>
 800305a:	eb00 0904 	add.w	r9, r0, r4
 800305e:	2200      	movs	r2, #0
 8003060:	2300      	movs	r3, #0
 8003062:	4630      	mov	r0, r6
 8003064:	4639      	mov	r1, r7
 8003066:	f7fd fd4f 	bl	8000b08 <__aeabi_dcmpeq>
 800306a:	b108      	cbz	r0, 8003070 <__cvt+0x7c>
 800306c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003070:	2230      	movs	r2, #48	@ 0x30
 8003072:	9b03      	ldr	r3, [sp, #12]
 8003074:	454b      	cmp	r3, r9
 8003076:	d31e      	bcc.n	80030b6 <__cvt+0xc2>
 8003078:	9b03      	ldr	r3, [sp, #12]
 800307a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800307c:	1b5b      	subs	r3, r3, r5
 800307e:	4628      	mov	r0, r5
 8003080:	6013      	str	r3, [r2, #0]
 8003082:	b004      	add	sp, #16
 8003084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003088:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800308c:	eb00 0904 	add.w	r9, r0, r4
 8003090:	d1e5      	bne.n	800305e <__cvt+0x6a>
 8003092:	7803      	ldrb	r3, [r0, #0]
 8003094:	2b30      	cmp	r3, #48	@ 0x30
 8003096:	d10a      	bne.n	80030ae <__cvt+0xba>
 8003098:	2200      	movs	r2, #0
 800309a:	2300      	movs	r3, #0
 800309c:	4630      	mov	r0, r6
 800309e:	4639      	mov	r1, r7
 80030a0:	f7fd fd32 	bl	8000b08 <__aeabi_dcmpeq>
 80030a4:	b918      	cbnz	r0, 80030ae <__cvt+0xba>
 80030a6:	f1c4 0401 	rsb	r4, r4, #1
 80030aa:	f8ca 4000 	str.w	r4, [sl]
 80030ae:	f8da 3000 	ldr.w	r3, [sl]
 80030b2:	4499      	add	r9, r3
 80030b4:	e7d3      	b.n	800305e <__cvt+0x6a>
 80030b6:	1c59      	adds	r1, r3, #1
 80030b8:	9103      	str	r1, [sp, #12]
 80030ba:	701a      	strb	r2, [r3, #0]
 80030bc:	e7d9      	b.n	8003072 <__cvt+0x7e>

080030be <__exponent>:
 80030be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030c0:	2900      	cmp	r1, #0
 80030c2:	bfba      	itte	lt
 80030c4:	4249      	neglt	r1, r1
 80030c6:	232d      	movlt	r3, #45	@ 0x2d
 80030c8:	232b      	movge	r3, #43	@ 0x2b
 80030ca:	2909      	cmp	r1, #9
 80030cc:	7002      	strb	r2, [r0, #0]
 80030ce:	7043      	strb	r3, [r0, #1]
 80030d0:	dd29      	ble.n	8003126 <__exponent+0x68>
 80030d2:	f10d 0307 	add.w	r3, sp, #7
 80030d6:	461d      	mov	r5, r3
 80030d8:	270a      	movs	r7, #10
 80030da:	461a      	mov	r2, r3
 80030dc:	fbb1 f6f7 	udiv	r6, r1, r7
 80030e0:	fb07 1416 	mls	r4, r7, r6, r1
 80030e4:	3430      	adds	r4, #48	@ 0x30
 80030e6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80030ea:	460c      	mov	r4, r1
 80030ec:	2c63      	cmp	r4, #99	@ 0x63
 80030ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80030f2:	4631      	mov	r1, r6
 80030f4:	dcf1      	bgt.n	80030da <__exponent+0x1c>
 80030f6:	3130      	adds	r1, #48	@ 0x30
 80030f8:	1e94      	subs	r4, r2, #2
 80030fa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80030fe:	1c41      	adds	r1, r0, #1
 8003100:	4623      	mov	r3, r4
 8003102:	42ab      	cmp	r3, r5
 8003104:	d30a      	bcc.n	800311c <__exponent+0x5e>
 8003106:	f10d 0309 	add.w	r3, sp, #9
 800310a:	1a9b      	subs	r3, r3, r2
 800310c:	42ac      	cmp	r4, r5
 800310e:	bf88      	it	hi
 8003110:	2300      	movhi	r3, #0
 8003112:	3302      	adds	r3, #2
 8003114:	4403      	add	r3, r0
 8003116:	1a18      	subs	r0, r3, r0
 8003118:	b003      	add	sp, #12
 800311a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800311c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003120:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003124:	e7ed      	b.n	8003102 <__exponent+0x44>
 8003126:	2330      	movs	r3, #48	@ 0x30
 8003128:	3130      	adds	r1, #48	@ 0x30
 800312a:	7083      	strb	r3, [r0, #2]
 800312c:	70c1      	strb	r1, [r0, #3]
 800312e:	1d03      	adds	r3, r0, #4
 8003130:	e7f1      	b.n	8003116 <__exponent+0x58>
	...

08003134 <_printf_float>:
 8003134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003138:	b08d      	sub	sp, #52	@ 0x34
 800313a:	460c      	mov	r4, r1
 800313c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003140:	4616      	mov	r6, r2
 8003142:	461f      	mov	r7, r3
 8003144:	4605      	mov	r5, r0
 8003146:	f000 fdbd 	bl	8003cc4 <_localeconv_r>
 800314a:	6803      	ldr	r3, [r0, #0]
 800314c:	9304      	str	r3, [sp, #16]
 800314e:	4618      	mov	r0, r3
 8003150:	f7fd f8ae 	bl	80002b0 <strlen>
 8003154:	2300      	movs	r3, #0
 8003156:	930a      	str	r3, [sp, #40]	@ 0x28
 8003158:	f8d8 3000 	ldr.w	r3, [r8]
 800315c:	9005      	str	r0, [sp, #20]
 800315e:	3307      	adds	r3, #7
 8003160:	f023 0307 	bic.w	r3, r3, #7
 8003164:	f103 0208 	add.w	r2, r3, #8
 8003168:	f894 a018 	ldrb.w	sl, [r4, #24]
 800316c:	f8d4 b000 	ldr.w	fp, [r4]
 8003170:	f8c8 2000 	str.w	r2, [r8]
 8003174:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003178:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800317c:	9307      	str	r3, [sp, #28]
 800317e:	f8cd 8018 	str.w	r8, [sp, #24]
 8003182:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003186:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800318a:	4b9c      	ldr	r3, [pc, #624]	@ (80033fc <_printf_float+0x2c8>)
 800318c:	f04f 32ff 	mov.w	r2, #4294967295
 8003190:	f7fd fcec 	bl	8000b6c <__aeabi_dcmpun>
 8003194:	bb70      	cbnz	r0, 80031f4 <_printf_float+0xc0>
 8003196:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800319a:	4b98      	ldr	r3, [pc, #608]	@ (80033fc <_printf_float+0x2c8>)
 800319c:	f04f 32ff 	mov.w	r2, #4294967295
 80031a0:	f7fd fcc6 	bl	8000b30 <__aeabi_dcmple>
 80031a4:	bb30      	cbnz	r0, 80031f4 <_printf_float+0xc0>
 80031a6:	2200      	movs	r2, #0
 80031a8:	2300      	movs	r3, #0
 80031aa:	4640      	mov	r0, r8
 80031ac:	4649      	mov	r1, r9
 80031ae:	f7fd fcb5 	bl	8000b1c <__aeabi_dcmplt>
 80031b2:	b110      	cbz	r0, 80031ba <_printf_float+0x86>
 80031b4:	232d      	movs	r3, #45	@ 0x2d
 80031b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80031ba:	4a91      	ldr	r2, [pc, #580]	@ (8003400 <_printf_float+0x2cc>)
 80031bc:	4b91      	ldr	r3, [pc, #580]	@ (8003404 <_printf_float+0x2d0>)
 80031be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80031c2:	bf8c      	ite	hi
 80031c4:	4690      	movhi	r8, r2
 80031c6:	4698      	movls	r8, r3
 80031c8:	2303      	movs	r3, #3
 80031ca:	6123      	str	r3, [r4, #16]
 80031cc:	f02b 0304 	bic.w	r3, fp, #4
 80031d0:	6023      	str	r3, [r4, #0]
 80031d2:	f04f 0900 	mov.w	r9, #0
 80031d6:	9700      	str	r7, [sp, #0]
 80031d8:	4633      	mov	r3, r6
 80031da:	aa0b      	add	r2, sp, #44	@ 0x2c
 80031dc:	4621      	mov	r1, r4
 80031de:	4628      	mov	r0, r5
 80031e0:	f000 f9d2 	bl	8003588 <_printf_common>
 80031e4:	3001      	adds	r0, #1
 80031e6:	f040 808d 	bne.w	8003304 <_printf_float+0x1d0>
 80031ea:	f04f 30ff 	mov.w	r0, #4294967295
 80031ee:	b00d      	add	sp, #52	@ 0x34
 80031f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031f4:	4642      	mov	r2, r8
 80031f6:	464b      	mov	r3, r9
 80031f8:	4640      	mov	r0, r8
 80031fa:	4649      	mov	r1, r9
 80031fc:	f7fd fcb6 	bl	8000b6c <__aeabi_dcmpun>
 8003200:	b140      	cbz	r0, 8003214 <_printf_float+0xe0>
 8003202:	464b      	mov	r3, r9
 8003204:	2b00      	cmp	r3, #0
 8003206:	bfbc      	itt	lt
 8003208:	232d      	movlt	r3, #45	@ 0x2d
 800320a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800320e:	4a7e      	ldr	r2, [pc, #504]	@ (8003408 <_printf_float+0x2d4>)
 8003210:	4b7e      	ldr	r3, [pc, #504]	@ (800340c <_printf_float+0x2d8>)
 8003212:	e7d4      	b.n	80031be <_printf_float+0x8a>
 8003214:	6863      	ldr	r3, [r4, #4]
 8003216:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800321a:	9206      	str	r2, [sp, #24]
 800321c:	1c5a      	adds	r2, r3, #1
 800321e:	d13b      	bne.n	8003298 <_printf_float+0x164>
 8003220:	2306      	movs	r3, #6
 8003222:	6063      	str	r3, [r4, #4]
 8003224:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003228:	2300      	movs	r3, #0
 800322a:	6022      	str	r2, [r4, #0]
 800322c:	9303      	str	r3, [sp, #12]
 800322e:	ab0a      	add	r3, sp, #40	@ 0x28
 8003230:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003234:	ab09      	add	r3, sp, #36	@ 0x24
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	6861      	ldr	r1, [r4, #4]
 800323a:	ec49 8b10 	vmov	d0, r8, r9
 800323e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003242:	4628      	mov	r0, r5
 8003244:	f7ff fed6 	bl	8002ff4 <__cvt>
 8003248:	9b06      	ldr	r3, [sp, #24]
 800324a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800324c:	2b47      	cmp	r3, #71	@ 0x47
 800324e:	4680      	mov	r8, r0
 8003250:	d129      	bne.n	80032a6 <_printf_float+0x172>
 8003252:	1cc8      	adds	r0, r1, #3
 8003254:	db02      	blt.n	800325c <_printf_float+0x128>
 8003256:	6863      	ldr	r3, [r4, #4]
 8003258:	4299      	cmp	r1, r3
 800325a:	dd41      	ble.n	80032e0 <_printf_float+0x1ac>
 800325c:	f1aa 0a02 	sub.w	sl, sl, #2
 8003260:	fa5f fa8a 	uxtb.w	sl, sl
 8003264:	3901      	subs	r1, #1
 8003266:	4652      	mov	r2, sl
 8003268:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800326c:	9109      	str	r1, [sp, #36]	@ 0x24
 800326e:	f7ff ff26 	bl	80030be <__exponent>
 8003272:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003274:	1813      	adds	r3, r2, r0
 8003276:	2a01      	cmp	r2, #1
 8003278:	4681      	mov	r9, r0
 800327a:	6123      	str	r3, [r4, #16]
 800327c:	dc02      	bgt.n	8003284 <_printf_float+0x150>
 800327e:	6822      	ldr	r2, [r4, #0]
 8003280:	07d2      	lsls	r2, r2, #31
 8003282:	d501      	bpl.n	8003288 <_printf_float+0x154>
 8003284:	3301      	adds	r3, #1
 8003286:	6123      	str	r3, [r4, #16]
 8003288:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0a2      	beq.n	80031d6 <_printf_float+0xa2>
 8003290:	232d      	movs	r3, #45	@ 0x2d
 8003292:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003296:	e79e      	b.n	80031d6 <_printf_float+0xa2>
 8003298:	9a06      	ldr	r2, [sp, #24]
 800329a:	2a47      	cmp	r2, #71	@ 0x47
 800329c:	d1c2      	bne.n	8003224 <_printf_float+0xf0>
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1c0      	bne.n	8003224 <_printf_float+0xf0>
 80032a2:	2301      	movs	r3, #1
 80032a4:	e7bd      	b.n	8003222 <_printf_float+0xee>
 80032a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80032aa:	d9db      	bls.n	8003264 <_printf_float+0x130>
 80032ac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80032b0:	d118      	bne.n	80032e4 <_printf_float+0x1b0>
 80032b2:	2900      	cmp	r1, #0
 80032b4:	6863      	ldr	r3, [r4, #4]
 80032b6:	dd0b      	ble.n	80032d0 <_printf_float+0x19c>
 80032b8:	6121      	str	r1, [r4, #16]
 80032ba:	b913      	cbnz	r3, 80032c2 <_printf_float+0x18e>
 80032bc:	6822      	ldr	r2, [r4, #0]
 80032be:	07d0      	lsls	r0, r2, #31
 80032c0:	d502      	bpl.n	80032c8 <_printf_float+0x194>
 80032c2:	3301      	adds	r3, #1
 80032c4:	440b      	add	r3, r1
 80032c6:	6123      	str	r3, [r4, #16]
 80032c8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80032ca:	f04f 0900 	mov.w	r9, #0
 80032ce:	e7db      	b.n	8003288 <_printf_float+0x154>
 80032d0:	b913      	cbnz	r3, 80032d8 <_printf_float+0x1a4>
 80032d2:	6822      	ldr	r2, [r4, #0]
 80032d4:	07d2      	lsls	r2, r2, #31
 80032d6:	d501      	bpl.n	80032dc <_printf_float+0x1a8>
 80032d8:	3302      	adds	r3, #2
 80032da:	e7f4      	b.n	80032c6 <_printf_float+0x192>
 80032dc:	2301      	movs	r3, #1
 80032de:	e7f2      	b.n	80032c6 <_printf_float+0x192>
 80032e0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80032e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80032e6:	4299      	cmp	r1, r3
 80032e8:	db05      	blt.n	80032f6 <_printf_float+0x1c2>
 80032ea:	6823      	ldr	r3, [r4, #0]
 80032ec:	6121      	str	r1, [r4, #16]
 80032ee:	07d8      	lsls	r0, r3, #31
 80032f0:	d5ea      	bpl.n	80032c8 <_printf_float+0x194>
 80032f2:	1c4b      	adds	r3, r1, #1
 80032f4:	e7e7      	b.n	80032c6 <_printf_float+0x192>
 80032f6:	2900      	cmp	r1, #0
 80032f8:	bfd4      	ite	le
 80032fa:	f1c1 0202 	rsble	r2, r1, #2
 80032fe:	2201      	movgt	r2, #1
 8003300:	4413      	add	r3, r2
 8003302:	e7e0      	b.n	80032c6 <_printf_float+0x192>
 8003304:	6823      	ldr	r3, [r4, #0]
 8003306:	055a      	lsls	r2, r3, #21
 8003308:	d407      	bmi.n	800331a <_printf_float+0x1e6>
 800330a:	6923      	ldr	r3, [r4, #16]
 800330c:	4642      	mov	r2, r8
 800330e:	4631      	mov	r1, r6
 8003310:	4628      	mov	r0, r5
 8003312:	47b8      	blx	r7
 8003314:	3001      	adds	r0, #1
 8003316:	d12b      	bne.n	8003370 <_printf_float+0x23c>
 8003318:	e767      	b.n	80031ea <_printf_float+0xb6>
 800331a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800331e:	f240 80dd 	bls.w	80034dc <_printf_float+0x3a8>
 8003322:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003326:	2200      	movs	r2, #0
 8003328:	2300      	movs	r3, #0
 800332a:	f7fd fbed 	bl	8000b08 <__aeabi_dcmpeq>
 800332e:	2800      	cmp	r0, #0
 8003330:	d033      	beq.n	800339a <_printf_float+0x266>
 8003332:	4a37      	ldr	r2, [pc, #220]	@ (8003410 <_printf_float+0x2dc>)
 8003334:	2301      	movs	r3, #1
 8003336:	4631      	mov	r1, r6
 8003338:	4628      	mov	r0, r5
 800333a:	47b8      	blx	r7
 800333c:	3001      	adds	r0, #1
 800333e:	f43f af54 	beq.w	80031ea <_printf_float+0xb6>
 8003342:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003346:	4543      	cmp	r3, r8
 8003348:	db02      	blt.n	8003350 <_printf_float+0x21c>
 800334a:	6823      	ldr	r3, [r4, #0]
 800334c:	07d8      	lsls	r0, r3, #31
 800334e:	d50f      	bpl.n	8003370 <_printf_float+0x23c>
 8003350:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003354:	4631      	mov	r1, r6
 8003356:	4628      	mov	r0, r5
 8003358:	47b8      	blx	r7
 800335a:	3001      	adds	r0, #1
 800335c:	f43f af45 	beq.w	80031ea <_printf_float+0xb6>
 8003360:	f04f 0900 	mov.w	r9, #0
 8003364:	f108 38ff 	add.w	r8, r8, #4294967295
 8003368:	f104 0a1a 	add.w	sl, r4, #26
 800336c:	45c8      	cmp	r8, r9
 800336e:	dc09      	bgt.n	8003384 <_printf_float+0x250>
 8003370:	6823      	ldr	r3, [r4, #0]
 8003372:	079b      	lsls	r3, r3, #30
 8003374:	f100 8103 	bmi.w	800357e <_printf_float+0x44a>
 8003378:	68e0      	ldr	r0, [r4, #12]
 800337a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800337c:	4298      	cmp	r0, r3
 800337e:	bfb8      	it	lt
 8003380:	4618      	movlt	r0, r3
 8003382:	e734      	b.n	80031ee <_printf_float+0xba>
 8003384:	2301      	movs	r3, #1
 8003386:	4652      	mov	r2, sl
 8003388:	4631      	mov	r1, r6
 800338a:	4628      	mov	r0, r5
 800338c:	47b8      	blx	r7
 800338e:	3001      	adds	r0, #1
 8003390:	f43f af2b 	beq.w	80031ea <_printf_float+0xb6>
 8003394:	f109 0901 	add.w	r9, r9, #1
 8003398:	e7e8      	b.n	800336c <_printf_float+0x238>
 800339a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800339c:	2b00      	cmp	r3, #0
 800339e:	dc39      	bgt.n	8003414 <_printf_float+0x2e0>
 80033a0:	4a1b      	ldr	r2, [pc, #108]	@ (8003410 <_printf_float+0x2dc>)
 80033a2:	2301      	movs	r3, #1
 80033a4:	4631      	mov	r1, r6
 80033a6:	4628      	mov	r0, r5
 80033a8:	47b8      	blx	r7
 80033aa:	3001      	adds	r0, #1
 80033ac:	f43f af1d 	beq.w	80031ea <_printf_float+0xb6>
 80033b0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80033b4:	ea59 0303 	orrs.w	r3, r9, r3
 80033b8:	d102      	bne.n	80033c0 <_printf_float+0x28c>
 80033ba:	6823      	ldr	r3, [r4, #0]
 80033bc:	07d9      	lsls	r1, r3, #31
 80033be:	d5d7      	bpl.n	8003370 <_printf_float+0x23c>
 80033c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80033c4:	4631      	mov	r1, r6
 80033c6:	4628      	mov	r0, r5
 80033c8:	47b8      	blx	r7
 80033ca:	3001      	adds	r0, #1
 80033cc:	f43f af0d 	beq.w	80031ea <_printf_float+0xb6>
 80033d0:	f04f 0a00 	mov.w	sl, #0
 80033d4:	f104 0b1a 	add.w	fp, r4, #26
 80033d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80033da:	425b      	negs	r3, r3
 80033dc:	4553      	cmp	r3, sl
 80033de:	dc01      	bgt.n	80033e4 <_printf_float+0x2b0>
 80033e0:	464b      	mov	r3, r9
 80033e2:	e793      	b.n	800330c <_printf_float+0x1d8>
 80033e4:	2301      	movs	r3, #1
 80033e6:	465a      	mov	r2, fp
 80033e8:	4631      	mov	r1, r6
 80033ea:	4628      	mov	r0, r5
 80033ec:	47b8      	blx	r7
 80033ee:	3001      	adds	r0, #1
 80033f0:	f43f aefb 	beq.w	80031ea <_printf_float+0xb6>
 80033f4:	f10a 0a01 	add.w	sl, sl, #1
 80033f8:	e7ee      	b.n	80033d8 <_printf_float+0x2a4>
 80033fa:	bf00      	nop
 80033fc:	7fefffff 	.word	0x7fefffff
 8003400:	08005b1c 	.word	0x08005b1c
 8003404:	08005b18 	.word	0x08005b18
 8003408:	08005b24 	.word	0x08005b24
 800340c:	08005b20 	.word	0x08005b20
 8003410:	08005b28 	.word	0x08005b28
 8003414:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003416:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800341a:	4553      	cmp	r3, sl
 800341c:	bfa8      	it	ge
 800341e:	4653      	movge	r3, sl
 8003420:	2b00      	cmp	r3, #0
 8003422:	4699      	mov	r9, r3
 8003424:	dc36      	bgt.n	8003494 <_printf_float+0x360>
 8003426:	f04f 0b00 	mov.w	fp, #0
 800342a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800342e:	f104 021a 	add.w	r2, r4, #26
 8003432:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003434:	9306      	str	r3, [sp, #24]
 8003436:	eba3 0309 	sub.w	r3, r3, r9
 800343a:	455b      	cmp	r3, fp
 800343c:	dc31      	bgt.n	80034a2 <_printf_float+0x36e>
 800343e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003440:	459a      	cmp	sl, r3
 8003442:	dc3a      	bgt.n	80034ba <_printf_float+0x386>
 8003444:	6823      	ldr	r3, [r4, #0]
 8003446:	07da      	lsls	r2, r3, #31
 8003448:	d437      	bmi.n	80034ba <_printf_float+0x386>
 800344a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800344c:	ebaa 0903 	sub.w	r9, sl, r3
 8003450:	9b06      	ldr	r3, [sp, #24]
 8003452:	ebaa 0303 	sub.w	r3, sl, r3
 8003456:	4599      	cmp	r9, r3
 8003458:	bfa8      	it	ge
 800345a:	4699      	movge	r9, r3
 800345c:	f1b9 0f00 	cmp.w	r9, #0
 8003460:	dc33      	bgt.n	80034ca <_printf_float+0x396>
 8003462:	f04f 0800 	mov.w	r8, #0
 8003466:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800346a:	f104 0b1a 	add.w	fp, r4, #26
 800346e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003470:	ebaa 0303 	sub.w	r3, sl, r3
 8003474:	eba3 0309 	sub.w	r3, r3, r9
 8003478:	4543      	cmp	r3, r8
 800347a:	f77f af79 	ble.w	8003370 <_printf_float+0x23c>
 800347e:	2301      	movs	r3, #1
 8003480:	465a      	mov	r2, fp
 8003482:	4631      	mov	r1, r6
 8003484:	4628      	mov	r0, r5
 8003486:	47b8      	blx	r7
 8003488:	3001      	adds	r0, #1
 800348a:	f43f aeae 	beq.w	80031ea <_printf_float+0xb6>
 800348e:	f108 0801 	add.w	r8, r8, #1
 8003492:	e7ec      	b.n	800346e <_printf_float+0x33a>
 8003494:	4642      	mov	r2, r8
 8003496:	4631      	mov	r1, r6
 8003498:	4628      	mov	r0, r5
 800349a:	47b8      	blx	r7
 800349c:	3001      	adds	r0, #1
 800349e:	d1c2      	bne.n	8003426 <_printf_float+0x2f2>
 80034a0:	e6a3      	b.n	80031ea <_printf_float+0xb6>
 80034a2:	2301      	movs	r3, #1
 80034a4:	4631      	mov	r1, r6
 80034a6:	4628      	mov	r0, r5
 80034a8:	9206      	str	r2, [sp, #24]
 80034aa:	47b8      	blx	r7
 80034ac:	3001      	adds	r0, #1
 80034ae:	f43f ae9c 	beq.w	80031ea <_printf_float+0xb6>
 80034b2:	9a06      	ldr	r2, [sp, #24]
 80034b4:	f10b 0b01 	add.w	fp, fp, #1
 80034b8:	e7bb      	b.n	8003432 <_printf_float+0x2fe>
 80034ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80034be:	4631      	mov	r1, r6
 80034c0:	4628      	mov	r0, r5
 80034c2:	47b8      	blx	r7
 80034c4:	3001      	adds	r0, #1
 80034c6:	d1c0      	bne.n	800344a <_printf_float+0x316>
 80034c8:	e68f      	b.n	80031ea <_printf_float+0xb6>
 80034ca:	9a06      	ldr	r2, [sp, #24]
 80034cc:	464b      	mov	r3, r9
 80034ce:	4442      	add	r2, r8
 80034d0:	4631      	mov	r1, r6
 80034d2:	4628      	mov	r0, r5
 80034d4:	47b8      	blx	r7
 80034d6:	3001      	adds	r0, #1
 80034d8:	d1c3      	bne.n	8003462 <_printf_float+0x32e>
 80034da:	e686      	b.n	80031ea <_printf_float+0xb6>
 80034dc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80034e0:	f1ba 0f01 	cmp.w	sl, #1
 80034e4:	dc01      	bgt.n	80034ea <_printf_float+0x3b6>
 80034e6:	07db      	lsls	r3, r3, #31
 80034e8:	d536      	bpl.n	8003558 <_printf_float+0x424>
 80034ea:	2301      	movs	r3, #1
 80034ec:	4642      	mov	r2, r8
 80034ee:	4631      	mov	r1, r6
 80034f0:	4628      	mov	r0, r5
 80034f2:	47b8      	blx	r7
 80034f4:	3001      	adds	r0, #1
 80034f6:	f43f ae78 	beq.w	80031ea <_printf_float+0xb6>
 80034fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80034fe:	4631      	mov	r1, r6
 8003500:	4628      	mov	r0, r5
 8003502:	47b8      	blx	r7
 8003504:	3001      	adds	r0, #1
 8003506:	f43f ae70 	beq.w	80031ea <_printf_float+0xb6>
 800350a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800350e:	2200      	movs	r2, #0
 8003510:	2300      	movs	r3, #0
 8003512:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003516:	f7fd faf7 	bl	8000b08 <__aeabi_dcmpeq>
 800351a:	b9c0      	cbnz	r0, 800354e <_printf_float+0x41a>
 800351c:	4653      	mov	r3, sl
 800351e:	f108 0201 	add.w	r2, r8, #1
 8003522:	4631      	mov	r1, r6
 8003524:	4628      	mov	r0, r5
 8003526:	47b8      	blx	r7
 8003528:	3001      	adds	r0, #1
 800352a:	d10c      	bne.n	8003546 <_printf_float+0x412>
 800352c:	e65d      	b.n	80031ea <_printf_float+0xb6>
 800352e:	2301      	movs	r3, #1
 8003530:	465a      	mov	r2, fp
 8003532:	4631      	mov	r1, r6
 8003534:	4628      	mov	r0, r5
 8003536:	47b8      	blx	r7
 8003538:	3001      	adds	r0, #1
 800353a:	f43f ae56 	beq.w	80031ea <_printf_float+0xb6>
 800353e:	f108 0801 	add.w	r8, r8, #1
 8003542:	45d0      	cmp	r8, sl
 8003544:	dbf3      	blt.n	800352e <_printf_float+0x3fa>
 8003546:	464b      	mov	r3, r9
 8003548:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800354c:	e6df      	b.n	800330e <_printf_float+0x1da>
 800354e:	f04f 0800 	mov.w	r8, #0
 8003552:	f104 0b1a 	add.w	fp, r4, #26
 8003556:	e7f4      	b.n	8003542 <_printf_float+0x40e>
 8003558:	2301      	movs	r3, #1
 800355a:	4642      	mov	r2, r8
 800355c:	e7e1      	b.n	8003522 <_printf_float+0x3ee>
 800355e:	2301      	movs	r3, #1
 8003560:	464a      	mov	r2, r9
 8003562:	4631      	mov	r1, r6
 8003564:	4628      	mov	r0, r5
 8003566:	47b8      	blx	r7
 8003568:	3001      	adds	r0, #1
 800356a:	f43f ae3e 	beq.w	80031ea <_printf_float+0xb6>
 800356e:	f108 0801 	add.w	r8, r8, #1
 8003572:	68e3      	ldr	r3, [r4, #12]
 8003574:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003576:	1a5b      	subs	r3, r3, r1
 8003578:	4543      	cmp	r3, r8
 800357a:	dcf0      	bgt.n	800355e <_printf_float+0x42a>
 800357c:	e6fc      	b.n	8003378 <_printf_float+0x244>
 800357e:	f04f 0800 	mov.w	r8, #0
 8003582:	f104 0919 	add.w	r9, r4, #25
 8003586:	e7f4      	b.n	8003572 <_printf_float+0x43e>

08003588 <_printf_common>:
 8003588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800358c:	4616      	mov	r6, r2
 800358e:	4698      	mov	r8, r3
 8003590:	688a      	ldr	r2, [r1, #8]
 8003592:	690b      	ldr	r3, [r1, #16]
 8003594:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003598:	4293      	cmp	r3, r2
 800359a:	bfb8      	it	lt
 800359c:	4613      	movlt	r3, r2
 800359e:	6033      	str	r3, [r6, #0]
 80035a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80035a4:	4607      	mov	r7, r0
 80035a6:	460c      	mov	r4, r1
 80035a8:	b10a      	cbz	r2, 80035ae <_printf_common+0x26>
 80035aa:	3301      	adds	r3, #1
 80035ac:	6033      	str	r3, [r6, #0]
 80035ae:	6823      	ldr	r3, [r4, #0]
 80035b0:	0699      	lsls	r1, r3, #26
 80035b2:	bf42      	ittt	mi
 80035b4:	6833      	ldrmi	r3, [r6, #0]
 80035b6:	3302      	addmi	r3, #2
 80035b8:	6033      	strmi	r3, [r6, #0]
 80035ba:	6825      	ldr	r5, [r4, #0]
 80035bc:	f015 0506 	ands.w	r5, r5, #6
 80035c0:	d106      	bne.n	80035d0 <_printf_common+0x48>
 80035c2:	f104 0a19 	add.w	sl, r4, #25
 80035c6:	68e3      	ldr	r3, [r4, #12]
 80035c8:	6832      	ldr	r2, [r6, #0]
 80035ca:	1a9b      	subs	r3, r3, r2
 80035cc:	42ab      	cmp	r3, r5
 80035ce:	dc26      	bgt.n	800361e <_printf_common+0x96>
 80035d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80035d4:	6822      	ldr	r2, [r4, #0]
 80035d6:	3b00      	subs	r3, #0
 80035d8:	bf18      	it	ne
 80035da:	2301      	movne	r3, #1
 80035dc:	0692      	lsls	r2, r2, #26
 80035de:	d42b      	bmi.n	8003638 <_printf_common+0xb0>
 80035e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80035e4:	4641      	mov	r1, r8
 80035e6:	4638      	mov	r0, r7
 80035e8:	47c8      	blx	r9
 80035ea:	3001      	adds	r0, #1
 80035ec:	d01e      	beq.n	800362c <_printf_common+0xa4>
 80035ee:	6823      	ldr	r3, [r4, #0]
 80035f0:	6922      	ldr	r2, [r4, #16]
 80035f2:	f003 0306 	and.w	r3, r3, #6
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	bf02      	ittt	eq
 80035fa:	68e5      	ldreq	r5, [r4, #12]
 80035fc:	6833      	ldreq	r3, [r6, #0]
 80035fe:	1aed      	subeq	r5, r5, r3
 8003600:	68a3      	ldr	r3, [r4, #8]
 8003602:	bf0c      	ite	eq
 8003604:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003608:	2500      	movne	r5, #0
 800360a:	4293      	cmp	r3, r2
 800360c:	bfc4      	itt	gt
 800360e:	1a9b      	subgt	r3, r3, r2
 8003610:	18ed      	addgt	r5, r5, r3
 8003612:	2600      	movs	r6, #0
 8003614:	341a      	adds	r4, #26
 8003616:	42b5      	cmp	r5, r6
 8003618:	d11a      	bne.n	8003650 <_printf_common+0xc8>
 800361a:	2000      	movs	r0, #0
 800361c:	e008      	b.n	8003630 <_printf_common+0xa8>
 800361e:	2301      	movs	r3, #1
 8003620:	4652      	mov	r2, sl
 8003622:	4641      	mov	r1, r8
 8003624:	4638      	mov	r0, r7
 8003626:	47c8      	blx	r9
 8003628:	3001      	adds	r0, #1
 800362a:	d103      	bne.n	8003634 <_printf_common+0xac>
 800362c:	f04f 30ff 	mov.w	r0, #4294967295
 8003630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003634:	3501      	adds	r5, #1
 8003636:	e7c6      	b.n	80035c6 <_printf_common+0x3e>
 8003638:	18e1      	adds	r1, r4, r3
 800363a:	1c5a      	adds	r2, r3, #1
 800363c:	2030      	movs	r0, #48	@ 0x30
 800363e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003642:	4422      	add	r2, r4
 8003644:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003648:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800364c:	3302      	adds	r3, #2
 800364e:	e7c7      	b.n	80035e0 <_printf_common+0x58>
 8003650:	2301      	movs	r3, #1
 8003652:	4622      	mov	r2, r4
 8003654:	4641      	mov	r1, r8
 8003656:	4638      	mov	r0, r7
 8003658:	47c8      	blx	r9
 800365a:	3001      	adds	r0, #1
 800365c:	d0e6      	beq.n	800362c <_printf_common+0xa4>
 800365e:	3601      	adds	r6, #1
 8003660:	e7d9      	b.n	8003616 <_printf_common+0x8e>
	...

08003664 <_printf_i>:
 8003664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003668:	7e0f      	ldrb	r7, [r1, #24]
 800366a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800366c:	2f78      	cmp	r7, #120	@ 0x78
 800366e:	4691      	mov	r9, r2
 8003670:	4680      	mov	r8, r0
 8003672:	460c      	mov	r4, r1
 8003674:	469a      	mov	sl, r3
 8003676:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800367a:	d807      	bhi.n	800368c <_printf_i+0x28>
 800367c:	2f62      	cmp	r7, #98	@ 0x62
 800367e:	d80a      	bhi.n	8003696 <_printf_i+0x32>
 8003680:	2f00      	cmp	r7, #0
 8003682:	f000 80d1 	beq.w	8003828 <_printf_i+0x1c4>
 8003686:	2f58      	cmp	r7, #88	@ 0x58
 8003688:	f000 80b8 	beq.w	80037fc <_printf_i+0x198>
 800368c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003690:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003694:	e03a      	b.n	800370c <_printf_i+0xa8>
 8003696:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800369a:	2b15      	cmp	r3, #21
 800369c:	d8f6      	bhi.n	800368c <_printf_i+0x28>
 800369e:	a101      	add	r1, pc, #4	@ (adr r1, 80036a4 <_printf_i+0x40>)
 80036a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80036a4:	080036fd 	.word	0x080036fd
 80036a8:	08003711 	.word	0x08003711
 80036ac:	0800368d 	.word	0x0800368d
 80036b0:	0800368d 	.word	0x0800368d
 80036b4:	0800368d 	.word	0x0800368d
 80036b8:	0800368d 	.word	0x0800368d
 80036bc:	08003711 	.word	0x08003711
 80036c0:	0800368d 	.word	0x0800368d
 80036c4:	0800368d 	.word	0x0800368d
 80036c8:	0800368d 	.word	0x0800368d
 80036cc:	0800368d 	.word	0x0800368d
 80036d0:	0800380f 	.word	0x0800380f
 80036d4:	0800373b 	.word	0x0800373b
 80036d8:	080037c9 	.word	0x080037c9
 80036dc:	0800368d 	.word	0x0800368d
 80036e0:	0800368d 	.word	0x0800368d
 80036e4:	08003831 	.word	0x08003831
 80036e8:	0800368d 	.word	0x0800368d
 80036ec:	0800373b 	.word	0x0800373b
 80036f0:	0800368d 	.word	0x0800368d
 80036f4:	0800368d 	.word	0x0800368d
 80036f8:	080037d1 	.word	0x080037d1
 80036fc:	6833      	ldr	r3, [r6, #0]
 80036fe:	1d1a      	adds	r2, r3, #4
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6032      	str	r2, [r6, #0]
 8003704:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003708:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800370c:	2301      	movs	r3, #1
 800370e:	e09c      	b.n	800384a <_printf_i+0x1e6>
 8003710:	6833      	ldr	r3, [r6, #0]
 8003712:	6820      	ldr	r0, [r4, #0]
 8003714:	1d19      	adds	r1, r3, #4
 8003716:	6031      	str	r1, [r6, #0]
 8003718:	0606      	lsls	r6, r0, #24
 800371a:	d501      	bpl.n	8003720 <_printf_i+0xbc>
 800371c:	681d      	ldr	r5, [r3, #0]
 800371e:	e003      	b.n	8003728 <_printf_i+0xc4>
 8003720:	0645      	lsls	r5, r0, #25
 8003722:	d5fb      	bpl.n	800371c <_printf_i+0xb8>
 8003724:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003728:	2d00      	cmp	r5, #0
 800372a:	da03      	bge.n	8003734 <_printf_i+0xd0>
 800372c:	232d      	movs	r3, #45	@ 0x2d
 800372e:	426d      	negs	r5, r5
 8003730:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003734:	4858      	ldr	r0, [pc, #352]	@ (8003898 <_printf_i+0x234>)
 8003736:	230a      	movs	r3, #10
 8003738:	e011      	b.n	800375e <_printf_i+0xfa>
 800373a:	6821      	ldr	r1, [r4, #0]
 800373c:	6833      	ldr	r3, [r6, #0]
 800373e:	0608      	lsls	r0, r1, #24
 8003740:	f853 5b04 	ldr.w	r5, [r3], #4
 8003744:	d402      	bmi.n	800374c <_printf_i+0xe8>
 8003746:	0649      	lsls	r1, r1, #25
 8003748:	bf48      	it	mi
 800374a:	b2ad      	uxthmi	r5, r5
 800374c:	2f6f      	cmp	r7, #111	@ 0x6f
 800374e:	4852      	ldr	r0, [pc, #328]	@ (8003898 <_printf_i+0x234>)
 8003750:	6033      	str	r3, [r6, #0]
 8003752:	bf14      	ite	ne
 8003754:	230a      	movne	r3, #10
 8003756:	2308      	moveq	r3, #8
 8003758:	2100      	movs	r1, #0
 800375a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800375e:	6866      	ldr	r6, [r4, #4]
 8003760:	60a6      	str	r6, [r4, #8]
 8003762:	2e00      	cmp	r6, #0
 8003764:	db05      	blt.n	8003772 <_printf_i+0x10e>
 8003766:	6821      	ldr	r1, [r4, #0]
 8003768:	432e      	orrs	r6, r5
 800376a:	f021 0104 	bic.w	r1, r1, #4
 800376e:	6021      	str	r1, [r4, #0]
 8003770:	d04b      	beq.n	800380a <_printf_i+0x1a6>
 8003772:	4616      	mov	r6, r2
 8003774:	fbb5 f1f3 	udiv	r1, r5, r3
 8003778:	fb03 5711 	mls	r7, r3, r1, r5
 800377c:	5dc7      	ldrb	r7, [r0, r7]
 800377e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003782:	462f      	mov	r7, r5
 8003784:	42bb      	cmp	r3, r7
 8003786:	460d      	mov	r5, r1
 8003788:	d9f4      	bls.n	8003774 <_printf_i+0x110>
 800378a:	2b08      	cmp	r3, #8
 800378c:	d10b      	bne.n	80037a6 <_printf_i+0x142>
 800378e:	6823      	ldr	r3, [r4, #0]
 8003790:	07df      	lsls	r7, r3, #31
 8003792:	d508      	bpl.n	80037a6 <_printf_i+0x142>
 8003794:	6923      	ldr	r3, [r4, #16]
 8003796:	6861      	ldr	r1, [r4, #4]
 8003798:	4299      	cmp	r1, r3
 800379a:	bfde      	ittt	le
 800379c:	2330      	movle	r3, #48	@ 0x30
 800379e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80037a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80037a6:	1b92      	subs	r2, r2, r6
 80037a8:	6122      	str	r2, [r4, #16]
 80037aa:	f8cd a000 	str.w	sl, [sp]
 80037ae:	464b      	mov	r3, r9
 80037b0:	aa03      	add	r2, sp, #12
 80037b2:	4621      	mov	r1, r4
 80037b4:	4640      	mov	r0, r8
 80037b6:	f7ff fee7 	bl	8003588 <_printf_common>
 80037ba:	3001      	adds	r0, #1
 80037bc:	d14a      	bne.n	8003854 <_printf_i+0x1f0>
 80037be:	f04f 30ff 	mov.w	r0, #4294967295
 80037c2:	b004      	add	sp, #16
 80037c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037c8:	6823      	ldr	r3, [r4, #0]
 80037ca:	f043 0320 	orr.w	r3, r3, #32
 80037ce:	6023      	str	r3, [r4, #0]
 80037d0:	4832      	ldr	r0, [pc, #200]	@ (800389c <_printf_i+0x238>)
 80037d2:	2778      	movs	r7, #120	@ 0x78
 80037d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80037d8:	6823      	ldr	r3, [r4, #0]
 80037da:	6831      	ldr	r1, [r6, #0]
 80037dc:	061f      	lsls	r7, r3, #24
 80037de:	f851 5b04 	ldr.w	r5, [r1], #4
 80037e2:	d402      	bmi.n	80037ea <_printf_i+0x186>
 80037e4:	065f      	lsls	r7, r3, #25
 80037e6:	bf48      	it	mi
 80037e8:	b2ad      	uxthmi	r5, r5
 80037ea:	6031      	str	r1, [r6, #0]
 80037ec:	07d9      	lsls	r1, r3, #31
 80037ee:	bf44      	itt	mi
 80037f0:	f043 0320 	orrmi.w	r3, r3, #32
 80037f4:	6023      	strmi	r3, [r4, #0]
 80037f6:	b11d      	cbz	r5, 8003800 <_printf_i+0x19c>
 80037f8:	2310      	movs	r3, #16
 80037fa:	e7ad      	b.n	8003758 <_printf_i+0xf4>
 80037fc:	4826      	ldr	r0, [pc, #152]	@ (8003898 <_printf_i+0x234>)
 80037fe:	e7e9      	b.n	80037d4 <_printf_i+0x170>
 8003800:	6823      	ldr	r3, [r4, #0]
 8003802:	f023 0320 	bic.w	r3, r3, #32
 8003806:	6023      	str	r3, [r4, #0]
 8003808:	e7f6      	b.n	80037f8 <_printf_i+0x194>
 800380a:	4616      	mov	r6, r2
 800380c:	e7bd      	b.n	800378a <_printf_i+0x126>
 800380e:	6833      	ldr	r3, [r6, #0]
 8003810:	6825      	ldr	r5, [r4, #0]
 8003812:	6961      	ldr	r1, [r4, #20]
 8003814:	1d18      	adds	r0, r3, #4
 8003816:	6030      	str	r0, [r6, #0]
 8003818:	062e      	lsls	r6, r5, #24
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	d501      	bpl.n	8003822 <_printf_i+0x1be>
 800381e:	6019      	str	r1, [r3, #0]
 8003820:	e002      	b.n	8003828 <_printf_i+0x1c4>
 8003822:	0668      	lsls	r0, r5, #25
 8003824:	d5fb      	bpl.n	800381e <_printf_i+0x1ba>
 8003826:	8019      	strh	r1, [r3, #0]
 8003828:	2300      	movs	r3, #0
 800382a:	6123      	str	r3, [r4, #16]
 800382c:	4616      	mov	r6, r2
 800382e:	e7bc      	b.n	80037aa <_printf_i+0x146>
 8003830:	6833      	ldr	r3, [r6, #0]
 8003832:	1d1a      	adds	r2, r3, #4
 8003834:	6032      	str	r2, [r6, #0]
 8003836:	681e      	ldr	r6, [r3, #0]
 8003838:	6862      	ldr	r2, [r4, #4]
 800383a:	2100      	movs	r1, #0
 800383c:	4630      	mov	r0, r6
 800383e:	f7fc fce7 	bl	8000210 <memchr>
 8003842:	b108      	cbz	r0, 8003848 <_printf_i+0x1e4>
 8003844:	1b80      	subs	r0, r0, r6
 8003846:	6060      	str	r0, [r4, #4]
 8003848:	6863      	ldr	r3, [r4, #4]
 800384a:	6123      	str	r3, [r4, #16]
 800384c:	2300      	movs	r3, #0
 800384e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003852:	e7aa      	b.n	80037aa <_printf_i+0x146>
 8003854:	6923      	ldr	r3, [r4, #16]
 8003856:	4632      	mov	r2, r6
 8003858:	4649      	mov	r1, r9
 800385a:	4640      	mov	r0, r8
 800385c:	47d0      	blx	sl
 800385e:	3001      	adds	r0, #1
 8003860:	d0ad      	beq.n	80037be <_printf_i+0x15a>
 8003862:	6823      	ldr	r3, [r4, #0]
 8003864:	079b      	lsls	r3, r3, #30
 8003866:	d413      	bmi.n	8003890 <_printf_i+0x22c>
 8003868:	68e0      	ldr	r0, [r4, #12]
 800386a:	9b03      	ldr	r3, [sp, #12]
 800386c:	4298      	cmp	r0, r3
 800386e:	bfb8      	it	lt
 8003870:	4618      	movlt	r0, r3
 8003872:	e7a6      	b.n	80037c2 <_printf_i+0x15e>
 8003874:	2301      	movs	r3, #1
 8003876:	4632      	mov	r2, r6
 8003878:	4649      	mov	r1, r9
 800387a:	4640      	mov	r0, r8
 800387c:	47d0      	blx	sl
 800387e:	3001      	adds	r0, #1
 8003880:	d09d      	beq.n	80037be <_printf_i+0x15a>
 8003882:	3501      	adds	r5, #1
 8003884:	68e3      	ldr	r3, [r4, #12]
 8003886:	9903      	ldr	r1, [sp, #12]
 8003888:	1a5b      	subs	r3, r3, r1
 800388a:	42ab      	cmp	r3, r5
 800388c:	dcf2      	bgt.n	8003874 <_printf_i+0x210>
 800388e:	e7eb      	b.n	8003868 <_printf_i+0x204>
 8003890:	2500      	movs	r5, #0
 8003892:	f104 0619 	add.w	r6, r4, #25
 8003896:	e7f5      	b.n	8003884 <_printf_i+0x220>
 8003898:	08005b2a 	.word	0x08005b2a
 800389c:	08005b3b 	.word	0x08005b3b

080038a0 <std>:
 80038a0:	2300      	movs	r3, #0
 80038a2:	b510      	push	{r4, lr}
 80038a4:	4604      	mov	r4, r0
 80038a6:	e9c0 3300 	strd	r3, r3, [r0]
 80038aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038ae:	6083      	str	r3, [r0, #8]
 80038b0:	8181      	strh	r1, [r0, #12]
 80038b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80038b4:	81c2      	strh	r2, [r0, #14]
 80038b6:	6183      	str	r3, [r0, #24]
 80038b8:	4619      	mov	r1, r3
 80038ba:	2208      	movs	r2, #8
 80038bc:	305c      	adds	r0, #92	@ 0x5c
 80038be:	f000 f9f9 	bl	8003cb4 <memset>
 80038c2:	4b0d      	ldr	r3, [pc, #52]	@ (80038f8 <std+0x58>)
 80038c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80038c6:	4b0d      	ldr	r3, [pc, #52]	@ (80038fc <std+0x5c>)
 80038c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80038ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003900 <std+0x60>)
 80038cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80038ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003904 <std+0x64>)
 80038d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80038d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003908 <std+0x68>)
 80038d4:	6224      	str	r4, [r4, #32]
 80038d6:	429c      	cmp	r4, r3
 80038d8:	d006      	beq.n	80038e8 <std+0x48>
 80038da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80038de:	4294      	cmp	r4, r2
 80038e0:	d002      	beq.n	80038e8 <std+0x48>
 80038e2:	33d0      	adds	r3, #208	@ 0xd0
 80038e4:	429c      	cmp	r4, r3
 80038e6:	d105      	bne.n	80038f4 <std+0x54>
 80038e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80038ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038f0:	f000 ba5c 	b.w	8003dac <__retarget_lock_init_recursive>
 80038f4:	bd10      	pop	{r4, pc}
 80038f6:	bf00      	nop
 80038f8:	08003b05 	.word	0x08003b05
 80038fc:	08003b27 	.word	0x08003b27
 8003900:	08003b5f 	.word	0x08003b5f
 8003904:	08003b83 	.word	0x08003b83
 8003908:	20001348 	.word	0x20001348

0800390c <stdio_exit_handler>:
 800390c:	4a02      	ldr	r2, [pc, #8]	@ (8003918 <stdio_exit_handler+0xc>)
 800390e:	4903      	ldr	r1, [pc, #12]	@ (800391c <stdio_exit_handler+0x10>)
 8003910:	4803      	ldr	r0, [pc, #12]	@ (8003920 <stdio_exit_handler+0x14>)
 8003912:	f000 b869 	b.w	80039e8 <_fwalk_sglue>
 8003916:	bf00      	nop
 8003918:	2000000c 	.word	0x2000000c
 800391c:	080056e9 	.word	0x080056e9
 8003920:	2000001c 	.word	0x2000001c

08003924 <cleanup_stdio>:
 8003924:	6841      	ldr	r1, [r0, #4]
 8003926:	4b0c      	ldr	r3, [pc, #48]	@ (8003958 <cleanup_stdio+0x34>)
 8003928:	4299      	cmp	r1, r3
 800392a:	b510      	push	{r4, lr}
 800392c:	4604      	mov	r4, r0
 800392e:	d001      	beq.n	8003934 <cleanup_stdio+0x10>
 8003930:	f001 feda 	bl	80056e8 <_fflush_r>
 8003934:	68a1      	ldr	r1, [r4, #8]
 8003936:	4b09      	ldr	r3, [pc, #36]	@ (800395c <cleanup_stdio+0x38>)
 8003938:	4299      	cmp	r1, r3
 800393a:	d002      	beq.n	8003942 <cleanup_stdio+0x1e>
 800393c:	4620      	mov	r0, r4
 800393e:	f001 fed3 	bl	80056e8 <_fflush_r>
 8003942:	68e1      	ldr	r1, [r4, #12]
 8003944:	4b06      	ldr	r3, [pc, #24]	@ (8003960 <cleanup_stdio+0x3c>)
 8003946:	4299      	cmp	r1, r3
 8003948:	d004      	beq.n	8003954 <cleanup_stdio+0x30>
 800394a:	4620      	mov	r0, r4
 800394c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003950:	f001 beca 	b.w	80056e8 <_fflush_r>
 8003954:	bd10      	pop	{r4, pc}
 8003956:	bf00      	nop
 8003958:	20001348 	.word	0x20001348
 800395c:	200013b0 	.word	0x200013b0
 8003960:	20001418 	.word	0x20001418

08003964 <global_stdio_init.part.0>:
 8003964:	b510      	push	{r4, lr}
 8003966:	4b0b      	ldr	r3, [pc, #44]	@ (8003994 <global_stdio_init.part.0+0x30>)
 8003968:	4c0b      	ldr	r4, [pc, #44]	@ (8003998 <global_stdio_init.part.0+0x34>)
 800396a:	4a0c      	ldr	r2, [pc, #48]	@ (800399c <global_stdio_init.part.0+0x38>)
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	4620      	mov	r0, r4
 8003970:	2200      	movs	r2, #0
 8003972:	2104      	movs	r1, #4
 8003974:	f7ff ff94 	bl	80038a0 <std>
 8003978:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800397c:	2201      	movs	r2, #1
 800397e:	2109      	movs	r1, #9
 8003980:	f7ff ff8e 	bl	80038a0 <std>
 8003984:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003988:	2202      	movs	r2, #2
 800398a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800398e:	2112      	movs	r1, #18
 8003990:	f7ff bf86 	b.w	80038a0 <std>
 8003994:	20001480 	.word	0x20001480
 8003998:	20001348 	.word	0x20001348
 800399c:	0800390d 	.word	0x0800390d

080039a0 <__sfp_lock_acquire>:
 80039a0:	4801      	ldr	r0, [pc, #4]	@ (80039a8 <__sfp_lock_acquire+0x8>)
 80039a2:	f000 ba04 	b.w	8003dae <__retarget_lock_acquire_recursive>
 80039a6:	bf00      	nop
 80039a8:	20001489 	.word	0x20001489

080039ac <__sfp_lock_release>:
 80039ac:	4801      	ldr	r0, [pc, #4]	@ (80039b4 <__sfp_lock_release+0x8>)
 80039ae:	f000 b9ff 	b.w	8003db0 <__retarget_lock_release_recursive>
 80039b2:	bf00      	nop
 80039b4:	20001489 	.word	0x20001489

080039b8 <__sinit>:
 80039b8:	b510      	push	{r4, lr}
 80039ba:	4604      	mov	r4, r0
 80039bc:	f7ff fff0 	bl	80039a0 <__sfp_lock_acquire>
 80039c0:	6a23      	ldr	r3, [r4, #32]
 80039c2:	b11b      	cbz	r3, 80039cc <__sinit+0x14>
 80039c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039c8:	f7ff bff0 	b.w	80039ac <__sfp_lock_release>
 80039cc:	4b04      	ldr	r3, [pc, #16]	@ (80039e0 <__sinit+0x28>)
 80039ce:	6223      	str	r3, [r4, #32]
 80039d0:	4b04      	ldr	r3, [pc, #16]	@ (80039e4 <__sinit+0x2c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1f5      	bne.n	80039c4 <__sinit+0xc>
 80039d8:	f7ff ffc4 	bl	8003964 <global_stdio_init.part.0>
 80039dc:	e7f2      	b.n	80039c4 <__sinit+0xc>
 80039de:	bf00      	nop
 80039e0:	08003925 	.word	0x08003925
 80039e4:	20001480 	.word	0x20001480

080039e8 <_fwalk_sglue>:
 80039e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039ec:	4607      	mov	r7, r0
 80039ee:	4688      	mov	r8, r1
 80039f0:	4614      	mov	r4, r2
 80039f2:	2600      	movs	r6, #0
 80039f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80039f8:	f1b9 0901 	subs.w	r9, r9, #1
 80039fc:	d505      	bpl.n	8003a0a <_fwalk_sglue+0x22>
 80039fe:	6824      	ldr	r4, [r4, #0]
 8003a00:	2c00      	cmp	r4, #0
 8003a02:	d1f7      	bne.n	80039f4 <_fwalk_sglue+0xc>
 8003a04:	4630      	mov	r0, r6
 8003a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a0a:	89ab      	ldrh	r3, [r5, #12]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d907      	bls.n	8003a20 <_fwalk_sglue+0x38>
 8003a10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a14:	3301      	adds	r3, #1
 8003a16:	d003      	beq.n	8003a20 <_fwalk_sglue+0x38>
 8003a18:	4629      	mov	r1, r5
 8003a1a:	4638      	mov	r0, r7
 8003a1c:	47c0      	blx	r8
 8003a1e:	4306      	orrs	r6, r0
 8003a20:	3568      	adds	r5, #104	@ 0x68
 8003a22:	e7e9      	b.n	80039f8 <_fwalk_sglue+0x10>

08003a24 <iprintf>:
 8003a24:	b40f      	push	{r0, r1, r2, r3}
 8003a26:	b507      	push	{r0, r1, r2, lr}
 8003a28:	4906      	ldr	r1, [pc, #24]	@ (8003a44 <iprintf+0x20>)
 8003a2a:	ab04      	add	r3, sp, #16
 8003a2c:	6808      	ldr	r0, [r1, #0]
 8003a2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a32:	6881      	ldr	r1, [r0, #8]
 8003a34:	9301      	str	r3, [sp, #4]
 8003a36:	f001 fcbb 	bl	80053b0 <_vfiprintf_r>
 8003a3a:	b003      	add	sp, #12
 8003a3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a40:	b004      	add	sp, #16
 8003a42:	4770      	bx	lr
 8003a44:	20000018 	.word	0x20000018

08003a48 <_puts_r>:
 8003a48:	6a03      	ldr	r3, [r0, #32]
 8003a4a:	b570      	push	{r4, r5, r6, lr}
 8003a4c:	6884      	ldr	r4, [r0, #8]
 8003a4e:	4605      	mov	r5, r0
 8003a50:	460e      	mov	r6, r1
 8003a52:	b90b      	cbnz	r3, 8003a58 <_puts_r+0x10>
 8003a54:	f7ff ffb0 	bl	80039b8 <__sinit>
 8003a58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a5a:	07db      	lsls	r3, r3, #31
 8003a5c:	d405      	bmi.n	8003a6a <_puts_r+0x22>
 8003a5e:	89a3      	ldrh	r3, [r4, #12]
 8003a60:	0598      	lsls	r0, r3, #22
 8003a62:	d402      	bmi.n	8003a6a <_puts_r+0x22>
 8003a64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a66:	f000 f9a2 	bl	8003dae <__retarget_lock_acquire_recursive>
 8003a6a:	89a3      	ldrh	r3, [r4, #12]
 8003a6c:	0719      	lsls	r1, r3, #28
 8003a6e:	d502      	bpl.n	8003a76 <_puts_r+0x2e>
 8003a70:	6923      	ldr	r3, [r4, #16]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d135      	bne.n	8003ae2 <_puts_r+0x9a>
 8003a76:	4621      	mov	r1, r4
 8003a78:	4628      	mov	r0, r5
 8003a7a:	f000 f8c5 	bl	8003c08 <__swsetup_r>
 8003a7e:	b380      	cbz	r0, 8003ae2 <_puts_r+0x9a>
 8003a80:	f04f 35ff 	mov.w	r5, #4294967295
 8003a84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a86:	07da      	lsls	r2, r3, #31
 8003a88:	d405      	bmi.n	8003a96 <_puts_r+0x4e>
 8003a8a:	89a3      	ldrh	r3, [r4, #12]
 8003a8c:	059b      	lsls	r3, r3, #22
 8003a8e:	d402      	bmi.n	8003a96 <_puts_r+0x4e>
 8003a90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a92:	f000 f98d 	bl	8003db0 <__retarget_lock_release_recursive>
 8003a96:	4628      	mov	r0, r5
 8003a98:	bd70      	pop	{r4, r5, r6, pc}
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	da04      	bge.n	8003aa8 <_puts_r+0x60>
 8003a9e:	69a2      	ldr	r2, [r4, #24]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	dc17      	bgt.n	8003ad4 <_puts_r+0x8c>
 8003aa4:	290a      	cmp	r1, #10
 8003aa6:	d015      	beq.n	8003ad4 <_puts_r+0x8c>
 8003aa8:	6823      	ldr	r3, [r4, #0]
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	6022      	str	r2, [r4, #0]
 8003aae:	7019      	strb	r1, [r3, #0]
 8003ab0:	68a3      	ldr	r3, [r4, #8]
 8003ab2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	60a3      	str	r3, [r4, #8]
 8003aba:	2900      	cmp	r1, #0
 8003abc:	d1ed      	bne.n	8003a9a <_puts_r+0x52>
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	da11      	bge.n	8003ae6 <_puts_r+0x9e>
 8003ac2:	4622      	mov	r2, r4
 8003ac4:	210a      	movs	r1, #10
 8003ac6:	4628      	mov	r0, r5
 8003ac8:	f000 f85f 	bl	8003b8a <__swbuf_r>
 8003acc:	3001      	adds	r0, #1
 8003ace:	d0d7      	beq.n	8003a80 <_puts_r+0x38>
 8003ad0:	250a      	movs	r5, #10
 8003ad2:	e7d7      	b.n	8003a84 <_puts_r+0x3c>
 8003ad4:	4622      	mov	r2, r4
 8003ad6:	4628      	mov	r0, r5
 8003ad8:	f000 f857 	bl	8003b8a <__swbuf_r>
 8003adc:	3001      	adds	r0, #1
 8003ade:	d1e7      	bne.n	8003ab0 <_puts_r+0x68>
 8003ae0:	e7ce      	b.n	8003a80 <_puts_r+0x38>
 8003ae2:	3e01      	subs	r6, #1
 8003ae4:	e7e4      	b.n	8003ab0 <_puts_r+0x68>
 8003ae6:	6823      	ldr	r3, [r4, #0]
 8003ae8:	1c5a      	adds	r2, r3, #1
 8003aea:	6022      	str	r2, [r4, #0]
 8003aec:	220a      	movs	r2, #10
 8003aee:	701a      	strb	r2, [r3, #0]
 8003af0:	e7ee      	b.n	8003ad0 <_puts_r+0x88>
	...

08003af4 <puts>:
 8003af4:	4b02      	ldr	r3, [pc, #8]	@ (8003b00 <puts+0xc>)
 8003af6:	4601      	mov	r1, r0
 8003af8:	6818      	ldr	r0, [r3, #0]
 8003afa:	f7ff bfa5 	b.w	8003a48 <_puts_r>
 8003afe:	bf00      	nop
 8003b00:	20000018 	.word	0x20000018

08003b04 <__sread>:
 8003b04:	b510      	push	{r4, lr}
 8003b06:	460c      	mov	r4, r1
 8003b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b0c:	f000 f900 	bl	8003d10 <_read_r>
 8003b10:	2800      	cmp	r0, #0
 8003b12:	bfab      	itete	ge
 8003b14:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003b16:	89a3      	ldrhlt	r3, [r4, #12]
 8003b18:	181b      	addge	r3, r3, r0
 8003b1a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003b1e:	bfac      	ite	ge
 8003b20:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003b22:	81a3      	strhlt	r3, [r4, #12]
 8003b24:	bd10      	pop	{r4, pc}

08003b26 <__swrite>:
 8003b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b2a:	461f      	mov	r7, r3
 8003b2c:	898b      	ldrh	r3, [r1, #12]
 8003b2e:	05db      	lsls	r3, r3, #23
 8003b30:	4605      	mov	r5, r0
 8003b32:	460c      	mov	r4, r1
 8003b34:	4616      	mov	r6, r2
 8003b36:	d505      	bpl.n	8003b44 <__swrite+0x1e>
 8003b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f000 f8d4 	bl	8003cec <_lseek_r>
 8003b44:	89a3      	ldrh	r3, [r4, #12]
 8003b46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b4e:	81a3      	strh	r3, [r4, #12]
 8003b50:	4632      	mov	r2, r6
 8003b52:	463b      	mov	r3, r7
 8003b54:	4628      	mov	r0, r5
 8003b56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b5a:	f000 b8eb 	b.w	8003d34 <_write_r>

08003b5e <__sseek>:
 8003b5e:	b510      	push	{r4, lr}
 8003b60:	460c      	mov	r4, r1
 8003b62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b66:	f000 f8c1 	bl	8003cec <_lseek_r>
 8003b6a:	1c43      	adds	r3, r0, #1
 8003b6c:	89a3      	ldrh	r3, [r4, #12]
 8003b6e:	bf15      	itete	ne
 8003b70:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003b72:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003b76:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003b7a:	81a3      	strheq	r3, [r4, #12]
 8003b7c:	bf18      	it	ne
 8003b7e:	81a3      	strhne	r3, [r4, #12]
 8003b80:	bd10      	pop	{r4, pc}

08003b82 <__sclose>:
 8003b82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b86:	f000 b8a1 	b.w	8003ccc <_close_r>

08003b8a <__swbuf_r>:
 8003b8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8c:	460e      	mov	r6, r1
 8003b8e:	4614      	mov	r4, r2
 8003b90:	4605      	mov	r5, r0
 8003b92:	b118      	cbz	r0, 8003b9c <__swbuf_r+0x12>
 8003b94:	6a03      	ldr	r3, [r0, #32]
 8003b96:	b90b      	cbnz	r3, 8003b9c <__swbuf_r+0x12>
 8003b98:	f7ff ff0e 	bl	80039b8 <__sinit>
 8003b9c:	69a3      	ldr	r3, [r4, #24]
 8003b9e:	60a3      	str	r3, [r4, #8]
 8003ba0:	89a3      	ldrh	r3, [r4, #12]
 8003ba2:	071a      	lsls	r2, r3, #28
 8003ba4:	d501      	bpl.n	8003baa <__swbuf_r+0x20>
 8003ba6:	6923      	ldr	r3, [r4, #16]
 8003ba8:	b943      	cbnz	r3, 8003bbc <__swbuf_r+0x32>
 8003baa:	4621      	mov	r1, r4
 8003bac:	4628      	mov	r0, r5
 8003bae:	f000 f82b 	bl	8003c08 <__swsetup_r>
 8003bb2:	b118      	cbz	r0, 8003bbc <__swbuf_r+0x32>
 8003bb4:	f04f 37ff 	mov.w	r7, #4294967295
 8003bb8:	4638      	mov	r0, r7
 8003bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bbc:	6823      	ldr	r3, [r4, #0]
 8003bbe:	6922      	ldr	r2, [r4, #16]
 8003bc0:	1a98      	subs	r0, r3, r2
 8003bc2:	6963      	ldr	r3, [r4, #20]
 8003bc4:	b2f6      	uxtb	r6, r6
 8003bc6:	4283      	cmp	r3, r0
 8003bc8:	4637      	mov	r7, r6
 8003bca:	dc05      	bgt.n	8003bd8 <__swbuf_r+0x4e>
 8003bcc:	4621      	mov	r1, r4
 8003bce:	4628      	mov	r0, r5
 8003bd0:	f001 fd8a 	bl	80056e8 <_fflush_r>
 8003bd4:	2800      	cmp	r0, #0
 8003bd6:	d1ed      	bne.n	8003bb4 <__swbuf_r+0x2a>
 8003bd8:	68a3      	ldr	r3, [r4, #8]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	60a3      	str	r3, [r4, #8]
 8003bde:	6823      	ldr	r3, [r4, #0]
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	6022      	str	r2, [r4, #0]
 8003be4:	701e      	strb	r6, [r3, #0]
 8003be6:	6962      	ldr	r2, [r4, #20]
 8003be8:	1c43      	adds	r3, r0, #1
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d004      	beq.n	8003bf8 <__swbuf_r+0x6e>
 8003bee:	89a3      	ldrh	r3, [r4, #12]
 8003bf0:	07db      	lsls	r3, r3, #31
 8003bf2:	d5e1      	bpl.n	8003bb8 <__swbuf_r+0x2e>
 8003bf4:	2e0a      	cmp	r6, #10
 8003bf6:	d1df      	bne.n	8003bb8 <__swbuf_r+0x2e>
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	4628      	mov	r0, r5
 8003bfc:	f001 fd74 	bl	80056e8 <_fflush_r>
 8003c00:	2800      	cmp	r0, #0
 8003c02:	d0d9      	beq.n	8003bb8 <__swbuf_r+0x2e>
 8003c04:	e7d6      	b.n	8003bb4 <__swbuf_r+0x2a>
	...

08003c08 <__swsetup_r>:
 8003c08:	b538      	push	{r3, r4, r5, lr}
 8003c0a:	4b29      	ldr	r3, [pc, #164]	@ (8003cb0 <__swsetup_r+0xa8>)
 8003c0c:	4605      	mov	r5, r0
 8003c0e:	6818      	ldr	r0, [r3, #0]
 8003c10:	460c      	mov	r4, r1
 8003c12:	b118      	cbz	r0, 8003c1c <__swsetup_r+0x14>
 8003c14:	6a03      	ldr	r3, [r0, #32]
 8003c16:	b90b      	cbnz	r3, 8003c1c <__swsetup_r+0x14>
 8003c18:	f7ff fece 	bl	80039b8 <__sinit>
 8003c1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c20:	0719      	lsls	r1, r3, #28
 8003c22:	d422      	bmi.n	8003c6a <__swsetup_r+0x62>
 8003c24:	06da      	lsls	r2, r3, #27
 8003c26:	d407      	bmi.n	8003c38 <__swsetup_r+0x30>
 8003c28:	2209      	movs	r2, #9
 8003c2a:	602a      	str	r2, [r5, #0]
 8003c2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c30:	81a3      	strh	r3, [r4, #12]
 8003c32:	f04f 30ff 	mov.w	r0, #4294967295
 8003c36:	e033      	b.n	8003ca0 <__swsetup_r+0x98>
 8003c38:	0758      	lsls	r0, r3, #29
 8003c3a:	d512      	bpl.n	8003c62 <__swsetup_r+0x5a>
 8003c3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c3e:	b141      	cbz	r1, 8003c52 <__swsetup_r+0x4a>
 8003c40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c44:	4299      	cmp	r1, r3
 8003c46:	d002      	beq.n	8003c4e <__swsetup_r+0x46>
 8003c48:	4628      	mov	r0, r5
 8003c4a:	f000 ff0d 	bl	8004a68 <_free_r>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c52:	89a3      	ldrh	r3, [r4, #12]
 8003c54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003c58:	81a3      	strh	r3, [r4, #12]
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	6063      	str	r3, [r4, #4]
 8003c5e:	6923      	ldr	r3, [r4, #16]
 8003c60:	6023      	str	r3, [r4, #0]
 8003c62:	89a3      	ldrh	r3, [r4, #12]
 8003c64:	f043 0308 	orr.w	r3, r3, #8
 8003c68:	81a3      	strh	r3, [r4, #12]
 8003c6a:	6923      	ldr	r3, [r4, #16]
 8003c6c:	b94b      	cbnz	r3, 8003c82 <__swsetup_r+0x7a>
 8003c6e:	89a3      	ldrh	r3, [r4, #12]
 8003c70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003c74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c78:	d003      	beq.n	8003c82 <__swsetup_r+0x7a>
 8003c7a:	4621      	mov	r1, r4
 8003c7c:	4628      	mov	r0, r5
 8003c7e:	f001 fd81 	bl	8005784 <__smakebuf_r>
 8003c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c86:	f013 0201 	ands.w	r2, r3, #1
 8003c8a:	d00a      	beq.n	8003ca2 <__swsetup_r+0x9a>
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	60a2      	str	r2, [r4, #8]
 8003c90:	6962      	ldr	r2, [r4, #20]
 8003c92:	4252      	negs	r2, r2
 8003c94:	61a2      	str	r2, [r4, #24]
 8003c96:	6922      	ldr	r2, [r4, #16]
 8003c98:	b942      	cbnz	r2, 8003cac <__swsetup_r+0xa4>
 8003c9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003c9e:	d1c5      	bne.n	8003c2c <__swsetup_r+0x24>
 8003ca0:	bd38      	pop	{r3, r4, r5, pc}
 8003ca2:	0799      	lsls	r1, r3, #30
 8003ca4:	bf58      	it	pl
 8003ca6:	6962      	ldrpl	r2, [r4, #20]
 8003ca8:	60a2      	str	r2, [r4, #8]
 8003caa:	e7f4      	b.n	8003c96 <__swsetup_r+0x8e>
 8003cac:	2000      	movs	r0, #0
 8003cae:	e7f7      	b.n	8003ca0 <__swsetup_r+0x98>
 8003cb0:	20000018 	.word	0x20000018

08003cb4 <memset>:
 8003cb4:	4402      	add	r2, r0
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d100      	bne.n	8003cbe <memset+0xa>
 8003cbc:	4770      	bx	lr
 8003cbe:	f803 1b01 	strb.w	r1, [r3], #1
 8003cc2:	e7f9      	b.n	8003cb8 <memset+0x4>

08003cc4 <_localeconv_r>:
 8003cc4:	4800      	ldr	r0, [pc, #0]	@ (8003cc8 <_localeconv_r+0x4>)
 8003cc6:	4770      	bx	lr
 8003cc8:	20000158 	.word	0x20000158

08003ccc <_close_r>:
 8003ccc:	b538      	push	{r3, r4, r5, lr}
 8003cce:	4d06      	ldr	r5, [pc, #24]	@ (8003ce8 <_close_r+0x1c>)
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	4604      	mov	r4, r0
 8003cd4:	4608      	mov	r0, r1
 8003cd6:	602b      	str	r3, [r5, #0]
 8003cd8:	f7fd fd5f 	bl	800179a <_close>
 8003cdc:	1c43      	adds	r3, r0, #1
 8003cde:	d102      	bne.n	8003ce6 <_close_r+0x1a>
 8003ce0:	682b      	ldr	r3, [r5, #0]
 8003ce2:	b103      	cbz	r3, 8003ce6 <_close_r+0x1a>
 8003ce4:	6023      	str	r3, [r4, #0]
 8003ce6:	bd38      	pop	{r3, r4, r5, pc}
 8003ce8:	20001484 	.word	0x20001484

08003cec <_lseek_r>:
 8003cec:	b538      	push	{r3, r4, r5, lr}
 8003cee:	4d07      	ldr	r5, [pc, #28]	@ (8003d0c <_lseek_r+0x20>)
 8003cf0:	4604      	mov	r4, r0
 8003cf2:	4608      	mov	r0, r1
 8003cf4:	4611      	mov	r1, r2
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	602a      	str	r2, [r5, #0]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	f7fd fd57 	bl	80017ae <_lseek>
 8003d00:	1c43      	adds	r3, r0, #1
 8003d02:	d102      	bne.n	8003d0a <_lseek_r+0x1e>
 8003d04:	682b      	ldr	r3, [r5, #0]
 8003d06:	b103      	cbz	r3, 8003d0a <_lseek_r+0x1e>
 8003d08:	6023      	str	r3, [r4, #0]
 8003d0a:	bd38      	pop	{r3, r4, r5, pc}
 8003d0c:	20001484 	.word	0x20001484

08003d10 <_read_r>:
 8003d10:	b538      	push	{r3, r4, r5, lr}
 8003d12:	4d07      	ldr	r5, [pc, #28]	@ (8003d30 <_read_r+0x20>)
 8003d14:	4604      	mov	r4, r0
 8003d16:	4608      	mov	r0, r1
 8003d18:	4611      	mov	r1, r2
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	602a      	str	r2, [r5, #0]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	f7fd fd2b 	bl	800177a <_read>
 8003d24:	1c43      	adds	r3, r0, #1
 8003d26:	d102      	bne.n	8003d2e <_read_r+0x1e>
 8003d28:	682b      	ldr	r3, [r5, #0]
 8003d2a:	b103      	cbz	r3, 8003d2e <_read_r+0x1e>
 8003d2c:	6023      	str	r3, [r4, #0]
 8003d2e:	bd38      	pop	{r3, r4, r5, pc}
 8003d30:	20001484 	.word	0x20001484

08003d34 <_write_r>:
 8003d34:	b538      	push	{r3, r4, r5, lr}
 8003d36:	4d07      	ldr	r5, [pc, #28]	@ (8003d54 <_write_r+0x20>)
 8003d38:	4604      	mov	r4, r0
 8003d3a:	4608      	mov	r0, r1
 8003d3c:	4611      	mov	r1, r2
 8003d3e:	2200      	movs	r2, #0
 8003d40:	602a      	str	r2, [r5, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	f7fd faea 	bl	800131c <_write>
 8003d48:	1c43      	adds	r3, r0, #1
 8003d4a:	d102      	bne.n	8003d52 <_write_r+0x1e>
 8003d4c:	682b      	ldr	r3, [r5, #0]
 8003d4e:	b103      	cbz	r3, 8003d52 <_write_r+0x1e>
 8003d50:	6023      	str	r3, [r4, #0]
 8003d52:	bd38      	pop	{r3, r4, r5, pc}
 8003d54:	20001484 	.word	0x20001484

08003d58 <__errno>:
 8003d58:	4b01      	ldr	r3, [pc, #4]	@ (8003d60 <__errno+0x8>)
 8003d5a:	6818      	ldr	r0, [r3, #0]
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	20000018 	.word	0x20000018

08003d64 <__libc_init_array>:
 8003d64:	b570      	push	{r4, r5, r6, lr}
 8003d66:	4d0d      	ldr	r5, [pc, #52]	@ (8003d9c <__libc_init_array+0x38>)
 8003d68:	4c0d      	ldr	r4, [pc, #52]	@ (8003da0 <__libc_init_array+0x3c>)
 8003d6a:	1b64      	subs	r4, r4, r5
 8003d6c:	10a4      	asrs	r4, r4, #2
 8003d6e:	2600      	movs	r6, #0
 8003d70:	42a6      	cmp	r6, r4
 8003d72:	d109      	bne.n	8003d88 <__libc_init_array+0x24>
 8003d74:	4d0b      	ldr	r5, [pc, #44]	@ (8003da4 <__libc_init_array+0x40>)
 8003d76:	4c0c      	ldr	r4, [pc, #48]	@ (8003da8 <__libc_init_array+0x44>)
 8003d78:	f001 fe30 	bl	80059dc <_init>
 8003d7c:	1b64      	subs	r4, r4, r5
 8003d7e:	10a4      	asrs	r4, r4, #2
 8003d80:	2600      	movs	r6, #0
 8003d82:	42a6      	cmp	r6, r4
 8003d84:	d105      	bne.n	8003d92 <__libc_init_array+0x2e>
 8003d86:	bd70      	pop	{r4, r5, r6, pc}
 8003d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d8c:	4798      	blx	r3
 8003d8e:	3601      	adds	r6, #1
 8003d90:	e7ee      	b.n	8003d70 <__libc_init_array+0xc>
 8003d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d96:	4798      	blx	r3
 8003d98:	3601      	adds	r6, #1
 8003d9a:	e7f2      	b.n	8003d82 <__libc_init_array+0x1e>
 8003d9c:	08005e94 	.word	0x08005e94
 8003da0:	08005e94 	.word	0x08005e94
 8003da4:	08005e94 	.word	0x08005e94
 8003da8:	08005e98 	.word	0x08005e98

08003dac <__retarget_lock_init_recursive>:
 8003dac:	4770      	bx	lr

08003dae <__retarget_lock_acquire_recursive>:
 8003dae:	4770      	bx	lr

08003db0 <__retarget_lock_release_recursive>:
 8003db0:	4770      	bx	lr

08003db2 <quorem>:
 8003db2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003db6:	6903      	ldr	r3, [r0, #16]
 8003db8:	690c      	ldr	r4, [r1, #16]
 8003dba:	42a3      	cmp	r3, r4
 8003dbc:	4607      	mov	r7, r0
 8003dbe:	db7e      	blt.n	8003ebe <quorem+0x10c>
 8003dc0:	3c01      	subs	r4, #1
 8003dc2:	f101 0814 	add.w	r8, r1, #20
 8003dc6:	00a3      	lsls	r3, r4, #2
 8003dc8:	f100 0514 	add.w	r5, r0, #20
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003dd2:	9301      	str	r3, [sp, #4]
 8003dd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003dd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	429a      	cmp	r2, r3
 8003de0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003de4:	fbb2 f6f3 	udiv	r6, r2, r3
 8003de8:	d32e      	bcc.n	8003e48 <quorem+0x96>
 8003dea:	f04f 0a00 	mov.w	sl, #0
 8003dee:	46c4      	mov	ip, r8
 8003df0:	46ae      	mov	lr, r5
 8003df2:	46d3      	mov	fp, sl
 8003df4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003df8:	b298      	uxth	r0, r3
 8003dfa:	fb06 a000 	mla	r0, r6, r0, sl
 8003dfe:	0c02      	lsrs	r2, r0, #16
 8003e00:	0c1b      	lsrs	r3, r3, #16
 8003e02:	fb06 2303 	mla	r3, r6, r3, r2
 8003e06:	f8de 2000 	ldr.w	r2, [lr]
 8003e0a:	b280      	uxth	r0, r0
 8003e0c:	b292      	uxth	r2, r2
 8003e0e:	1a12      	subs	r2, r2, r0
 8003e10:	445a      	add	r2, fp
 8003e12:	f8de 0000 	ldr.w	r0, [lr]
 8003e16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003e20:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003e24:	b292      	uxth	r2, r2
 8003e26:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003e2a:	45e1      	cmp	r9, ip
 8003e2c:	f84e 2b04 	str.w	r2, [lr], #4
 8003e30:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003e34:	d2de      	bcs.n	8003df4 <quorem+0x42>
 8003e36:	9b00      	ldr	r3, [sp, #0]
 8003e38:	58eb      	ldr	r3, [r5, r3]
 8003e3a:	b92b      	cbnz	r3, 8003e48 <quorem+0x96>
 8003e3c:	9b01      	ldr	r3, [sp, #4]
 8003e3e:	3b04      	subs	r3, #4
 8003e40:	429d      	cmp	r5, r3
 8003e42:	461a      	mov	r2, r3
 8003e44:	d32f      	bcc.n	8003ea6 <quorem+0xf4>
 8003e46:	613c      	str	r4, [r7, #16]
 8003e48:	4638      	mov	r0, r7
 8003e4a:	f001 f97f 	bl	800514c <__mcmp>
 8003e4e:	2800      	cmp	r0, #0
 8003e50:	db25      	blt.n	8003e9e <quorem+0xec>
 8003e52:	4629      	mov	r1, r5
 8003e54:	2000      	movs	r0, #0
 8003e56:	f858 2b04 	ldr.w	r2, [r8], #4
 8003e5a:	f8d1 c000 	ldr.w	ip, [r1]
 8003e5e:	fa1f fe82 	uxth.w	lr, r2
 8003e62:	fa1f f38c 	uxth.w	r3, ip
 8003e66:	eba3 030e 	sub.w	r3, r3, lr
 8003e6a:	4403      	add	r3, r0
 8003e6c:	0c12      	lsrs	r2, r2, #16
 8003e6e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003e72:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e7c:	45c1      	cmp	r9, r8
 8003e7e:	f841 3b04 	str.w	r3, [r1], #4
 8003e82:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003e86:	d2e6      	bcs.n	8003e56 <quorem+0xa4>
 8003e88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003e8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003e90:	b922      	cbnz	r2, 8003e9c <quorem+0xea>
 8003e92:	3b04      	subs	r3, #4
 8003e94:	429d      	cmp	r5, r3
 8003e96:	461a      	mov	r2, r3
 8003e98:	d30b      	bcc.n	8003eb2 <quorem+0x100>
 8003e9a:	613c      	str	r4, [r7, #16]
 8003e9c:	3601      	adds	r6, #1
 8003e9e:	4630      	mov	r0, r6
 8003ea0:	b003      	add	sp, #12
 8003ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ea6:	6812      	ldr	r2, [r2, #0]
 8003ea8:	3b04      	subs	r3, #4
 8003eaa:	2a00      	cmp	r2, #0
 8003eac:	d1cb      	bne.n	8003e46 <quorem+0x94>
 8003eae:	3c01      	subs	r4, #1
 8003eb0:	e7c6      	b.n	8003e40 <quorem+0x8e>
 8003eb2:	6812      	ldr	r2, [r2, #0]
 8003eb4:	3b04      	subs	r3, #4
 8003eb6:	2a00      	cmp	r2, #0
 8003eb8:	d1ef      	bne.n	8003e9a <quorem+0xe8>
 8003eba:	3c01      	subs	r4, #1
 8003ebc:	e7ea      	b.n	8003e94 <quorem+0xe2>
 8003ebe:	2000      	movs	r0, #0
 8003ec0:	e7ee      	b.n	8003ea0 <quorem+0xee>
 8003ec2:	0000      	movs	r0, r0
 8003ec4:	0000      	movs	r0, r0
	...

08003ec8 <_dtoa_r>:
 8003ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ecc:	69c7      	ldr	r7, [r0, #28]
 8003ece:	b097      	sub	sp, #92	@ 0x5c
 8003ed0:	ed8d 0b04 	vstr	d0, [sp, #16]
 8003ed4:	ec55 4b10 	vmov	r4, r5, d0
 8003ed8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8003eda:	9107      	str	r1, [sp, #28]
 8003edc:	4681      	mov	r9, r0
 8003ede:	920c      	str	r2, [sp, #48]	@ 0x30
 8003ee0:	9311      	str	r3, [sp, #68]	@ 0x44
 8003ee2:	b97f      	cbnz	r7, 8003f04 <_dtoa_r+0x3c>
 8003ee4:	2010      	movs	r0, #16
 8003ee6:	f000 fe09 	bl	8004afc <malloc>
 8003eea:	4602      	mov	r2, r0
 8003eec:	f8c9 001c 	str.w	r0, [r9, #28]
 8003ef0:	b920      	cbnz	r0, 8003efc <_dtoa_r+0x34>
 8003ef2:	4ba9      	ldr	r3, [pc, #676]	@ (8004198 <_dtoa_r+0x2d0>)
 8003ef4:	21ef      	movs	r1, #239	@ 0xef
 8003ef6:	48a9      	ldr	r0, [pc, #676]	@ (800419c <_dtoa_r+0x2d4>)
 8003ef8:	f001 fcc0 	bl	800587c <__assert_func>
 8003efc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003f00:	6007      	str	r7, [r0, #0]
 8003f02:	60c7      	str	r7, [r0, #12]
 8003f04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003f08:	6819      	ldr	r1, [r3, #0]
 8003f0a:	b159      	cbz	r1, 8003f24 <_dtoa_r+0x5c>
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	604a      	str	r2, [r1, #4]
 8003f10:	2301      	movs	r3, #1
 8003f12:	4093      	lsls	r3, r2
 8003f14:	608b      	str	r3, [r1, #8]
 8003f16:	4648      	mov	r0, r9
 8003f18:	f000 fee6 	bl	8004ce8 <_Bfree>
 8003f1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	1e2b      	subs	r3, r5, #0
 8003f26:	bfb9      	ittee	lt
 8003f28:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003f2c:	9305      	strlt	r3, [sp, #20]
 8003f2e:	2300      	movge	r3, #0
 8003f30:	6033      	strge	r3, [r6, #0]
 8003f32:	9f05      	ldr	r7, [sp, #20]
 8003f34:	4b9a      	ldr	r3, [pc, #616]	@ (80041a0 <_dtoa_r+0x2d8>)
 8003f36:	bfbc      	itt	lt
 8003f38:	2201      	movlt	r2, #1
 8003f3a:	6032      	strlt	r2, [r6, #0]
 8003f3c:	43bb      	bics	r3, r7
 8003f3e:	d112      	bne.n	8003f66 <_dtoa_r+0x9e>
 8003f40:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8003f42:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003f46:	6013      	str	r3, [r2, #0]
 8003f48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003f4c:	4323      	orrs	r3, r4
 8003f4e:	f000 855a 	beq.w	8004a06 <_dtoa_r+0xb3e>
 8003f52:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003f54:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80041b4 <_dtoa_r+0x2ec>
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 855c 	beq.w	8004a16 <_dtoa_r+0xb4e>
 8003f5e:	f10a 0303 	add.w	r3, sl, #3
 8003f62:	f000 bd56 	b.w	8004a12 <_dtoa_r+0xb4a>
 8003f66:	ed9d 7b04 	vldr	d7, [sp, #16]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	ec51 0b17 	vmov	r0, r1, d7
 8003f70:	2300      	movs	r3, #0
 8003f72:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8003f76:	f7fc fdc7 	bl	8000b08 <__aeabi_dcmpeq>
 8003f7a:	4680      	mov	r8, r0
 8003f7c:	b158      	cbz	r0, 8003f96 <_dtoa_r+0xce>
 8003f7e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8003f80:	2301      	movs	r3, #1
 8003f82:	6013      	str	r3, [r2, #0]
 8003f84:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003f86:	b113      	cbz	r3, 8003f8e <_dtoa_r+0xc6>
 8003f88:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8003f8a:	4b86      	ldr	r3, [pc, #536]	@ (80041a4 <_dtoa_r+0x2dc>)
 8003f8c:	6013      	str	r3, [r2, #0]
 8003f8e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80041b8 <_dtoa_r+0x2f0>
 8003f92:	f000 bd40 	b.w	8004a16 <_dtoa_r+0xb4e>
 8003f96:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8003f9a:	aa14      	add	r2, sp, #80	@ 0x50
 8003f9c:	a915      	add	r1, sp, #84	@ 0x54
 8003f9e:	4648      	mov	r0, r9
 8003fa0:	f001 f984 	bl	80052ac <__d2b>
 8003fa4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8003fa8:	9002      	str	r0, [sp, #8]
 8003faa:	2e00      	cmp	r6, #0
 8003fac:	d078      	beq.n	80040a0 <_dtoa_r+0x1d8>
 8003fae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003fb0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8003fb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fb8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003fbc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003fc0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003fc4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003fc8:	4619      	mov	r1, r3
 8003fca:	2200      	movs	r2, #0
 8003fcc:	4b76      	ldr	r3, [pc, #472]	@ (80041a8 <_dtoa_r+0x2e0>)
 8003fce:	f7fc f97b 	bl	80002c8 <__aeabi_dsub>
 8003fd2:	a36b      	add	r3, pc, #428	@ (adr r3, 8004180 <_dtoa_r+0x2b8>)
 8003fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd8:	f7fc fb2e 	bl	8000638 <__aeabi_dmul>
 8003fdc:	a36a      	add	r3, pc, #424	@ (adr r3, 8004188 <_dtoa_r+0x2c0>)
 8003fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe2:	f7fc f973 	bl	80002cc <__adddf3>
 8003fe6:	4604      	mov	r4, r0
 8003fe8:	4630      	mov	r0, r6
 8003fea:	460d      	mov	r5, r1
 8003fec:	f7fc faba 	bl	8000564 <__aeabi_i2d>
 8003ff0:	a367      	add	r3, pc, #412	@ (adr r3, 8004190 <_dtoa_r+0x2c8>)
 8003ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff6:	f7fc fb1f 	bl	8000638 <__aeabi_dmul>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	4620      	mov	r0, r4
 8004000:	4629      	mov	r1, r5
 8004002:	f7fc f963 	bl	80002cc <__adddf3>
 8004006:	4604      	mov	r4, r0
 8004008:	460d      	mov	r5, r1
 800400a:	f7fc fdc5 	bl	8000b98 <__aeabi_d2iz>
 800400e:	2200      	movs	r2, #0
 8004010:	4607      	mov	r7, r0
 8004012:	2300      	movs	r3, #0
 8004014:	4620      	mov	r0, r4
 8004016:	4629      	mov	r1, r5
 8004018:	f7fc fd80 	bl	8000b1c <__aeabi_dcmplt>
 800401c:	b140      	cbz	r0, 8004030 <_dtoa_r+0x168>
 800401e:	4638      	mov	r0, r7
 8004020:	f7fc faa0 	bl	8000564 <__aeabi_i2d>
 8004024:	4622      	mov	r2, r4
 8004026:	462b      	mov	r3, r5
 8004028:	f7fc fd6e 	bl	8000b08 <__aeabi_dcmpeq>
 800402c:	b900      	cbnz	r0, 8004030 <_dtoa_r+0x168>
 800402e:	3f01      	subs	r7, #1
 8004030:	2f16      	cmp	r7, #22
 8004032:	d852      	bhi.n	80040da <_dtoa_r+0x212>
 8004034:	4b5d      	ldr	r3, [pc, #372]	@ (80041ac <_dtoa_r+0x2e4>)
 8004036:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800403a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004042:	f7fc fd6b 	bl	8000b1c <__aeabi_dcmplt>
 8004046:	2800      	cmp	r0, #0
 8004048:	d049      	beq.n	80040de <_dtoa_r+0x216>
 800404a:	3f01      	subs	r7, #1
 800404c:	2300      	movs	r3, #0
 800404e:	9310      	str	r3, [sp, #64]	@ 0x40
 8004050:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004052:	1b9b      	subs	r3, r3, r6
 8004054:	1e5a      	subs	r2, r3, #1
 8004056:	bf45      	ittet	mi
 8004058:	f1c3 0301 	rsbmi	r3, r3, #1
 800405c:	9300      	strmi	r3, [sp, #0]
 800405e:	2300      	movpl	r3, #0
 8004060:	2300      	movmi	r3, #0
 8004062:	9206      	str	r2, [sp, #24]
 8004064:	bf54      	ite	pl
 8004066:	9300      	strpl	r3, [sp, #0]
 8004068:	9306      	strmi	r3, [sp, #24]
 800406a:	2f00      	cmp	r7, #0
 800406c:	db39      	blt.n	80040e2 <_dtoa_r+0x21a>
 800406e:	9b06      	ldr	r3, [sp, #24]
 8004070:	970d      	str	r7, [sp, #52]	@ 0x34
 8004072:	443b      	add	r3, r7
 8004074:	9306      	str	r3, [sp, #24]
 8004076:	2300      	movs	r3, #0
 8004078:	9308      	str	r3, [sp, #32]
 800407a:	9b07      	ldr	r3, [sp, #28]
 800407c:	2b09      	cmp	r3, #9
 800407e:	d863      	bhi.n	8004148 <_dtoa_r+0x280>
 8004080:	2b05      	cmp	r3, #5
 8004082:	bfc4      	itt	gt
 8004084:	3b04      	subgt	r3, #4
 8004086:	9307      	strgt	r3, [sp, #28]
 8004088:	9b07      	ldr	r3, [sp, #28]
 800408a:	f1a3 0302 	sub.w	r3, r3, #2
 800408e:	bfcc      	ite	gt
 8004090:	2400      	movgt	r4, #0
 8004092:	2401      	movle	r4, #1
 8004094:	2b03      	cmp	r3, #3
 8004096:	d863      	bhi.n	8004160 <_dtoa_r+0x298>
 8004098:	e8df f003 	tbb	[pc, r3]
 800409c:	2b375452 	.word	0x2b375452
 80040a0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80040a4:	441e      	add	r6, r3
 80040a6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80040aa:	2b20      	cmp	r3, #32
 80040ac:	bfc1      	itttt	gt
 80040ae:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80040b2:	409f      	lslgt	r7, r3
 80040b4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80040b8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80040bc:	bfd6      	itet	le
 80040be:	f1c3 0320 	rsble	r3, r3, #32
 80040c2:	ea47 0003 	orrgt.w	r0, r7, r3
 80040c6:	fa04 f003 	lslle.w	r0, r4, r3
 80040ca:	f7fc fa3b 	bl	8000544 <__aeabi_ui2d>
 80040ce:	2201      	movs	r2, #1
 80040d0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80040d4:	3e01      	subs	r6, #1
 80040d6:	9212      	str	r2, [sp, #72]	@ 0x48
 80040d8:	e776      	b.n	8003fc8 <_dtoa_r+0x100>
 80040da:	2301      	movs	r3, #1
 80040dc:	e7b7      	b.n	800404e <_dtoa_r+0x186>
 80040de:	9010      	str	r0, [sp, #64]	@ 0x40
 80040e0:	e7b6      	b.n	8004050 <_dtoa_r+0x188>
 80040e2:	9b00      	ldr	r3, [sp, #0]
 80040e4:	1bdb      	subs	r3, r3, r7
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	427b      	negs	r3, r7
 80040ea:	9308      	str	r3, [sp, #32]
 80040ec:	2300      	movs	r3, #0
 80040ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80040f0:	e7c3      	b.n	800407a <_dtoa_r+0x1b2>
 80040f2:	2301      	movs	r3, #1
 80040f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80040f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80040f8:	eb07 0b03 	add.w	fp, r7, r3
 80040fc:	f10b 0301 	add.w	r3, fp, #1
 8004100:	2b01      	cmp	r3, #1
 8004102:	9303      	str	r3, [sp, #12]
 8004104:	bfb8      	it	lt
 8004106:	2301      	movlt	r3, #1
 8004108:	e006      	b.n	8004118 <_dtoa_r+0x250>
 800410a:	2301      	movs	r3, #1
 800410c:	9309      	str	r3, [sp, #36]	@ 0x24
 800410e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004110:	2b00      	cmp	r3, #0
 8004112:	dd28      	ble.n	8004166 <_dtoa_r+0x29e>
 8004114:	469b      	mov	fp, r3
 8004116:	9303      	str	r3, [sp, #12]
 8004118:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800411c:	2100      	movs	r1, #0
 800411e:	2204      	movs	r2, #4
 8004120:	f102 0514 	add.w	r5, r2, #20
 8004124:	429d      	cmp	r5, r3
 8004126:	d926      	bls.n	8004176 <_dtoa_r+0x2ae>
 8004128:	6041      	str	r1, [r0, #4]
 800412a:	4648      	mov	r0, r9
 800412c:	f000 fd9c 	bl	8004c68 <_Balloc>
 8004130:	4682      	mov	sl, r0
 8004132:	2800      	cmp	r0, #0
 8004134:	d142      	bne.n	80041bc <_dtoa_r+0x2f4>
 8004136:	4b1e      	ldr	r3, [pc, #120]	@ (80041b0 <_dtoa_r+0x2e8>)
 8004138:	4602      	mov	r2, r0
 800413a:	f240 11af 	movw	r1, #431	@ 0x1af
 800413e:	e6da      	b.n	8003ef6 <_dtoa_r+0x2e>
 8004140:	2300      	movs	r3, #0
 8004142:	e7e3      	b.n	800410c <_dtoa_r+0x244>
 8004144:	2300      	movs	r3, #0
 8004146:	e7d5      	b.n	80040f4 <_dtoa_r+0x22c>
 8004148:	2401      	movs	r4, #1
 800414a:	2300      	movs	r3, #0
 800414c:	9307      	str	r3, [sp, #28]
 800414e:	9409      	str	r4, [sp, #36]	@ 0x24
 8004150:	f04f 3bff 	mov.w	fp, #4294967295
 8004154:	2200      	movs	r2, #0
 8004156:	f8cd b00c 	str.w	fp, [sp, #12]
 800415a:	2312      	movs	r3, #18
 800415c:	920c      	str	r2, [sp, #48]	@ 0x30
 800415e:	e7db      	b.n	8004118 <_dtoa_r+0x250>
 8004160:	2301      	movs	r3, #1
 8004162:	9309      	str	r3, [sp, #36]	@ 0x24
 8004164:	e7f4      	b.n	8004150 <_dtoa_r+0x288>
 8004166:	f04f 0b01 	mov.w	fp, #1
 800416a:	f8cd b00c 	str.w	fp, [sp, #12]
 800416e:	465b      	mov	r3, fp
 8004170:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8004174:	e7d0      	b.n	8004118 <_dtoa_r+0x250>
 8004176:	3101      	adds	r1, #1
 8004178:	0052      	lsls	r2, r2, #1
 800417a:	e7d1      	b.n	8004120 <_dtoa_r+0x258>
 800417c:	f3af 8000 	nop.w
 8004180:	636f4361 	.word	0x636f4361
 8004184:	3fd287a7 	.word	0x3fd287a7
 8004188:	8b60c8b3 	.word	0x8b60c8b3
 800418c:	3fc68a28 	.word	0x3fc68a28
 8004190:	509f79fb 	.word	0x509f79fb
 8004194:	3fd34413 	.word	0x3fd34413
 8004198:	08005b59 	.word	0x08005b59
 800419c:	08005b70 	.word	0x08005b70
 80041a0:	7ff00000 	.word	0x7ff00000
 80041a4:	08005b29 	.word	0x08005b29
 80041a8:	3ff80000 	.word	0x3ff80000
 80041ac:	08005cc0 	.word	0x08005cc0
 80041b0:	08005bc8 	.word	0x08005bc8
 80041b4:	08005b55 	.word	0x08005b55
 80041b8:	08005b28 	.word	0x08005b28
 80041bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80041c0:	6018      	str	r0, [r3, #0]
 80041c2:	9b03      	ldr	r3, [sp, #12]
 80041c4:	2b0e      	cmp	r3, #14
 80041c6:	f200 80a1 	bhi.w	800430c <_dtoa_r+0x444>
 80041ca:	2c00      	cmp	r4, #0
 80041cc:	f000 809e 	beq.w	800430c <_dtoa_r+0x444>
 80041d0:	2f00      	cmp	r7, #0
 80041d2:	dd33      	ble.n	800423c <_dtoa_r+0x374>
 80041d4:	4b9c      	ldr	r3, [pc, #624]	@ (8004448 <_dtoa_r+0x580>)
 80041d6:	f007 020f 	and.w	r2, r7, #15
 80041da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80041de:	ed93 7b00 	vldr	d7, [r3]
 80041e2:	05f8      	lsls	r0, r7, #23
 80041e4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80041e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80041ec:	d516      	bpl.n	800421c <_dtoa_r+0x354>
 80041ee:	4b97      	ldr	r3, [pc, #604]	@ (800444c <_dtoa_r+0x584>)
 80041f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80041f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80041f8:	f7fc fb48 	bl	800088c <__aeabi_ddiv>
 80041fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004200:	f004 040f 	and.w	r4, r4, #15
 8004204:	2603      	movs	r6, #3
 8004206:	4d91      	ldr	r5, [pc, #580]	@ (800444c <_dtoa_r+0x584>)
 8004208:	b954      	cbnz	r4, 8004220 <_dtoa_r+0x358>
 800420a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800420e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004212:	f7fc fb3b 	bl	800088c <__aeabi_ddiv>
 8004216:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800421a:	e028      	b.n	800426e <_dtoa_r+0x3a6>
 800421c:	2602      	movs	r6, #2
 800421e:	e7f2      	b.n	8004206 <_dtoa_r+0x33e>
 8004220:	07e1      	lsls	r1, r4, #31
 8004222:	d508      	bpl.n	8004236 <_dtoa_r+0x36e>
 8004224:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004228:	e9d5 2300 	ldrd	r2, r3, [r5]
 800422c:	f7fc fa04 	bl	8000638 <__aeabi_dmul>
 8004230:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004234:	3601      	adds	r6, #1
 8004236:	1064      	asrs	r4, r4, #1
 8004238:	3508      	adds	r5, #8
 800423a:	e7e5      	b.n	8004208 <_dtoa_r+0x340>
 800423c:	f000 80af 	beq.w	800439e <_dtoa_r+0x4d6>
 8004240:	427c      	negs	r4, r7
 8004242:	4b81      	ldr	r3, [pc, #516]	@ (8004448 <_dtoa_r+0x580>)
 8004244:	4d81      	ldr	r5, [pc, #516]	@ (800444c <_dtoa_r+0x584>)
 8004246:	f004 020f 	and.w	r2, r4, #15
 800424a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800424e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004252:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004256:	f7fc f9ef 	bl	8000638 <__aeabi_dmul>
 800425a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800425e:	1124      	asrs	r4, r4, #4
 8004260:	2300      	movs	r3, #0
 8004262:	2602      	movs	r6, #2
 8004264:	2c00      	cmp	r4, #0
 8004266:	f040 808f 	bne.w	8004388 <_dtoa_r+0x4c0>
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1d3      	bne.n	8004216 <_dtoa_r+0x34e>
 800426e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004270:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 8094 	beq.w	80043a2 <_dtoa_r+0x4da>
 800427a:	4b75      	ldr	r3, [pc, #468]	@ (8004450 <_dtoa_r+0x588>)
 800427c:	2200      	movs	r2, #0
 800427e:	4620      	mov	r0, r4
 8004280:	4629      	mov	r1, r5
 8004282:	f7fc fc4b 	bl	8000b1c <__aeabi_dcmplt>
 8004286:	2800      	cmp	r0, #0
 8004288:	f000 808b 	beq.w	80043a2 <_dtoa_r+0x4da>
 800428c:	9b03      	ldr	r3, [sp, #12]
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 8087 	beq.w	80043a2 <_dtoa_r+0x4da>
 8004294:	f1bb 0f00 	cmp.w	fp, #0
 8004298:	dd34      	ble.n	8004304 <_dtoa_r+0x43c>
 800429a:	4620      	mov	r0, r4
 800429c:	4b6d      	ldr	r3, [pc, #436]	@ (8004454 <_dtoa_r+0x58c>)
 800429e:	2200      	movs	r2, #0
 80042a0:	4629      	mov	r1, r5
 80042a2:	f7fc f9c9 	bl	8000638 <__aeabi_dmul>
 80042a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80042aa:	f107 38ff 	add.w	r8, r7, #4294967295
 80042ae:	3601      	adds	r6, #1
 80042b0:	465c      	mov	r4, fp
 80042b2:	4630      	mov	r0, r6
 80042b4:	f7fc f956 	bl	8000564 <__aeabi_i2d>
 80042b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042bc:	f7fc f9bc 	bl	8000638 <__aeabi_dmul>
 80042c0:	4b65      	ldr	r3, [pc, #404]	@ (8004458 <_dtoa_r+0x590>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	f7fc f802 	bl	80002cc <__adddf3>
 80042c8:	4605      	mov	r5, r0
 80042ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80042ce:	2c00      	cmp	r4, #0
 80042d0:	d16a      	bne.n	80043a8 <_dtoa_r+0x4e0>
 80042d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042d6:	4b61      	ldr	r3, [pc, #388]	@ (800445c <_dtoa_r+0x594>)
 80042d8:	2200      	movs	r2, #0
 80042da:	f7fb fff5 	bl	80002c8 <__aeabi_dsub>
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80042e6:	462a      	mov	r2, r5
 80042e8:	4633      	mov	r3, r6
 80042ea:	f7fc fc35 	bl	8000b58 <__aeabi_dcmpgt>
 80042ee:	2800      	cmp	r0, #0
 80042f0:	f040 8298 	bne.w	8004824 <_dtoa_r+0x95c>
 80042f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042f8:	462a      	mov	r2, r5
 80042fa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80042fe:	f7fc fc0d 	bl	8000b1c <__aeabi_dcmplt>
 8004302:	bb38      	cbnz	r0, 8004354 <_dtoa_r+0x48c>
 8004304:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8004308:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800430c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800430e:	2b00      	cmp	r3, #0
 8004310:	f2c0 8157 	blt.w	80045c2 <_dtoa_r+0x6fa>
 8004314:	2f0e      	cmp	r7, #14
 8004316:	f300 8154 	bgt.w	80045c2 <_dtoa_r+0x6fa>
 800431a:	4b4b      	ldr	r3, [pc, #300]	@ (8004448 <_dtoa_r+0x580>)
 800431c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004320:	ed93 7b00 	vldr	d7, [r3]
 8004324:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004326:	2b00      	cmp	r3, #0
 8004328:	ed8d 7b00 	vstr	d7, [sp]
 800432c:	f280 80e5 	bge.w	80044fa <_dtoa_r+0x632>
 8004330:	9b03      	ldr	r3, [sp, #12]
 8004332:	2b00      	cmp	r3, #0
 8004334:	f300 80e1 	bgt.w	80044fa <_dtoa_r+0x632>
 8004338:	d10c      	bne.n	8004354 <_dtoa_r+0x48c>
 800433a:	4b48      	ldr	r3, [pc, #288]	@ (800445c <_dtoa_r+0x594>)
 800433c:	2200      	movs	r2, #0
 800433e:	ec51 0b17 	vmov	r0, r1, d7
 8004342:	f7fc f979 	bl	8000638 <__aeabi_dmul>
 8004346:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800434a:	f7fc fbfb 	bl	8000b44 <__aeabi_dcmpge>
 800434e:	2800      	cmp	r0, #0
 8004350:	f000 8266 	beq.w	8004820 <_dtoa_r+0x958>
 8004354:	2400      	movs	r4, #0
 8004356:	4625      	mov	r5, r4
 8004358:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800435a:	4656      	mov	r6, sl
 800435c:	ea6f 0803 	mvn.w	r8, r3
 8004360:	2700      	movs	r7, #0
 8004362:	4621      	mov	r1, r4
 8004364:	4648      	mov	r0, r9
 8004366:	f000 fcbf 	bl	8004ce8 <_Bfree>
 800436a:	2d00      	cmp	r5, #0
 800436c:	f000 80bd 	beq.w	80044ea <_dtoa_r+0x622>
 8004370:	b12f      	cbz	r7, 800437e <_dtoa_r+0x4b6>
 8004372:	42af      	cmp	r7, r5
 8004374:	d003      	beq.n	800437e <_dtoa_r+0x4b6>
 8004376:	4639      	mov	r1, r7
 8004378:	4648      	mov	r0, r9
 800437a:	f000 fcb5 	bl	8004ce8 <_Bfree>
 800437e:	4629      	mov	r1, r5
 8004380:	4648      	mov	r0, r9
 8004382:	f000 fcb1 	bl	8004ce8 <_Bfree>
 8004386:	e0b0      	b.n	80044ea <_dtoa_r+0x622>
 8004388:	07e2      	lsls	r2, r4, #31
 800438a:	d505      	bpl.n	8004398 <_dtoa_r+0x4d0>
 800438c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004390:	f7fc f952 	bl	8000638 <__aeabi_dmul>
 8004394:	3601      	adds	r6, #1
 8004396:	2301      	movs	r3, #1
 8004398:	1064      	asrs	r4, r4, #1
 800439a:	3508      	adds	r5, #8
 800439c:	e762      	b.n	8004264 <_dtoa_r+0x39c>
 800439e:	2602      	movs	r6, #2
 80043a0:	e765      	b.n	800426e <_dtoa_r+0x3a6>
 80043a2:	9c03      	ldr	r4, [sp, #12]
 80043a4:	46b8      	mov	r8, r7
 80043a6:	e784      	b.n	80042b2 <_dtoa_r+0x3ea>
 80043a8:	4b27      	ldr	r3, [pc, #156]	@ (8004448 <_dtoa_r+0x580>)
 80043aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80043ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80043b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80043b4:	4454      	add	r4, sl
 80043b6:	2900      	cmp	r1, #0
 80043b8:	d054      	beq.n	8004464 <_dtoa_r+0x59c>
 80043ba:	4929      	ldr	r1, [pc, #164]	@ (8004460 <_dtoa_r+0x598>)
 80043bc:	2000      	movs	r0, #0
 80043be:	f7fc fa65 	bl	800088c <__aeabi_ddiv>
 80043c2:	4633      	mov	r3, r6
 80043c4:	462a      	mov	r2, r5
 80043c6:	f7fb ff7f 	bl	80002c8 <__aeabi_dsub>
 80043ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80043ce:	4656      	mov	r6, sl
 80043d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80043d4:	f7fc fbe0 	bl	8000b98 <__aeabi_d2iz>
 80043d8:	4605      	mov	r5, r0
 80043da:	f7fc f8c3 	bl	8000564 <__aeabi_i2d>
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80043e6:	f7fb ff6f 	bl	80002c8 <__aeabi_dsub>
 80043ea:	3530      	adds	r5, #48	@ 0x30
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80043f4:	f806 5b01 	strb.w	r5, [r6], #1
 80043f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80043fc:	f7fc fb8e 	bl	8000b1c <__aeabi_dcmplt>
 8004400:	2800      	cmp	r0, #0
 8004402:	d172      	bne.n	80044ea <_dtoa_r+0x622>
 8004404:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004408:	4911      	ldr	r1, [pc, #68]	@ (8004450 <_dtoa_r+0x588>)
 800440a:	2000      	movs	r0, #0
 800440c:	f7fb ff5c 	bl	80002c8 <__aeabi_dsub>
 8004410:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004414:	f7fc fb82 	bl	8000b1c <__aeabi_dcmplt>
 8004418:	2800      	cmp	r0, #0
 800441a:	f040 80b4 	bne.w	8004586 <_dtoa_r+0x6be>
 800441e:	42a6      	cmp	r6, r4
 8004420:	f43f af70 	beq.w	8004304 <_dtoa_r+0x43c>
 8004424:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004428:	4b0a      	ldr	r3, [pc, #40]	@ (8004454 <_dtoa_r+0x58c>)
 800442a:	2200      	movs	r2, #0
 800442c:	f7fc f904 	bl	8000638 <__aeabi_dmul>
 8004430:	4b08      	ldr	r3, [pc, #32]	@ (8004454 <_dtoa_r+0x58c>)
 8004432:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004436:	2200      	movs	r2, #0
 8004438:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800443c:	f7fc f8fc 	bl	8000638 <__aeabi_dmul>
 8004440:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004444:	e7c4      	b.n	80043d0 <_dtoa_r+0x508>
 8004446:	bf00      	nop
 8004448:	08005cc0 	.word	0x08005cc0
 800444c:	08005c98 	.word	0x08005c98
 8004450:	3ff00000 	.word	0x3ff00000
 8004454:	40240000 	.word	0x40240000
 8004458:	401c0000 	.word	0x401c0000
 800445c:	40140000 	.word	0x40140000
 8004460:	3fe00000 	.word	0x3fe00000
 8004464:	4631      	mov	r1, r6
 8004466:	4628      	mov	r0, r5
 8004468:	f7fc f8e6 	bl	8000638 <__aeabi_dmul>
 800446c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004470:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004472:	4656      	mov	r6, sl
 8004474:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004478:	f7fc fb8e 	bl	8000b98 <__aeabi_d2iz>
 800447c:	4605      	mov	r5, r0
 800447e:	f7fc f871 	bl	8000564 <__aeabi_i2d>
 8004482:	4602      	mov	r2, r0
 8004484:	460b      	mov	r3, r1
 8004486:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800448a:	f7fb ff1d 	bl	80002c8 <__aeabi_dsub>
 800448e:	3530      	adds	r5, #48	@ 0x30
 8004490:	f806 5b01 	strb.w	r5, [r6], #1
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	42a6      	cmp	r6, r4
 800449a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800449e:	f04f 0200 	mov.w	r2, #0
 80044a2:	d124      	bne.n	80044ee <_dtoa_r+0x626>
 80044a4:	4baf      	ldr	r3, [pc, #700]	@ (8004764 <_dtoa_r+0x89c>)
 80044a6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80044aa:	f7fb ff0f 	bl	80002cc <__adddf3>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80044b6:	f7fc fb4f 	bl	8000b58 <__aeabi_dcmpgt>
 80044ba:	2800      	cmp	r0, #0
 80044bc:	d163      	bne.n	8004586 <_dtoa_r+0x6be>
 80044be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80044c2:	49a8      	ldr	r1, [pc, #672]	@ (8004764 <_dtoa_r+0x89c>)
 80044c4:	2000      	movs	r0, #0
 80044c6:	f7fb feff 	bl	80002c8 <__aeabi_dsub>
 80044ca:	4602      	mov	r2, r0
 80044cc:	460b      	mov	r3, r1
 80044ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80044d2:	f7fc fb23 	bl	8000b1c <__aeabi_dcmplt>
 80044d6:	2800      	cmp	r0, #0
 80044d8:	f43f af14 	beq.w	8004304 <_dtoa_r+0x43c>
 80044dc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80044de:	1e73      	subs	r3, r6, #1
 80044e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80044e2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80044e6:	2b30      	cmp	r3, #48	@ 0x30
 80044e8:	d0f8      	beq.n	80044dc <_dtoa_r+0x614>
 80044ea:	4647      	mov	r7, r8
 80044ec:	e03b      	b.n	8004566 <_dtoa_r+0x69e>
 80044ee:	4b9e      	ldr	r3, [pc, #632]	@ (8004768 <_dtoa_r+0x8a0>)
 80044f0:	f7fc f8a2 	bl	8000638 <__aeabi_dmul>
 80044f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80044f8:	e7bc      	b.n	8004474 <_dtoa_r+0x5ac>
 80044fa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80044fe:	4656      	mov	r6, sl
 8004500:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004504:	4620      	mov	r0, r4
 8004506:	4629      	mov	r1, r5
 8004508:	f7fc f9c0 	bl	800088c <__aeabi_ddiv>
 800450c:	f7fc fb44 	bl	8000b98 <__aeabi_d2iz>
 8004510:	4680      	mov	r8, r0
 8004512:	f7fc f827 	bl	8000564 <__aeabi_i2d>
 8004516:	e9dd 2300 	ldrd	r2, r3, [sp]
 800451a:	f7fc f88d 	bl	8000638 <__aeabi_dmul>
 800451e:	4602      	mov	r2, r0
 8004520:	460b      	mov	r3, r1
 8004522:	4620      	mov	r0, r4
 8004524:	4629      	mov	r1, r5
 8004526:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800452a:	f7fb fecd 	bl	80002c8 <__aeabi_dsub>
 800452e:	f806 4b01 	strb.w	r4, [r6], #1
 8004532:	9d03      	ldr	r5, [sp, #12]
 8004534:	eba6 040a 	sub.w	r4, r6, sl
 8004538:	42a5      	cmp	r5, r4
 800453a:	4602      	mov	r2, r0
 800453c:	460b      	mov	r3, r1
 800453e:	d133      	bne.n	80045a8 <_dtoa_r+0x6e0>
 8004540:	f7fb fec4 	bl	80002cc <__adddf3>
 8004544:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004548:	4604      	mov	r4, r0
 800454a:	460d      	mov	r5, r1
 800454c:	f7fc fb04 	bl	8000b58 <__aeabi_dcmpgt>
 8004550:	b9c0      	cbnz	r0, 8004584 <_dtoa_r+0x6bc>
 8004552:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004556:	4620      	mov	r0, r4
 8004558:	4629      	mov	r1, r5
 800455a:	f7fc fad5 	bl	8000b08 <__aeabi_dcmpeq>
 800455e:	b110      	cbz	r0, 8004566 <_dtoa_r+0x69e>
 8004560:	f018 0f01 	tst.w	r8, #1
 8004564:	d10e      	bne.n	8004584 <_dtoa_r+0x6bc>
 8004566:	9902      	ldr	r1, [sp, #8]
 8004568:	4648      	mov	r0, r9
 800456a:	f000 fbbd 	bl	8004ce8 <_Bfree>
 800456e:	2300      	movs	r3, #0
 8004570:	7033      	strb	r3, [r6, #0]
 8004572:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004574:	3701      	adds	r7, #1
 8004576:	601f      	str	r7, [r3, #0]
 8004578:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 824b 	beq.w	8004a16 <_dtoa_r+0xb4e>
 8004580:	601e      	str	r6, [r3, #0]
 8004582:	e248      	b.n	8004a16 <_dtoa_r+0xb4e>
 8004584:	46b8      	mov	r8, r7
 8004586:	4633      	mov	r3, r6
 8004588:	461e      	mov	r6, r3
 800458a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800458e:	2a39      	cmp	r2, #57	@ 0x39
 8004590:	d106      	bne.n	80045a0 <_dtoa_r+0x6d8>
 8004592:	459a      	cmp	sl, r3
 8004594:	d1f8      	bne.n	8004588 <_dtoa_r+0x6c0>
 8004596:	2230      	movs	r2, #48	@ 0x30
 8004598:	f108 0801 	add.w	r8, r8, #1
 800459c:	f88a 2000 	strb.w	r2, [sl]
 80045a0:	781a      	ldrb	r2, [r3, #0]
 80045a2:	3201      	adds	r2, #1
 80045a4:	701a      	strb	r2, [r3, #0]
 80045a6:	e7a0      	b.n	80044ea <_dtoa_r+0x622>
 80045a8:	4b6f      	ldr	r3, [pc, #444]	@ (8004768 <_dtoa_r+0x8a0>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	f7fc f844 	bl	8000638 <__aeabi_dmul>
 80045b0:	2200      	movs	r2, #0
 80045b2:	2300      	movs	r3, #0
 80045b4:	4604      	mov	r4, r0
 80045b6:	460d      	mov	r5, r1
 80045b8:	f7fc faa6 	bl	8000b08 <__aeabi_dcmpeq>
 80045bc:	2800      	cmp	r0, #0
 80045be:	d09f      	beq.n	8004500 <_dtoa_r+0x638>
 80045c0:	e7d1      	b.n	8004566 <_dtoa_r+0x69e>
 80045c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80045c4:	2a00      	cmp	r2, #0
 80045c6:	f000 80ea 	beq.w	800479e <_dtoa_r+0x8d6>
 80045ca:	9a07      	ldr	r2, [sp, #28]
 80045cc:	2a01      	cmp	r2, #1
 80045ce:	f300 80cd 	bgt.w	800476c <_dtoa_r+0x8a4>
 80045d2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80045d4:	2a00      	cmp	r2, #0
 80045d6:	f000 80c1 	beq.w	800475c <_dtoa_r+0x894>
 80045da:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80045de:	9c08      	ldr	r4, [sp, #32]
 80045e0:	9e00      	ldr	r6, [sp, #0]
 80045e2:	9a00      	ldr	r2, [sp, #0]
 80045e4:	441a      	add	r2, r3
 80045e6:	9200      	str	r2, [sp, #0]
 80045e8:	9a06      	ldr	r2, [sp, #24]
 80045ea:	2101      	movs	r1, #1
 80045ec:	441a      	add	r2, r3
 80045ee:	4648      	mov	r0, r9
 80045f0:	9206      	str	r2, [sp, #24]
 80045f2:	f000 fc2d 	bl	8004e50 <__i2b>
 80045f6:	4605      	mov	r5, r0
 80045f8:	b166      	cbz	r6, 8004614 <_dtoa_r+0x74c>
 80045fa:	9b06      	ldr	r3, [sp, #24]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	dd09      	ble.n	8004614 <_dtoa_r+0x74c>
 8004600:	42b3      	cmp	r3, r6
 8004602:	9a00      	ldr	r2, [sp, #0]
 8004604:	bfa8      	it	ge
 8004606:	4633      	movge	r3, r6
 8004608:	1ad2      	subs	r2, r2, r3
 800460a:	9200      	str	r2, [sp, #0]
 800460c:	9a06      	ldr	r2, [sp, #24]
 800460e:	1af6      	subs	r6, r6, r3
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	9306      	str	r3, [sp, #24]
 8004614:	9b08      	ldr	r3, [sp, #32]
 8004616:	b30b      	cbz	r3, 800465c <_dtoa_r+0x794>
 8004618:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 80c6 	beq.w	80047ac <_dtoa_r+0x8e4>
 8004620:	2c00      	cmp	r4, #0
 8004622:	f000 80c0 	beq.w	80047a6 <_dtoa_r+0x8de>
 8004626:	4629      	mov	r1, r5
 8004628:	4622      	mov	r2, r4
 800462a:	4648      	mov	r0, r9
 800462c:	f000 fcc8 	bl	8004fc0 <__pow5mult>
 8004630:	9a02      	ldr	r2, [sp, #8]
 8004632:	4601      	mov	r1, r0
 8004634:	4605      	mov	r5, r0
 8004636:	4648      	mov	r0, r9
 8004638:	f000 fc20 	bl	8004e7c <__multiply>
 800463c:	9902      	ldr	r1, [sp, #8]
 800463e:	4680      	mov	r8, r0
 8004640:	4648      	mov	r0, r9
 8004642:	f000 fb51 	bl	8004ce8 <_Bfree>
 8004646:	9b08      	ldr	r3, [sp, #32]
 8004648:	1b1b      	subs	r3, r3, r4
 800464a:	9308      	str	r3, [sp, #32]
 800464c:	f000 80b1 	beq.w	80047b2 <_dtoa_r+0x8ea>
 8004650:	9a08      	ldr	r2, [sp, #32]
 8004652:	4641      	mov	r1, r8
 8004654:	4648      	mov	r0, r9
 8004656:	f000 fcb3 	bl	8004fc0 <__pow5mult>
 800465a:	9002      	str	r0, [sp, #8]
 800465c:	2101      	movs	r1, #1
 800465e:	4648      	mov	r0, r9
 8004660:	f000 fbf6 	bl	8004e50 <__i2b>
 8004664:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004666:	4604      	mov	r4, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 81d8 	beq.w	8004a1e <_dtoa_r+0xb56>
 800466e:	461a      	mov	r2, r3
 8004670:	4601      	mov	r1, r0
 8004672:	4648      	mov	r0, r9
 8004674:	f000 fca4 	bl	8004fc0 <__pow5mult>
 8004678:	9b07      	ldr	r3, [sp, #28]
 800467a:	2b01      	cmp	r3, #1
 800467c:	4604      	mov	r4, r0
 800467e:	f300 809f 	bgt.w	80047c0 <_dtoa_r+0x8f8>
 8004682:	9b04      	ldr	r3, [sp, #16]
 8004684:	2b00      	cmp	r3, #0
 8004686:	f040 8097 	bne.w	80047b8 <_dtoa_r+0x8f0>
 800468a:	9b05      	ldr	r3, [sp, #20]
 800468c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004690:	2b00      	cmp	r3, #0
 8004692:	f040 8093 	bne.w	80047bc <_dtoa_r+0x8f4>
 8004696:	9b05      	ldr	r3, [sp, #20]
 8004698:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800469c:	0d1b      	lsrs	r3, r3, #20
 800469e:	051b      	lsls	r3, r3, #20
 80046a0:	b133      	cbz	r3, 80046b0 <_dtoa_r+0x7e8>
 80046a2:	9b00      	ldr	r3, [sp, #0]
 80046a4:	3301      	adds	r3, #1
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	9b06      	ldr	r3, [sp, #24]
 80046aa:	3301      	adds	r3, #1
 80046ac:	9306      	str	r3, [sp, #24]
 80046ae:	2301      	movs	r3, #1
 80046b0:	9308      	str	r3, [sp, #32]
 80046b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 81b8 	beq.w	8004a2a <_dtoa_r+0xb62>
 80046ba:	6923      	ldr	r3, [r4, #16]
 80046bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80046c0:	6918      	ldr	r0, [r3, #16]
 80046c2:	f000 fb79 	bl	8004db8 <__hi0bits>
 80046c6:	f1c0 0020 	rsb	r0, r0, #32
 80046ca:	9b06      	ldr	r3, [sp, #24]
 80046cc:	4418      	add	r0, r3
 80046ce:	f010 001f 	ands.w	r0, r0, #31
 80046d2:	f000 8082 	beq.w	80047da <_dtoa_r+0x912>
 80046d6:	f1c0 0320 	rsb	r3, r0, #32
 80046da:	2b04      	cmp	r3, #4
 80046dc:	dd73      	ble.n	80047c6 <_dtoa_r+0x8fe>
 80046de:	9b00      	ldr	r3, [sp, #0]
 80046e0:	f1c0 001c 	rsb	r0, r0, #28
 80046e4:	4403      	add	r3, r0
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	9b06      	ldr	r3, [sp, #24]
 80046ea:	4403      	add	r3, r0
 80046ec:	4406      	add	r6, r0
 80046ee:	9306      	str	r3, [sp, #24]
 80046f0:	9b00      	ldr	r3, [sp, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	dd05      	ble.n	8004702 <_dtoa_r+0x83a>
 80046f6:	9902      	ldr	r1, [sp, #8]
 80046f8:	461a      	mov	r2, r3
 80046fa:	4648      	mov	r0, r9
 80046fc:	f000 fcba 	bl	8005074 <__lshift>
 8004700:	9002      	str	r0, [sp, #8]
 8004702:	9b06      	ldr	r3, [sp, #24]
 8004704:	2b00      	cmp	r3, #0
 8004706:	dd05      	ble.n	8004714 <_dtoa_r+0x84c>
 8004708:	4621      	mov	r1, r4
 800470a:	461a      	mov	r2, r3
 800470c:	4648      	mov	r0, r9
 800470e:	f000 fcb1 	bl	8005074 <__lshift>
 8004712:	4604      	mov	r4, r0
 8004714:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004716:	2b00      	cmp	r3, #0
 8004718:	d061      	beq.n	80047de <_dtoa_r+0x916>
 800471a:	9802      	ldr	r0, [sp, #8]
 800471c:	4621      	mov	r1, r4
 800471e:	f000 fd15 	bl	800514c <__mcmp>
 8004722:	2800      	cmp	r0, #0
 8004724:	da5b      	bge.n	80047de <_dtoa_r+0x916>
 8004726:	2300      	movs	r3, #0
 8004728:	9902      	ldr	r1, [sp, #8]
 800472a:	220a      	movs	r2, #10
 800472c:	4648      	mov	r0, r9
 800472e:	f000 fafd 	bl	8004d2c <__multadd>
 8004732:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004734:	9002      	str	r0, [sp, #8]
 8004736:	f107 38ff 	add.w	r8, r7, #4294967295
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 8177 	beq.w	8004a2e <_dtoa_r+0xb66>
 8004740:	4629      	mov	r1, r5
 8004742:	2300      	movs	r3, #0
 8004744:	220a      	movs	r2, #10
 8004746:	4648      	mov	r0, r9
 8004748:	f000 faf0 	bl	8004d2c <__multadd>
 800474c:	f1bb 0f00 	cmp.w	fp, #0
 8004750:	4605      	mov	r5, r0
 8004752:	dc6f      	bgt.n	8004834 <_dtoa_r+0x96c>
 8004754:	9b07      	ldr	r3, [sp, #28]
 8004756:	2b02      	cmp	r3, #2
 8004758:	dc49      	bgt.n	80047ee <_dtoa_r+0x926>
 800475a:	e06b      	b.n	8004834 <_dtoa_r+0x96c>
 800475c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800475e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004762:	e73c      	b.n	80045de <_dtoa_r+0x716>
 8004764:	3fe00000 	.word	0x3fe00000
 8004768:	40240000 	.word	0x40240000
 800476c:	9b03      	ldr	r3, [sp, #12]
 800476e:	1e5c      	subs	r4, r3, #1
 8004770:	9b08      	ldr	r3, [sp, #32]
 8004772:	42a3      	cmp	r3, r4
 8004774:	db09      	blt.n	800478a <_dtoa_r+0x8c2>
 8004776:	1b1c      	subs	r4, r3, r4
 8004778:	9b03      	ldr	r3, [sp, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	f6bf af30 	bge.w	80045e0 <_dtoa_r+0x718>
 8004780:	9b00      	ldr	r3, [sp, #0]
 8004782:	9a03      	ldr	r2, [sp, #12]
 8004784:	1a9e      	subs	r6, r3, r2
 8004786:	2300      	movs	r3, #0
 8004788:	e72b      	b.n	80045e2 <_dtoa_r+0x71a>
 800478a:	9b08      	ldr	r3, [sp, #32]
 800478c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800478e:	9408      	str	r4, [sp, #32]
 8004790:	1ae3      	subs	r3, r4, r3
 8004792:	441a      	add	r2, r3
 8004794:	9e00      	ldr	r6, [sp, #0]
 8004796:	9b03      	ldr	r3, [sp, #12]
 8004798:	920d      	str	r2, [sp, #52]	@ 0x34
 800479a:	2400      	movs	r4, #0
 800479c:	e721      	b.n	80045e2 <_dtoa_r+0x71a>
 800479e:	9c08      	ldr	r4, [sp, #32]
 80047a0:	9e00      	ldr	r6, [sp, #0]
 80047a2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80047a4:	e728      	b.n	80045f8 <_dtoa_r+0x730>
 80047a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80047aa:	e751      	b.n	8004650 <_dtoa_r+0x788>
 80047ac:	9a08      	ldr	r2, [sp, #32]
 80047ae:	9902      	ldr	r1, [sp, #8]
 80047b0:	e750      	b.n	8004654 <_dtoa_r+0x78c>
 80047b2:	f8cd 8008 	str.w	r8, [sp, #8]
 80047b6:	e751      	b.n	800465c <_dtoa_r+0x794>
 80047b8:	2300      	movs	r3, #0
 80047ba:	e779      	b.n	80046b0 <_dtoa_r+0x7e8>
 80047bc:	9b04      	ldr	r3, [sp, #16]
 80047be:	e777      	b.n	80046b0 <_dtoa_r+0x7e8>
 80047c0:	2300      	movs	r3, #0
 80047c2:	9308      	str	r3, [sp, #32]
 80047c4:	e779      	b.n	80046ba <_dtoa_r+0x7f2>
 80047c6:	d093      	beq.n	80046f0 <_dtoa_r+0x828>
 80047c8:	9a00      	ldr	r2, [sp, #0]
 80047ca:	331c      	adds	r3, #28
 80047cc:	441a      	add	r2, r3
 80047ce:	9200      	str	r2, [sp, #0]
 80047d0:	9a06      	ldr	r2, [sp, #24]
 80047d2:	441a      	add	r2, r3
 80047d4:	441e      	add	r6, r3
 80047d6:	9206      	str	r2, [sp, #24]
 80047d8:	e78a      	b.n	80046f0 <_dtoa_r+0x828>
 80047da:	4603      	mov	r3, r0
 80047dc:	e7f4      	b.n	80047c8 <_dtoa_r+0x900>
 80047de:	9b03      	ldr	r3, [sp, #12]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	46b8      	mov	r8, r7
 80047e4:	dc20      	bgt.n	8004828 <_dtoa_r+0x960>
 80047e6:	469b      	mov	fp, r3
 80047e8:	9b07      	ldr	r3, [sp, #28]
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	dd1e      	ble.n	800482c <_dtoa_r+0x964>
 80047ee:	f1bb 0f00 	cmp.w	fp, #0
 80047f2:	f47f adb1 	bne.w	8004358 <_dtoa_r+0x490>
 80047f6:	4621      	mov	r1, r4
 80047f8:	465b      	mov	r3, fp
 80047fa:	2205      	movs	r2, #5
 80047fc:	4648      	mov	r0, r9
 80047fe:	f000 fa95 	bl	8004d2c <__multadd>
 8004802:	4601      	mov	r1, r0
 8004804:	4604      	mov	r4, r0
 8004806:	9802      	ldr	r0, [sp, #8]
 8004808:	f000 fca0 	bl	800514c <__mcmp>
 800480c:	2800      	cmp	r0, #0
 800480e:	f77f ada3 	ble.w	8004358 <_dtoa_r+0x490>
 8004812:	4656      	mov	r6, sl
 8004814:	2331      	movs	r3, #49	@ 0x31
 8004816:	f806 3b01 	strb.w	r3, [r6], #1
 800481a:	f108 0801 	add.w	r8, r8, #1
 800481e:	e59f      	b.n	8004360 <_dtoa_r+0x498>
 8004820:	9c03      	ldr	r4, [sp, #12]
 8004822:	46b8      	mov	r8, r7
 8004824:	4625      	mov	r5, r4
 8004826:	e7f4      	b.n	8004812 <_dtoa_r+0x94a>
 8004828:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800482c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 8101 	beq.w	8004a36 <_dtoa_r+0xb6e>
 8004834:	2e00      	cmp	r6, #0
 8004836:	dd05      	ble.n	8004844 <_dtoa_r+0x97c>
 8004838:	4629      	mov	r1, r5
 800483a:	4632      	mov	r2, r6
 800483c:	4648      	mov	r0, r9
 800483e:	f000 fc19 	bl	8005074 <__lshift>
 8004842:	4605      	mov	r5, r0
 8004844:	9b08      	ldr	r3, [sp, #32]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d05c      	beq.n	8004904 <_dtoa_r+0xa3c>
 800484a:	6869      	ldr	r1, [r5, #4]
 800484c:	4648      	mov	r0, r9
 800484e:	f000 fa0b 	bl	8004c68 <_Balloc>
 8004852:	4606      	mov	r6, r0
 8004854:	b928      	cbnz	r0, 8004862 <_dtoa_r+0x99a>
 8004856:	4b82      	ldr	r3, [pc, #520]	@ (8004a60 <_dtoa_r+0xb98>)
 8004858:	4602      	mov	r2, r0
 800485a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800485e:	f7ff bb4a 	b.w	8003ef6 <_dtoa_r+0x2e>
 8004862:	692a      	ldr	r2, [r5, #16]
 8004864:	3202      	adds	r2, #2
 8004866:	0092      	lsls	r2, r2, #2
 8004868:	f105 010c 	add.w	r1, r5, #12
 800486c:	300c      	adds	r0, #12
 800486e:	f000 fff7 	bl	8005860 <memcpy>
 8004872:	2201      	movs	r2, #1
 8004874:	4631      	mov	r1, r6
 8004876:	4648      	mov	r0, r9
 8004878:	f000 fbfc 	bl	8005074 <__lshift>
 800487c:	f10a 0301 	add.w	r3, sl, #1
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	eb0a 030b 	add.w	r3, sl, fp
 8004886:	9308      	str	r3, [sp, #32]
 8004888:	9b04      	ldr	r3, [sp, #16]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	462f      	mov	r7, r5
 8004890:	9306      	str	r3, [sp, #24]
 8004892:	4605      	mov	r5, r0
 8004894:	9b00      	ldr	r3, [sp, #0]
 8004896:	9802      	ldr	r0, [sp, #8]
 8004898:	4621      	mov	r1, r4
 800489a:	f103 3bff 	add.w	fp, r3, #4294967295
 800489e:	f7ff fa88 	bl	8003db2 <quorem>
 80048a2:	4603      	mov	r3, r0
 80048a4:	3330      	adds	r3, #48	@ 0x30
 80048a6:	9003      	str	r0, [sp, #12]
 80048a8:	4639      	mov	r1, r7
 80048aa:	9802      	ldr	r0, [sp, #8]
 80048ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80048ae:	f000 fc4d 	bl	800514c <__mcmp>
 80048b2:	462a      	mov	r2, r5
 80048b4:	9004      	str	r0, [sp, #16]
 80048b6:	4621      	mov	r1, r4
 80048b8:	4648      	mov	r0, r9
 80048ba:	f000 fc63 	bl	8005184 <__mdiff>
 80048be:	68c2      	ldr	r2, [r0, #12]
 80048c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048c2:	4606      	mov	r6, r0
 80048c4:	bb02      	cbnz	r2, 8004908 <_dtoa_r+0xa40>
 80048c6:	4601      	mov	r1, r0
 80048c8:	9802      	ldr	r0, [sp, #8]
 80048ca:	f000 fc3f 	bl	800514c <__mcmp>
 80048ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048d0:	4602      	mov	r2, r0
 80048d2:	4631      	mov	r1, r6
 80048d4:	4648      	mov	r0, r9
 80048d6:	920c      	str	r2, [sp, #48]	@ 0x30
 80048d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80048da:	f000 fa05 	bl	8004ce8 <_Bfree>
 80048de:	9b07      	ldr	r3, [sp, #28]
 80048e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80048e2:	9e00      	ldr	r6, [sp, #0]
 80048e4:	ea42 0103 	orr.w	r1, r2, r3
 80048e8:	9b06      	ldr	r3, [sp, #24]
 80048ea:	4319      	orrs	r1, r3
 80048ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048ee:	d10d      	bne.n	800490c <_dtoa_r+0xa44>
 80048f0:	2b39      	cmp	r3, #57	@ 0x39
 80048f2:	d027      	beq.n	8004944 <_dtoa_r+0xa7c>
 80048f4:	9a04      	ldr	r2, [sp, #16]
 80048f6:	2a00      	cmp	r2, #0
 80048f8:	dd01      	ble.n	80048fe <_dtoa_r+0xa36>
 80048fa:	9b03      	ldr	r3, [sp, #12]
 80048fc:	3331      	adds	r3, #49	@ 0x31
 80048fe:	f88b 3000 	strb.w	r3, [fp]
 8004902:	e52e      	b.n	8004362 <_dtoa_r+0x49a>
 8004904:	4628      	mov	r0, r5
 8004906:	e7b9      	b.n	800487c <_dtoa_r+0x9b4>
 8004908:	2201      	movs	r2, #1
 800490a:	e7e2      	b.n	80048d2 <_dtoa_r+0xa0a>
 800490c:	9904      	ldr	r1, [sp, #16]
 800490e:	2900      	cmp	r1, #0
 8004910:	db04      	blt.n	800491c <_dtoa_r+0xa54>
 8004912:	9807      	ldr	r0, [sp, #28]
 8004914:	4301      	orrs	r1, r0
 8004916:	9806      	ldr	r0, [sp, #24]
 8004918:	4301      	orrs	r1, r0
 800491a:	d120      	bne.n	800495e <_dtoa_r+0xa96>
 800491c:	2a00      	cmp	r2, #0
 800491e:	ddee      	ble.n	80048fe <_dtoa_r+0xa36>
 8004920:	9902      	ldr	r1, [sp, #8]
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	2201      	movs	r2, #1
 8004926:	4648      	mov	r0, r9
 8004928:	f000 fba4 	bl	8005074 <__lshift>
 800492c:	4621      	mov	r1, r4
 800492e:	9002      	str	r0, [sp, #8]
 8004930:	f000 fc0c 	bl	800514c <__mcmp>
 8004934:	2800      	cmp	r0, #0
 8004936:	9b00      	ldr	r3, [sp, #0]
 8004938:	dc02      	bgt.n	8004940 <_dtoa_r+0xa78>
 800493a:	d1e0      	bne.n	80048fe <_dtoa_r+0xa36>
 800493c:	07da      	lsls	r2, r3, #31
 800493e:	d5de      	bpl.n	80048fe <_dtoa_r+0xa36>
 8004940:	2b39      	cmp	r3, #57	@ 0x39
 8004942:	d1da      	bne.n	80048fa <_dtoa_r+0xa32>
 8004944:	2339      	movs	r3, #57	@ 0x39
 8004946:	f88b 3000 	strb.w	r3, [fp]
 800494a:	4633      	mov	r3, r6
 800494c:	461e      	mov	r6, r3
 800494e:	3b01      	subs	r3, #1
 8004950:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004954:	2a39      	cmp	r2, #57	@ 0x39
 8004956:	d04e      	beq.n	80049f6 <_dtoa_r+0xb2e>
 8004958:	3201      	adds	r2, #1
 800495a:	701a      	strb	r2, [r3, #0]
 800495c:	e501      	b.n	8004362 <_dtoa_r+0x49a>
 800495e:	2a00      	cmp	r2, #0
 8004960:	dd03      	ble.n	800496a <_dtoa_r+0xaa2>
 8004962:	2b39      	cmp	r3, #57	@ 0x39
 8004964:	d0ee      	beq.n	8004944 <_dtoa_r+0xa7c>
 8004966:	3301      	adds	r3, #1
 8004968:	e7c9      	b.n	80048fe <_dtoa_r+0xa36>
 800496a:	9a00      	ldr	r2, [sp, #0]
 800496c:	9908      	ldr	r1, [sp, #32]
 800496e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004972:	428a      	cmp	r2, r1
 8004974:	d028      	beq.n	80049c8 <_dtoa_r+0xb00>
 8004976:	9902      	ldr	r1, [sp, #8]
 8004978:	2300      	movs	r3, #0
 800497a:	220a      	movs	r2, #10
 800497c:	4648      	mov	r0, r9
 800497e:	f000 f9d5 	bl	8004d2c <__multadd>
 8004982:	42af      	cmp	r7, r5
 8004984:	9002      	str	r0, [sp, #8]
 8004986:	f04f 0300 	mov.w	r3, #0
 800498a:	f04f 020a 	mov.w	r2, #10
 800498e:	4639      	mov	r1, r7
 8004990:	4648      	mov	r0, r9
 8004992:	d107      	bne.n	80049a4 <_dtoa_r+0xadc>
 8004994:	f000 f9ca 	bl	8004d2c <__multadd>
 8004998:	4607      	mov	r7, r0
 800499a:	4605      	mov	r5, r0
 800499c:	9b00      	ldr	r3, [sp, #0]
 800499e:	3301      	adds	r3, #1
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	e777      	b.n	8004894 <_dtoa_r+0x9cc>
 80049a4:	f000 f9c2 	bl	8004d2c <__multadd>
 80049a8:	4629      	mov	r1, r5
 80049aa:	4607      	mov	r7, r0
 80049ac:	2300      	movs	r3, #0
 80049ae:	220a      	movs	r2, #10
 80049b0:	4648      	mov	r0, r9
 80049b2:	f000 f9bb 	bl	8004d2c <__multadd>
 80049b6:	4605      	mov	r5, r0
 80049b8:	e7f0      	b.n	800499c <_dtoa_r+0xad4>
 80049ba:	f1bb 0f00 	cmp.w	fp, #0
 80049be:	bfcc      	ite	gt
 80049c0:	465e      	movgt	r6, fp
 80049c2:	2601      	movle	r6, #1
 80049c4:	4456      	add	r6, sl
 80049c6:	2700      	movs	r7, #0
 80049c8:	9902      	ldr	r1, [sp, #8]
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	2201      	movs	r2, #1
 80049ce:	4648      	mov	r0, r9
 80049d0:	f000 fb50 	bl	8005074 <__lshift>
 80049d4:	4621      	mov	r1, r4
 80049d6:	9002      	str	r0, [sp, #8]
 80049d8:	f000 fbb8 	bl	800514c <__mcmp>
 80049dc:	2800      	cmp	r0, #0
 80049de:	dcb4      	bgt.n	800494a <_dtoa_r+0xa82>
 80049e0:	d102      	bne.n	80049e8 <_dtoa_r+0xb20>
 80049e2:	9b00      	ldr	r3, [sp, #0]
 80049e4:	07db      	lsls	r3, r3, #31
 80049e6:	d4b0      	bmi.n	800494a <_dtoa_r+0xa82>
 80049e8:	4633      	mov	r3, r6
 80049ea:	461e      	mov	r6, r3
 80049ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80049f0:	2a30      	cmp	r2, #48	@ 0x30
 80049f2:	d0fa      	beq.n	80049ea <_dtoa_r+0xb22>
 80049f4:	e4b5      	b.n	8004362 <_dtoa_r+0x49a>
 80049f6:	459a      	cmp	sl, r3
 80049f8:	d1a8      	bne.n	800494c <_dtoa_r+0xa84>
 80049fa:	2331      	movs	r3, #49	@ 0x31
 80049fc:	f108 0801 	add.w	r8, r8, #1
 8004a00:	f88a 3000 	strb.w	r3, [sl]
 8004a04:	e4ad      	b.n	8004362 <_dtoa_r+0x49a>
 8004a06:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004a08:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8004a64 <_dtoa_r+0xb9c>
 8004a0c:	b11b      	cbz	r3, 8004a16 <_dtoa_r+0xb4e>
 8004a0e:	f10a 0308 	add.w	r3, sl, #8
 8004a12:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8004a14:	6013      	str	r3, [r2, #0]
 8004a16:	4650      	mov	r0, sl
 8004a18:	b017      	add	sp, #92	@ 0x5c
 8004a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a1e:	9b07      	ldr	r3, [sp, #28]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	f77f ae2e 	ble.w	8004682 <_dtoa_r+0x7ba>
 8004a26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004a28:	9308      	str	r3, [sp, #32]
 8004a2a:	2001      	movs	r0, #1
 8004a2c:	e64d      	b.n	80046ca <_dtoa_r+0x802>
 8004a2e:	f1bb 0f00 	cmp.w	fp, #0
 8004a32:	f77f aed9 	ble.w	80047e8 <_dtoa_r+0x920>
 8004a36:	4656      	mov	r6, sl
 8004a38:	9802      	ldr	r0, [sp, #8]
 8004a3a:	4621      	mov	r1, r4
 8004a3c:	f7ff f9b9 	bl	8003db2 <quorem>
 8004a40:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8004a44:	f806 3b01 	strb.w	r3, [r6], #1
 8004a48:	eba6 020a 	sub.w	r2, r6, sl
 8004a4c:	4593      	cmp	fp, r2
 8004a4e:	ddb4      	ble.n	80049ba <_dtoa_r+0xaf2>
 8004a50:	9902      	ldr	r1, [sp, #8]
 8004a52:	2300      	movs	r3, #0
 8004a54:	220a      	movs	r2, #10
 8004a56:	4648      	mov	r0, r9
 8004a58:	f000 f968 	bl	8004d2c <__multadd>
 8004a5c:	9002      	str	r0, [sp, #8]
 8004a5e:	e7eb      	b.n	8004a38 <_dtoa_r+0xb70>
 8004a60:	08005bc8 	.word	0x08005bc8
 8004a64:	08005b4c 	.word	0x08005b4c

08004a68 <_free_r>:
 8004a68:	b538      	push	{r3, r4, r5, lr}
 8004a6a:	4605      	mov	r5, r0
 8004a6c:	2900      	cmp	r1, #0
 8004a6e:	d041      	beq.n	8004af4 <_free_r+0x8c>
 8004a70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a74:	1f0c      	subs	r4, r1, #4
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	bfb8      	it	lt
 8004a7a:	18e4      	addlt	r4, r4, r3
 8004a7c:	f000 f8e8 	bl	8004c50 <__malloc_lock>
 8004a80:	4a1d      	ldr	r2, [pc, #116]	@ (8004af8 <_free_r+0x90>)
 8004a82:	6813      	ldr	r3, [r2, #0]
 8004a84:	b933      	cbnz	r3, 8004a94 <_free_r+0x2c>
 8004a86:	6063      	str	r3, [r4, #4]
 8004a88:	6014      	str	r4, [r2, #0]
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a90:	f000 b8e4 	b.w	8004c5c <__malloc_unlock>
 8004a94:	42a3      	cmp	r3, r4
 8004a96:	d908      	bls.n	8004aaa <_free_r+0x42>
 8004a98:	6820      	ldr	r0, [r4, #0]
 8004a9a:	1821      	adds	r1, r4, r0
 8004a9c:	428b      	cmp	r3, r1
 8004a9e:	bf01      	itttt	eq
 8004aa0:	6819      	ldreq	r1, [r3, #0]
 8004aa2:	685b      	ldreq	r3, [r3, #4]
 8004aa4:	1809      	addeq	r1, r1, r0
 8004aa6:	6021      	streq	r1, [r4, #0]
 8004aa8:	e7ed      	b.n	8004a86 <_free_r+0x1e>
 8004aaa:	461a      	mov	r2, r3
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	b10b      	cbz	r3, 8004ab4 <_free_r+0x4c>
 8004ab0:	42a3      	cmp	r3, r4
 8004ab2:	d9fa      	bls.n	8004aaa <_free_r+0x42>
 8004ab4:	6811      	ldr	r1, [r2, #0]
 8004ab6:	1850      	adds	r0, r2, r1
 8004ab8:	42a0      	cmp	r0, r4
 8004aba:	d10b      	bne.n	8004ad4 <_free_r+0x6c>
 8004abc:	6820      	ldr	r0, [r4, #0]
 8004abe:	4401      	add	r1, r0
 8004ac0:	1850      	adds	r0, r2, r1
 8004ac2:	4283      	cmp	r3, r0
 8004ac4:	6011      	str	r1, [r2, #0]
 8004ac6:	d1e0      	bne.n	8004a8a <_free_r+0x22>
 8004ac8:	6818      	ldr	r0, [r3, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	6053      	str	r3, [r2, #4]
 8004ace:	4408      	add	r0, r1
 8004ad0:	6010      	str	r0, [r2, #0]
 8004ad2:	e7da      	b.n	8004a8a <_free_r+0x22>
 8004ad4:	d902      	bls.n	8004adc <_free_r+0x74>
 8004ad6:	230c      	movs	r3, #12
 8004ad8:	602b      	str	r3, [r5, #0]
 8004ada:	e7d6      	b.n	8004a8a <_free_r+0x22>
 8004adc:	6820      	ldr	r0, [r4, #0]
 8004ade:	1821      	adds	r1, r4, r0
 8004ae0:	428b      	cmp	r3, r1
 8004ae2:	bf04      	itt	eq
 8004ae4:	6819      	ldreq	r1, [r3, #0]
 8004ae6:	685b      	ldreq	r3, [r3, #4]
 8004ae8:	6063      	str	r3, [r4, #4]
 8004aea:	bf04      	itt	eq
 8004aec:	1809      	addeq	r1, r1, r0
 8004aee:	6021      	streq	r1, [r4, #0]
 8004af0:	6054      	str	r4, [r2, #4]
 8004af2:	e7ca      	b.n	8004a8a <_free_r+0x22>
 8004af4:	bd38      	pop	{r3, r4, r5, pc}
 8004af6:	bf00      	nop
 8004af8:	20001490 	.word	0x20001490

08004afc <malloc>:
 8004afc:	4b02      	ldr	r3, [pc, #8]	@ (8004b08 <malloc+0xc>)
 8004afe:	4601      	mov	r1, r0
 8004b00:	6818      	ldr	r0, [r3, #0]
 8004b02:	f000 b825 	b.w	8004b50 <_malloc_r>
 8004b06:	bf00      	nop
 8004b08:	20000018 	.word	0x20000018

08004b0c <sbrk_aligned>:
 8004b0c:	b570      	push	{r4, r5, r6, lr}
 8004b0e:	4e0f      	ldr	r6, [pc, #60]	@ (8004b4c <sbrk_aligned+0x40>)
 8004b10:	460c      	mov	r4, r1
 8004b12:	6831      	ldr	r1, [r6, #0]
 8004b14:	4605      	mov	r5, r0
 8004b16:	b911      	cbnz	r1, 8004b1e <sbrk_aligned+0x12>
 8004b18:	f000 fe92 	bl	8005840 <_sbrk_r>
 8004b1c:	6030      	str	r0, [r6, #0]
 8004b1e:	4621      	mov	r1, r4
 8004b20:	4628      	mov	r0, r5
 8004b22:	f000 fe8d 	bl	8005840 <_sbrk_r>
 8004b26:	1c43      	adds	r3, r0, #1
 8004b28:	d103      	bne.n	8004b32 <sbrk_aligned+0x26>
 8004b2a:	f04f 34ff 	mov.w	r4, #4294967295
 8004b2e:	4620      	mov	r0, r4
 8004b30:	bd70      	pop	{r4, r5, r6, pc}
 8004b32:	1cc4      	adds	r4, r0, #3
 8004b34:	f024 0403 	bic.w	r4, r4, #3
 8004b38:	42a0      	cmp	r0, r4
 8004b3a:	d0f8      	beq.n	8004b2e <sbrk_aligned+0x22>
 8004b3c:	1a21      	subs	r1, r4, r0
 8004b3e:	4628      	mov	r0, r5
 8004b40:	f000 fe7e 	bl	8005840 <_sbrk_r>
 8004b44:	3001      	adds	r0, #1
 8004b46:	d1f2      	bne.n	8004b2e <sbrk_aligned+0x22>
 8004b48:	e7ef      	b.n	8004b2a <sbrk_aligned+0x1e>
 8004b4a:	bf00      	nop
 8004b4c:	2000148c 	.word	0x2000148c

08004b50 <_malloc_r>:
 8004b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b54:	1ccd      	adds	r5, r1, #3
 8004b56:	f025 0503 	bic.w	r5, r5, #3
 8004b5a:	3508      	adds	r5, #8
 8004b5c:	2d0c      	cmp	r5, #12
 8004b5e:	bf38      	it	cc
 8004b60:	250c      	movcc	r5, #12
 8004b62:	2d00      	cmp	r5, #0
 8004b64:	4606      	mov	r6, r0
 8004b66:	db01      	blt.n	8004b6c <_malloc_r+0x1c>
 8004b68:	42a9      	cmp	r1, r5
 8004b6a:	d904      	bls.n	8004b76 <_malloc_r+0x26>
 8004b6c:	230c      	movs	r3, #12
 8004b6e:	6033      	str	r3, [r6, #0]
 8004b70:	2000      	movs	r0, #0
 8004b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c4c <_malloc_r+0xfc>
 8004b7a:	f000 f869 	bl	8004c50 <__malloc_lock>
 8004b7e:	f8d8 3000 	ldr.w	r3, [r8]
 8004b82:	461c      	mov	r4, r3
 8004b84:	bb44      	cbnz	r4, 8004bd8 <_malloc_r+0x88>
 8004b86:	4629      	mov	r1, r5
 8004b88:	4630      	mov	r0, r6
 8004b8a:	f7ff ffbf 	bl	8004b0c <sbrk_aligned>
 8004b8e:	1c43      	adds	r3, r0, #1
 8004b90:	4604      	mov	r4, r0
 8004b92:	d158      	bne.n	8004c46 <_malloc_r+0xf6>
 8004b94:	f8d8 4000 	ldr.w	r4, [r8]
 8004b98:	4627      	mov	r7, r4
 8004b9a:	2f00      	cmp	r7, #0
 8004b9c:	d143      	bne.n	8004c26 <_malloc_r+0xd6>
 8004b9e:	2c00      	cmp	r4, #0
 8004ba0:	d04b      	beq.n	8004c3a <_malloc_r+0xea>
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	4639      	mov	r1, r7
 8004ba6:	4630      	mov	r0, r6
 8004ba8:	eb04 0903 	add.w	r9, r4, r3
 8004bac:	f000 fe48 	bl	8005840 <_sbrk_r>
 8004bb0:	4581      	cmp	r9, r0
 8004bb2:	d142      	bne.n	8004c3a <_malloc_r+0xea>
 8004bb4:	6821      	ldr	r1, [r4, #0]
 8004bb6:	1a6d      	subs	r5, r5, r1
 8004bb8:	4629      	mov	r1, r5
 8004bba:	4630      	mov	r0, r6
 8004bbc:	f7ff ffa6 	bl	8004b0c <sbrk_aligned>
 8004bc0:	3001      	adds	r0, #1
 8004bc2:	d03a      	beq.n	8004c3a <_malloc_r+0xea>
 8004bc4:	6823      	ldr	r3, [r4, #0]
 8004bc6:	442b      	add	r3, r5
 8004bc8:	6023      	str	r3, [r4, #0]
 8004bca:	f8d8 3000 	ldr.w	r3, [r8]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	bb62      	cbnz	r2, 8004c2c <_malloc_r+0xdc>
 8004bd2:	f8c8 7000 	str.w	r7, [r8]
 8004bd6:	e00f      	b.n	8004bf8 <_malloc_r+0xa8>
 8004bd8:	6822      	ldr	r2, [r4, #0]
 8004bda:	1b52      	subs	r2, r2, r5
 8004bdc:	d420      	bmi.n	8004c20 <_malloc_r+0xd0>
 8004bde:	2a0b      	cmp	r2, #11
 8004be0:	d917      	bls.n	8004c12 <_malloc_r+0xc2>
 8004be2:	1961      	adds	r1, r4, r5
 8004be4:	42a3      	cmp	r3, r4
 8004be6:	6025      	str	r5, [r4, #0]
 8004be8:	bf18      	it	ne
 8004bea:	6059      	strne	r1, [r3, #4]
 8004bec:	6863      	ldr	r3, [r4, #4]
 8004bee:	bf08      	it	eq
 8004bf0:	f8c8 1000 	streq.w	r1, [r8]
 8004bf4:	5162      	str	r2, [r4, r5]
 8004bf6:	604b      	str	r3, [r1, #4]
 8004bf8:	4630      	mov	r0, r6
 8004bfa:	f000 f82f 	bl	8004c5c <__malloc_unlock>
 8004bfe:	f104 000b 	add.w	r0, r4, #11
 8004c02:	1d23      	adds	r3, r4, #4
 8004c04:	f020 0007 	bic.w	r0, r0, #7
 8004c08:	1ac2      	subs	r2, r0, r3
 8004c0a:	bf1c      	itt	ne
 8004c0c:	1a1b      	subne	r3, r3, r0
 8004c0e:	50a3      	strne	r3, [r4, r2]
 8004c10:	e7af      	b.n	8004b72 <_malloc_r+0x22>
 8004c12:	6862      	ldr	r2, [r4, #4]
 8004c14:	42a3      	cmp	r3, r4
 8004c16:	bf0c      	ite	eq
 8004c18:	f8c8 2000 	streq.w	r2, [r8]
 8004c1c:	605a      	strne	r2, [r3, #4]
 8004c1e:	e7eb      	b.n	8004bf8 <_malloc_r+0xa8>
 8004c20:	4623      	mov	r3, r4
 8004c22:	6864      	ldr	r4, [r4, #4]
 8004c24:	e7ae      	b.n	8004b84 <_malloc_r+0x34>
 8004c26:	463c      	mov	r4, r7
 8004c28:	687f      	ldr	r7, [r7, #4]
 8004c2a:	e7b6      	b.n	8004b9a <_malloc_r+0x4a>
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	42a3      	cmp	r3, r4
 8004c32:	d1fb      	bne.n	8004c2c <_malloc_r+0xdc>
 8004c34:	2300      	movs	r3, #0
 8004c36:	6053      	str	r3, [r2, #4]
 8004c38:	e7de      	b.n	8004bf8 <_malloc_r+0xa8>
 8004c3a:	230c      	movs	r3, #12
 8004c3c:	6033      	str	r3, [r6, #0]
 8004c3e:	4630      	mov	r0, r6
 8004c40:	f000 f80c 	bl	8004c5c <__malloc_unlock>
 8004c44:	e794      	b.n	8004b70 <_malloc_r+0x20>
 8004c46:	6005      	str	r5, [r0, #0]
 8004c48:	e7d6      	b.n	8004bf8 <_malloc_r+0xa8>
 8004c4a:	bf00      	nop
 8004c4c:	20001490 	.word	0x20001490

08004c50 <__malloc_lock>:
 8004c50:	4801      	ldr	r0, [pc, #4]	@ (8004c58 <__malloc_lock+0x8>)
 8004c52:	f7ff b8ac 	b.w	8003dae <__retarget_lock_acquire_recursive>
 8004c56:	bf00      	nop
 8004c58:	20001488 	.word	0x20001488

08004c5c <__malloc_unlock>:
 8004c5c:	4801      	ldr	r0, [pc, #4]	@ (8004c64 <__malloc_unlock+0x8>)
 8004c5e:	f7ff b8a7 	b.w	8003db0 <__retarget_lock_release_recursive>
 8004c62:	bf00      	nop
 8004c64:	20001488 	.word	0x20001488

08004c68 <_Balloc>:
 8004c68:	b570      	push	{r4, r5, r6, lr}
 8004c6a:	69c6      	ldr	r6, [r0, #28]
 8004c6c:	4604      	mov	r4, r0
 8004c6e:	460d      	mov	r5, r1
 8004c70:	b976      	cbnz	r6, 8004c90 <_Balloc+0x28>
 8004c72:	2010      	movs	r0, #16
 8004c74:	f7ff ff42 	bl	8004afc <malloc>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	61e0      	str	r0, [r4, #28]
 8004c7c:	b920      	cbnz	r0, 8004c88 <_Balloc+0x20>
 8004c7e:	4b18      	ldr	r3, [pc, #96]	@ (8004ce0 <_Balloc+0x78>)
 8004c80:	4818      	ldr	r0, [pc, #96]	@ (8004ce4 <_Balloc+0x7c>)
 8004c82:	216b      	movs	r1, #107	@ 0x6b
 8004c84:	f000 fdfa 	bl	800587c <__assert_func>
 8004c88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004c8c:	6006      	str	r6, [r0, #0]
 8004c8e:	60c6      	str	r6, [r0, #12]
 8004c90:	69e6      	ldr	r6, [r4, #28]
 8004c92:	68f3      	ldr	r3, [r6, #12]
 8004c94:	b183      	cbz	r3, 8004cb8 <_Balloc+0x50>
 8004c96:	69e3      	ldr	r3, [r4, #28]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004c9e:	b9b8      	cbnz	r0, 8004cd0 <_Balloc+0x68>
 8004ca0:	2101      	movs	r1, #1
 8004ca2:	fa01 f605 	lsl.w	r6, r1, r5
 8004ca6:	1d72      	adds	r2, r6, #5
 8004ca8:	0092      	lsls	r2, r2, #2
 8004caa:	4620      	mov	r0, r4
 8004cac:	f000 fe04 	bl	80058b8 <_calloc_r>
 8004cb0:	b160      	cbz	r0, 8004ccc <_Balloc+0x64>
 8004cb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004cb6:	e00e      	b.n	8004cd6 <_Balloc+0x6e>
 8004cb8:	2221      	movs	r2, #33	@ 0x21
 8004cba:	2104      	movs	r1, #4
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	f000 fdfb 	bl	80058b8 <_calloc_r>
 8004cc2:	69e3      	ldr	r3, [r4, #28]
 8004cc4:	60f0      	str	r0, [r6, #12]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1e4      	bne.n	8004c96 <_Balloc+0x2e>
 8004ccc:	2000      	movs	r0, #0
 8004cce:	bd70      	pop	{r4, r5, r6, pc}
 8004cd0:	6802      	ldr	r2, [r0, #0]
 8004cd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004cdc:	e7f7      	b.n	8004cce <_Balloc+0x66>
 8004cde:	bf00      	nop
 8004ce0:	08005b59 	.word	0x08005b59
 8004ce4:	08005bd9 	.word	0x08005bd9

08004ce8 <_Bfree>:
 8004ce8:	b570      	push	{r4, r5, r6, lr}
 8004cea:	69c6      	ldr	r6, [r0, #28]
 8004cec:	4605      	mov	r5, r0
 8004cee:	460c      	mov	r4, r1
 8004cf0:	b976      	cbnz	r6, 8004d10 <_Bfree+0x28>
 8004cf2:	2010      	movs	r0, #16
 8004cf4:	f7ff ff02 	bl	8004afc <malloc>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	61e8      	str	r0, [r5, #28]
 8004cfc:	b920      	cbnz	r0, 8004d08 <_Bfree+0x20>
 8004cfe:	4b09      	ldr	r3, [pc, #36]	@ (8004d24 <_Bfree+0x3c>)
 8004d00:	4809      	ldr	r0, [pc, #36]	@ (8004d28 <_Bfree+0x40>)
 8004d02:	218f      	movs	r1, #143	@ 0x8f
 8004d04:	f000 fdba 	bl	800587c <__assert_func>
 8004d08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004d0c:	6006      	str	r6, [r0, #0]
 8004d0e:	60c6      	str	r6, [r0, #12]
 8004d10:	b13c      	cbz	r4, 8004d22 <_Bfree+0x3a>
 8004d12:	69eb      	ldr	r3, [r5, #28]
 8004d14:	6862      	ldr	r2, [r4, #4]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d1c:	6021      	str	r1, [r4, #0]
 8004d1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004d22:	bd70      	pop	{r4, r5, r6, pc}
 8004d24:	08005b59 	.word	0x08005b59
 8004d28:	08005bd9 	.word	0x08005bd9

08004d2c <__multadd>:
 8004d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d30:	690d      	ldr	r5, [r1, #16]
 8004d32:	4607      	mov	r7, r0
 8004d34:	460c      	mov	r4, r1
 8004d36:	461e      	mov	r6, r3
 8004d38:	f101 0c14 	add.w	ip, r1, #20
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	f8dc 3000 	ldr.w	r3, [ip]
 8004d42:	b299      	uxth	r1, r3
 8004d44:	fb02 6101 	mla	r1, r2, r1, r6
 8004d48:	0c1e      	lsrs	r6, r3, #16
 8004d4a:	0c0b      	lsrs	r3, r1, #16
 8004d4c:	fb02 3306 	mla	r3, r2, r6, r3
 8004d50:	b289      	uxth	r1, r1
 8004d52:	3001      	adds	r0, #1
 8004d54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004d58:	4285      	cmp	r5, r0
 8004d5a:	f84c 1b04 	str.w	r1, [ip], #4
 8004d5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004d62:	dcec      	bgt.n	8004d3e <__multadd+0x12>
 8004d64:	b30e      	cbz	r6, 8004daa <__multadd+0x7e>
 8004d66:	68a3      	ldr	r3, [r4, #8]
 8004d68:	42ab      	cmp	r3, r5
 8004d6a:	dc19      	bgt.n	8004da0 <__multadd+0x74>
 8004d6c:	6861      	ldr	r1, [r4, #4]
 8004d6e:	4638      	mov	r0, r7
 8004d70:	3101      	adds	r1, #1
 8004d72:	f7ff ff79 	bl	8004c68 <_Balloc>
 8004d76:	4680      	mov	r8, r0
 8004d78:	b928      	cbnz	r0, 8004d86 <__multadd+0x5a>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8004db0 <__multadd+0x84>)
 8004d7e:	480d      	ldr	r0, [pc, #52]	@ (8004db4 <__multadd+0x88>)
 8004d80:	21ba      	movs	r1, #186	@ 0xba
 8004d82:	f000 fd7b 	bl	800587c <__assert_func>
 8004d86:	6922      	ldr	r2, [r4, #16]
 8004d88:	3202      	adds	r2, #2
 8004d8a:	f104 010c 	add.w	r1, r4, #12
 8004d8e:	0092      	lsls	r2, r2, #2
 8004d90:	300c      	adds	r0, #12
 8004d92:	f000 fd65 	bl	8005860 <memcpy>
 8004d96:	4621      	mov	r1, r4
 8004d98:	4638      	mov	r0, r7
 8004d9a:	f7ff ffa5 	bl	8004ce8 <_Bfree>
 8004d9e:	4644      	mov	r4, r8
 8004da0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004da4:	3501      	adds	r5, #1
 8004da6:	615e      	str	r6, [r3, #20]
 8004da8:	6125      	str	r5, [r4, #16]
 8004daa:	4620      	mov	r0, r4
 8004dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004db0:	08005bc8 	.word	0x08005bc8
 8004db4:	08005bd9 	.word	0x08005bd9

08004db8 <__hi0bits>:
 8004db8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	bf36      	itet	cc
 8004dc0:	0403      	lslcc	r3, r0, #16
 8004dc2:	2000      	movcs	r0, #0
 8004dc4:	2010      	movcc	r0, #16
 8004dc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004dca:	bf3c      	itt	cc
 8004dcc:	021b      	lslcc	r3, r3, #8
 8004dce:	3008      	addcc	r0, #8
 8004dd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004dd4:	bf3c      	itt	cc
 8004dd6:	011b      	lslcc	r3, r3, #4
 8004dd8:	3004      	addcc	r0, #4
 8004dda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dde:	bf3c      	itt	cc
 8004de0:	009b      	lslcc	r3, r3, #2
 8004de2:	3002      	addcc	r0, #2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	db05      	blt.n	8004df4 <__hi0bits+0x3c>
 8004de8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004dec:	f100 0001 	add.w	r0, r0, #1
 8004df0:	bf08      	it	eq
 8004df2:	2020      	moveq	r0, #32
 8004df4:	4770      	bx	lr

08004df6 <__lo0bits>:
 8004df6:	6803      	ldr	r3, [r0, #0]
 8004df8:	4602      	mov	r2, r0
 8004dfa:	f013 0007 	ands.w	r0, r3, #7
 8004dfe:	d00b      	beq.n	8004e18 <__lo0bits+0x22>
 8004e00:	07d9      	lsls	r1, r3, #31
 8004e02:	d421      	bmi.n	8004e48 <__lo0bits+0x52>
 8004e04:	0798      	lsls	r0, r3, #30
 8004e06:	bf49      	itett	mi
 8004e08:	085b      	lsrmi	r3, r3, #1
 8004e0a:	089b      	lsrpl	r3, r3, #2
 8004e0c:	2001      	movmi	r0, #1
 8004e0e:	6013      	strmi	r3, [r2, #0]
 8004e10:	bf5c      	itt	pl
 8004e12:	6013      	strpl	r3, [r2, #0]
 8004e14:	2002      	movpl	r0, #2
 8004e16:	4770      	bx	lr
 8004e18:	b299      	uxth	r1, r3
 8004e1a:	b909      	cbnz	r1, 8004e20 <__lo0bits+0x2a>
 8004e1c:	0c1b      	lsrs	r3, r3, #16
 8004e1e:	2010      	movs	r0, #16
 8004e20:	b2d9      	uxtb	r1, r3
 8004e22:	b909      	cbnz	r1, 8004e28 <__lo0bits+0x32>
 8004e24:	3008      	adds	r0, #8
 8004e26:	0a1b      	lsrs	r3, r3, #8
 8004e28:	0719      	lsls	r1, r3, #28
 8004e2a:	bf04      	itt	eq
 8004e2c:	091b      	lsreq	r3, r3, #4
 8004e2e:	3004      	addeq	r0, #4
 8004e30:	0799      	lsls	r1, r3, #30
 8004e32:	bf04      	itt	eq
 8004e34:	089b      	lsreq	r3, r3, #2
 8004e36:	3002      	addeq	r0, #2
 8004e38:	07d9      	lsls	r1, r3, #31
 8004e3a:	d403      	bmi.n	8004e44 <__lo0bits+0x4e>
 8004e3c:	085b      	lsrs	r3, r3, #1
 8004e3e:	f100 0001 	add.w	r0, r0, #1
 8004e42:	d003      	beq.n	8004e4c <__lo0bits+0x56>
 8004e44:	6013      	str	r3, [r2, #0]
 8004e46:	4770      	bx	lr
 8004e48:	2000      	movs	r0, #0
 8004e4a:	4770      	bx	lr
 8004e4c:	2020      	movs	r0, #32
 8004e4e:	4770      	bx	lr

08004e50 <__i2b>:
 8004e50:	b510      	push	{r4, lr}
 8004e52:	460c      	mov	r4, r1
 8004e54:	2101      	movs	r1, #1
 8004e56:	f7ff ff07 	bl	8004c68 <_Balloc>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	b928      	cbnz	r0, 8004e6a <__i2b+0x1a>
 8004e5e:	4b05      	ldr	r3, [pc, #20]	@ (8004e74 <__i2b+0x24>)
 8004e60:	4805      	ldr	r0, [pc, #20]	@ (8004e78 <__i2b+0x28>)
 8004e62:	f240 1145 	movw	r1, #325	@ 0x145
 8004e66:	f000 fd09 	bl	800587c <__assert_func>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	6144      	str	r4, [r0, #20]
 8004e6e:	6103      	str	r3, [r0, #16]
 8004e70:	bd10      	pop	{r4, pc}
 8004e72:	bf00      	nop
 8004e74:	08005bc8 	.word	0x08005bc8
 8004e78:	08005bd9 	.word	0x08005bd9

08004e7c <__multiply>:
 8004e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e80:	4617      	mov	r7, r2
 8004e82:	690a      	ldr	r2, [r1, #16]
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	bfa8      	it	ge
 8004e8a:	463b      	movge	r3, r7
 8004e8c:	4689      	mov	r9, r1
 8004e8e:	bfa4      	itt	ge
 8004e90:	460f      	movge	r7, r1
 8004e92:	4699      	movge	r9, r3
 8004e94:	693d      	ldr	r5, [r7, #16]
 8004e96:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	6879      	ldr	r1, [r7, #4]
 8004e9e:	eb05 060a 	add.w	r6, r5, sl
 8004ea2:	42b3      	cmp	r3, r6
 8004ea4:	b085      	sub	sp, #20
 8004ea6:	bfb8      	it	lt
 8004ea8:	3101      	addlt	r1, #1
 8004eaa:	f7ff fedd 	bl	8004c68 <_Balloc>
 8004eae:	b930      	cbnz	r0, 8004ebe <__multiply+0x42>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	4b41      	ldr	r3, [pc, #260]	@ (8004fb8 <__multiply+0x13c>)
 8004eb4:	4841      	ldr	r0, [pc, #260]	@ (8004fbc <__multiply+0x140>)
 8004eb6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004eba:	f000 fcdf 	bl	800587c <__assert_func>
 8004ebe:	f100 0414 	add.w	r4, r0, #20
 8004ec2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8004ec6:	4623      	mov	r3, r4
 8004ec8:	2200      	movs	r2, #0
 8004eca:	4573      	cmp	r3, lr
 8004ecc:	d320      	bcc.n	8004f10 <__multiply+0x94>
 8004ece:	f107 0814 	add.w	r8, r7, #20
 8004ed2:	f109 0114 	add.w	r1, r9, #20
 8004ed6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8004eda:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8004ede:	9302      	str	r3, [sp, #8]
 8004ee0:	1beb      	subs	r3, r5, r7
 8004ee2:	3b15      	subs	r3, #21
 8004ee4:	f023 0303 	bic.w	r3, r3, #3
 8004ee8:	3304      	adds	r3, #4
 8004eea:	3715      	adds	r7, #21
 8004eec:	42bd      	cmp	r5, r7
 8004eee:	bf38      	it	cc
 8004ef0:	2304      	movcc	r3, #4
 8004ef2:	9301      	str	r3, [sp, #4]
 8004ef4:	9b02      	ldr	r3, [sp, #8]
 8004ef6:	9103      	str	r1, [sp, #12]
 8004ef8:	428b      	cmp	r3, r1
 8004efa:	d80c      	bhi.n	8004f16 <__multiply+0x9a>
 8004efc:	2e00      	cmp	r6, #0
 8004efe:	dd03      	ble.n	8004f08 <__multiply+0x8c>
 8004f00:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d055      	beq.n	8004fb4 <__multiply+0x138>
 8004f08:	6106      	str	r6, [r0, #16]
 8004f0a:	b005      	add	sp, #20
 8004f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f10:	f843 2b04 	str.w	r2, [r3], #4
 8004f14:	e7d9      	b.n	8004eca <__multiply+0x4e>
 8004f16:	f8b1 a000 	ldrh.w	sl, [r1]
 8004f1a:	f1ba 0f00 	cmp.w	sl, #0
 8004f1e:	d01f      	beq.n	8004f60 <__multiply+0xe4>
 8004f20:	46c4      	mov	ip, r8
 8004f22:	46a1      	mov	r9, r4
 8004f24:	2700      	movs	r7, #0
 8004f26:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004f2a:	f8d9 3000 	ldr.w	r3, [r9]
 8004f2e:	fa1f fb82 	uxth.w	fp, r2
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	fb0a 330b 	mla	r3, sl, fp, r3
 8004f38:	443b      	add	r3, r7
 8004f3a:	f8d9 7000 	ldr.w	r7, [r9]
 8004f3e:	0c12      	lsrs	r2, r2, #16
 8004f40:	0c3f      	lsrs	r7, r7, #16
 8004f42:	fb0a 7202 	mla	r2, sl, r2, r7
 8004f46:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f50:	4565      	cmp	r5, ip
 8004f52:	f849 3b04 	str.w	r3, [r9], #4
 8004f56:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8004f5a:	d8e4      	bhi.n	8004f26 <__multiply+0xaa>
 8004f5c:	9b01      	ldr	r3, [sp, #4]
 8004f5e:	50e7      	str	r7, [r4, r3]
 8004f60:	9b03      	ldr	r3, [sp, #12]
 8004f62:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004f66:	3104      	adds	r1, #4
 8004f68:	f1b9 0f00 	cmp.w	r9, #0
 8004f6c:	d020      	beq.n	8004fb0 <__multiply+0x134>
 8004f6e:	6823      	ldr	r3, [r4, #0]
 8004f70:	4647      	mov	r7, r8
 8004f72:	46a4      	mov	ip, r4
 8004f74:	f04f 0a00 	mov.w	sl, #0
 8004f78:	f8b7 b000 	ldrh.w	fp, [r7]
 8004f7c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8004f80:	fb09 220b 	mla	r2, r9, fp, r2
 8004f84:	4452      	add	r2, sl
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f8c:	f84c 3b04 	str.w	r3, [ip], #4
 8004f90:	f857 3b04 	ldr.w	r3, [r7], #4
 8004f94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004f98:	f8bc 3000 	ldrh.w	r3, [ip]
 8004f9c:	fb09 330a 	mla	r3, r9, sl, r3
 8004fa0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8004fa4:	42bd      	cmp	r5, r7
 8004fa6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004faa:	d8e5      	bhi.n	8004f78 <__multiply+0xfc>
 8004fac:	9a01      	ldr	r2, [sp, #4]
 8004fae:	50a3      	str	r3, [r4, r2]
 8004fb0:	3404      	adds	r4, #4
 8004fb2:	e79f      	b.n	8004ef4 <__multiply+0x78>
 8004fb4:	3e01      	subs	r6, #1
 8004fb6:	e7a1      	b.n	8004efc <__multiply+0x80>
 8004fb8:	08005bc8 	.word	0x08005bc8
 8004fbc:	08005bd9 	.word	0x08005bd9

08004fc0 <__pow5mult>:
 8004fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fc4:	4615      	mov	r5, r2
 8004fc6:	f012 0203 	ands.w	r2, r2, #3
 8004fca:	4607      	mov	r7, r0
 8004fcc:	460e      	mov	r6, r1
 8004fce:	d007      	beq.n	8004fe0 <__pow5mult+0x20>
 8004fd0:	4c25      	ldr	r4, [pc, #148]	@ (8005068 <__pow5mult+0xa8>)
 8004fd2:	3a01      	subs	r2, #1
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004fda:	f7ff fea7 	bl	8004d2c <__multadd>
 8004fde:	4606      	mov	r6, r0
 8004fe0:	10ad      	asrs	r5, r5, #2
 8004fe2:	d03d      	beq.n	8005060 <__pow5mult+0xa0>
 8004fe4:	69fc      	ldr	r4, [r7, #28]
 8004fe6:	b97c      	cbnz	r4, 8005008 <__pow5mult+0x48>
 8004fe8:	2010      	movs	r0, #16
 8004fea:	f7ff fd87 	bl	8004afc <malloc>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	61f8      	str	r0, [r7, #28]
 8004ff2:	b928      	cbnz	r0, 8005000 <__pow5mult+0x40>
 8004ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800506c <__pow5mult+0xac>)
 8004ff6:	481e      	ldr	r0, [pc, #120]	@ (8005070 <__pow5mult+0xb0>)
 8004ff8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004ffc:	f000 fc3e 	bl	800587c <__assert_func>
 8005000:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005004:	6004      	str	r4, [r0, #0]
 8005006:	60c4      	str	r4, [r0, #12]
 8005008:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800500c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005010:	b94c      	cbnz	r4, 8005026 <__pow5mult+0x66>
 8005012:	f240 2171 	movw	r1, #625	@ 0x271
 8005016:	4638      	mov	r0, r7
 8005018:	f7ff ff1a 	bl	8004e50 <__i2b>
 800501c:	2300      	movs	r3, #0
 800501e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005022:	4604      	mov	r4, r0
 8005024:	6003      	str	r3, [r0, #0]
 8005026:	f04f 0900 	mov.w	r9, #0
 800502a:	07eb      	lsls	r3, r5, #31
 800502c:	d50a      	bpl.n	8005044 <__pow5mult+0x84>
 800502e:	4631      	mov	r1, r6
 8005030:	4622      	mov	r2, r4
 8005032:	4638      	mov	r0, r7
 8005034:	f7ff ff22 	bl	8004e7c <__multiply>
 8005038:	4631      	mov	r1, r6
 800503a:	4680      	mov	r8, r0
 800503c:	4638      	mov	r0, r7
 800503e:	f7ff fe53 	bl	8004ce8 <_Bfree>
 8005042:	4646      	mov	r6, r8
 8005044:	106d      	asrs	r5, r5, #1
 8005046:	d00b      	beq.n	8005060 <__pow5mult+0xa0>
 8005048:	6820      	ldr	r0, [r4, #0]
 800504a:	b938      	cbnz	r0, 800505c <__pow5mult+0x9c>
 800504c:	4622      	mov	r2, r4
 800504e:	4621      	mov	r1, r4
 8005050:	4638      	mov	r0, r7
 8005052:	f7ff ff13 	bl	8004e7c <__multiply>
 8005056:	6020      	str	r0, [r4, #0]
 8005058:	f8c0 9000 	str.w	r9, [r0]
 800505c:	4604      	mov	r4, r0
 800505e:	e7e4      	b.n	800502a <__pow5mult+0x6a>
 8005060:	4630      	mov	r0, r6
 8005062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005066:	bf00      	nop
 8005068:	08005c8c 	.word	0x08005c8c
 800506c:	08005b59 	.word	0x08005b59
 8005070:	08005bd9 	.word	0x08005bd9

08005074 <__lshift>:
 8005074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005078:	460c      	mov	r4, r1
 800507a:	6849      	ldr	r1, [r1, #4]
 800507c:	6923      	ldr	r3, [r4, #16]
 800507e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005082:	68a3      	ldr	r3, [r4, #8]
 8005084:	4607      	mov	r7, r0
 8005086:	4691      	mov	r9, r2
 8005088:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800508c:	f108 0601 	add.w	r6, r8, #1
 8005090:	42b3      	cmp	r3, r6
 8005092:	db0b      	blt.n	80050ac <__lshift+0x38>
 8005094:	4638      	mov	r0, r7
 8005096:	f7ff fde7 	bl	8004c68 <_Balloc>
 800509a:	4605      	mov	r5, r0
 800509c:	b948      	cbnz	r0, 80050b2 <__lshift+0x3e>
 800509e:	4602      	mov	r2, r0
 80050a0:	4b28      	ldr	r3, [pc, #160]	@ (8005144 <__lshift+0xd0>)
 80050a2:	4829      	ldr	r0, [pc, #164]	@ (8005148 <__lshift+0xd4>)
 80050a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80050a8:	f000 fbe8 	bl	800587c <__assert_func>
 80050ac:	3101      	adds	r1, #1
 80050ae:	005b      	lsls	r3, r3, #1
 80050b0:	e7ee      	b.n	8005090 <__lshift+0x1c>
 80050b2:	2300      	movs	r3, #0
 80050b4:	f100 0114 	add.w	r1, r0, #20
 80050b8:	f100 0210 	add.w	r2, r0, #16
 80050bc:	4618      	mov	r0, r3
 80050be:	4553      	cmp	r3, sl
 80050c0:	db33      	blt.n	800512a <__lshift+0xb6>
 80050c2:	6920      	ldr	r0, [r4, #16]
 80050c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80050c8:	f104 0314 	add.w	r3, r4, #20
 80050cc:	f019 091f 	ands.w	r9, r9, #31
 80050d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80050d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80050d8:	d02b      	beq.n	8005132 <__lshift+0xbe>
 80050da:	f1c9 0e20 	rsb	lr, r9, #32
 80050de:	468a      	mov	sl, r1
 80050e0:	2200      	movs	r2, #0
 80050e2:	6818      	ldr	r0, [r3, #0]
 80050e4:	fa00 f009 	lsl.w	r0, r0, r9
 80050e8:	4310      	orrs	r0, r2
 80050ea:	f84a 0b04 	str.w	r0, [sl], #4
 80050ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80050f2:	459c      	cmp	ip, r3
 80050f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80050f8:	d8f3      	bhi.n	80050e2 <__lshift+0x6e>
 80050fa:	ebac 0304 	sub.w	r3, ip, r4
 80050fe:	3b15      	subs	r3, #21
 8005100:	f023 0303 	bic.w	r3, r3, #3
 8005104:	3304      	adds	r3, #4
 8005106:	f104 0015 	add.w	r0, r4, #21
 800510a:	4560      	cmp	r0, ip
 800510c:	bf88      	it	hi
 800510e:	2304      	movhi	r3, #4
 8005110:	50ca      	str	r2, [r1, r3]
 8005112:	b10a      	cbz	r2, 8005118 <__lshift+0xa4>
 8005114:	f108 0602 	add.w	r6, r8, #2
 8005118:	3e01      	subs	r6, #1
 800511a:	4638      	mov	r0, r7
 800511c:	612e      	str	r6, [r5, #16]
 800511e:	4621      	mov	r1, r4
 8005120:	f7ff fde2 	bl	8004ce8 <_Bfree>
 8005124:	4628      	mov	r0, r5
 8005126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800512a:	f842 0f04 	str.w	r0, [r2, #4]!
 800512e:	3301      	adds	r3, #1
 8005130:	e7c5      	b.n	80050be <__lshift+0x4a>
 8005132:	3904      	subs	r1, #4
 8005134:	f853 2b04 	ldr.w	r2, [r3], #4
 8005138:	f841 2f04 	str.w	r2, [r1, #4]!
 800513c:	459c      	cmp	ip, r3
 800513e:	d8f9      	bhi.n	8005134 <__lshift+0xc0>
 8005140:	e7ea      	b.n	8005118 <__lshift+0xa4>
 8005142:	bf00      	nop
 8005144:	08005bc8 	.word	0x08005bc8
 8005148:	08005bd9 	.word	0x08005bd9

0800514c <__mcmp>:
 800514c:	690a      	ldr	r2, [r1, #16]
 800514e:	4603      	mov	r3, r0
 8005150:	6900      	ldr	r0, [r0, #16]
 8005152:	1a80      	subs	r0, r0, r2
 8005154:	b530      	push	{r4, r5, lr}
 8005156:	d10e      	bne.n	8005176 <__mcmp+0x2a>
 8005158:	3314      	adds	r3, #20
 800515a:	3114      	adds	r1, #20
 800515c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005160:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005164:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005168:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800516c:	4295      	cmp	r5, r2
 800516e:	d003      	beq.n	8005178 <__mcmp+0x2c>
 8005170:	d205      	bcs.n	800517e <__mcmp+0x32>
 8005172:	f04f 30ff 	mov.w	r0, #4294967295
 8005176:	bd30      	pop	{r4, r5, pc}
 8005178:	42a3      	cmp	r3, r4
 800517a:	d3f3      	bcc.n	8005164 <__mcmp+0x18>
 800517c:	e7fb      	b.n	8005176 <__mcmp+0x2a>
 800517e:	2001      	movs	r0, #1
 8005180:	e7f9      	b.n	8005176 <__mcmp+0x2a>
	...

08005184 <__mdiff>:
 8005184:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005188:	4689      	mov	r9, r1
 800518a:	4606      	mov	r6, r0
 800518c:	4611      	mov	r1, r2
 800518e:	4648      	mov	r0, r9
 8005190:	4614      	mov	r4, r2
 8005192:	f7ff ffdb 	bl	800514c <__mcmp>
 8005196:	1e05      	subs	r5, r0, #0
 8005198:	d112      	bne.n	80051c0 <__mdiff+0x3c>
 800519a:	4629      	mov	r1, r5
 800519c:	4630      	mov	r0, r6
 800519e:	f7ff fd63 	bl	8004c68 <_Balloc>
 80051a2:	4602      	mov	r2, r0
 80051a4:	b928      	cbnz	r0, 80051b2 <__mdiff+0x2e>
 80051a6:	4b3f      	ldr	r3, [pc, #252]	@ (80052a4 <__mdiff+0x120>)
 80051a8:	f240 2137 	movw	r1, #567	@ 0x237
 80051ac:	483e      	ldr	r0, [pc, #248]	@ (80052a8 <__mdiff+0x124>)
 80051ae:	f000 fb65 	bl	800587c <__assert_func>
 80051b2:	2301      	movs	r3, #1
 80051b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80051b8:	4610      	mov	r0, r2
 80051ba:	b003      	add	sp, #12
 80051bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051c0:	bfbc      	itt	lt
 80051c2:	464b      	movlt	r3, r9
 80051c4:	46a1      	movlt	r9, r4
 80051c6:	4630      	mov	r0, r6
 80051c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80051cc:	bfba      	itte	lt
 80051ce:	461c      	movlt	r4, r3
 80051d0:	2501      	movlt	r5, #1
 80051d2:	2500      	movge	r5, #0
 80051d4:	f7ff fd48 	bl	8004c68 <_Balloc>
 80051d8:	4602      	mov	r2, r0
 80051da:	b918      	cbnz	r0, 80051e4 <__mdiff+0x60>
 80051dc:	4b31      	ldr	r3, [pc, #196]	@ (80052a4 <__mdiff+0x120>)
 80051de:	f240 2145 	movw	r1, #581	@ 0x245
 80051e2:	e7e3      	b.n	80051ac <__mdiff+0x28>
 80051e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80051e8:	6926      	ldr	r6, [r4, #16]
 80051ea:	60c5      	str	r5, [r0, #12]
 80051ec:	f109 0310 	add.w	r3, r9, #16
 80051f0:	f109 0514 	add.w	r5, r9, #20
 80051f4:	f104 0e14 	add.w	lr, r4, #20
 80051f8:	f100 0b14 	add.w	fp, r0, #20
 80051fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005200:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005204:	9301      	str	r3, [sp, #4]
 8005206:	46d9      	mov	r9, fp
 8005208:	f04f 0c00 	mov.w	ip, #0
 800520c:	9b01      	ldr	r3, [sp, #4]
 800520e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005212:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005216:	9301      	str	r3, [sp, #4]
 8005218:	fa1f f38a 	uxth.w	r3, sl
 800521c:	4619      	mov	r1, r3
 800521e:	b283      	uxth	r3, r0
 8005220:	1acb      	subs	r3, r1, r3
 8005222:	0c00      	lsrs	r0, r0, #16
 8005224:	4463      	add	r3, ip
 8005226:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800522a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800522e:	b29b      	uxth	r3, r3
 8005230:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005234:	4576      	cmp	r6, lr
 8005236:	f849 3b04 	str.w	r3, [r9], #4
 800523a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800523e:	d8e5      	bhi.n	800520c <__mdiff+0x88>
 8005240:	1b33      	subs	r3, r6, r4
 8005242:	3b15      	subs	r3, #21
 8005244:	f023 0303 	bic.w	r3, r3, #3
 8005248:	3415      	adds	r4, #21
 800524a:	3304      	adds	r3, #4
 800524c:	42a6      	cmp	r6, r4
 800524e:	bf38      	it	cc
 8005250:	2304      	movcc	r3, #4
 8005252:	441d      	add	r5, r3
 8005254:	445b      	add	r3, fp
 8005256:	461e      	mov	r6, r3
 8005258:	462c      	mov	r4, r5
 800525a:	4544      	cmp	r4, r8
 800525c:	d30e      	bcc.n	800527c <__mdiff+0xf8>
 800525e:	f108 0103 	add.w	r1, r8, #3
 8005262:	1b49      	subs	r1, r1, r5
 8005264:	f021 0103 	bic.w	r1, r1, #3
 8005268:	3d03      	subs	r5, #3
 800526a:	45a8      	cmp	r8, r5
 800526c:	bf38      	it	cc
 800526e:	2100      	movcc	r1, #0
 8005270:	440b      	add	r3, r1
 8005272:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005276:	b191      	cbz	r1, 800529e <__mdiff+0x11a>
 8005278:	6117      	str	r7, [r2, #16]
 800527a:	e79d      	b.n	80051b8 <__mdiff+0x34>
 800527c:	f854 1b04 	ldr.w	r1, [r4], #4
 8005280:	46e6      	mov	lr, ip
 8005282:	0c08      	lsrs	r0, r1, #16
 8005284:	fa1c fc81 	uxtah	ip, ip, r1
 8005288:	4471      	add	r1, lr
 800528a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800528e:	b289      	uxth	r1, r1
 8005290:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005294:	f846 1b04 	str.w	r1, [r6], #4
 8005298:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800529c:	e7dd      	b.n	800525a <__mdiff+0xd6>
 800529e:	3f01      	subs	r7, #1
 80052a0:	e7e7      	b.n	8005272 <__mdiff+0xee>
 80052a2:	bf00      	nop
 80052a4:	08005bc8 	.word	0x08005bc8
 80052a8:	08005bd9 	.word	0x08005bd9

080052ac <__d2b>:
 80052ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80052b0:	460f      	mov	r7, r1
 80052b2:	2101      	movs	r1, #1
 80052b4:	ec59 8b10 	vmov	r8, r9, d0
 80052b8:	4616      	mov	r6, r2
 80052ba:	f7ff fcd5 	bl	8004c68 <_Balloc>
 80052be:	4604      	mov	r4, r0
 80052c0:	b930      	cbnz	r0, 80052d0 <__d2b+0x24>
 80052c2:	4602      	mov	r2, r0
 80052c4:	4b23      	ldr	r3, [pc, #140]	@ (8005354 <__d2b+0xa8>)
 80052c6:	4824      	ldr	r0, [pc, #144]	@ (8005358 <__d2b+0xac>)
 80052c8:	f240 310f 	movw	r1, #783	@ 0x30f
 80052cc:	f000 fad6 	bl	800587c <__assert_func>
 80052d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80052d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80052d8:	b10d      	cbz	r5, 80052de <__d2b+0x32>
 80052da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052de:	9301      	str	r3, [sp, #4]
 80052e0:	f1b8 0300 	subs.w	r3, r8, #0
 80052e4:	d023      	beq.n	800532e <__d2b+0x82>
 80052e6:	4668      	mov	r0, sp
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	f7ff fd84 	bl	8004df6 <__lo0bits>
 80052ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 80052f2:	b1d0      	cbz	r0, 800532a <__d2b+0x7e>
 80052f4:	f1c0 0320 	rsb	r3, r0, #32
 80052f8:	fa02 f303 	lsl.w	r3, r2, r3
 80052fc:	430b      	orrs	r3, r1
 80052fe:	40c2      	lsrs	r2, r0
 8005300:	6163      	str	r3, [r4, #20]
 8005302:	9201      	str	r2, [sp, #4]
 8005304:	9b01      	ldr	r3, [sp, #4]
 8005306:	61a3      	str	r3, [r4, #24]
 8005308:	2b00      	cmp	r3, #0
 800530a:	bf0c      	ite	eq
 800530c:	2201      	moveq	r2, #1
 800530e:	2202      	movne	r2, #2
 8005310:	6122      	str	r2, [r4, #16]
 8005312:	b1a5      	cbz	r5, 800533e <__d2b+0x92>
 8005314:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005318:	4405      	add	r5, r0
 800531a:	603d      	str	r5, [r7, #0]
 800531c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005320:	6030      	str	r0, [r6, #0]
 8005322:	4620      	mov	r0, r4
 8005324:	b003      	add	sp, #12
 8005326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800532a:	6161      	str	r1, [r4, #20]
 800532c:	e7ea      	b.n	8005304 <__d2b+0x58>
 800532e:	a801      	add	r0, sp, #4
 8005330:	f7ff fd61 	bl	8004df6 <__lo0bits>
 8005334:	9b01      	ldr	r3, [sp, #4]
 8005336:	6163      	str	r3, [r4, #20]
 8005338:	3020      	adds	r0, #32
 800533a:	2201      	movs	r2, #1
 800533c:	e7e8      	b.n	8005310 <__d2b+0x64>
 800533e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005342:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005346:	6038      	str	r0, [r7, #0]
 8005348:	6918      	ldr	r0, [r3, #16]
 800534a:	f7ff fd35 	bl	8004db8 <__hi0bits>
 800534e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005352:	e7e5      	b.n	8005320 <__d2b+0x74>
 8005354:	08005bc8 	.word	0x08005bc8
 8005358:	08005bd9 	.word	0x08005bd9

0800535c <__sfputc_r>:
 800535c:	6893      	ldr	r3, [r2, #8]
 800535e:	3b01      	subs	r3, #1
 8005360:	2b00      	cmp	r3, #0
 8005362:	b410      	push	{r4}
 8005364:	6093      	str	r3, [r2, #8]
 8005366:	da08      	bge.n	800537a <__sfputc_r+0x1e>
 8005368:	6994      	ldr	r4, [r2, #24]
 800536a:	42a3      	cmp	r3, r4
 800536c:	db01      	blt.n	8005372 <__sfputc_r+0x16>
 800536e:	290a      	cmp	r1, #10
 8005370:	d103      	bne.n	800537a <__sfputc_r+0x1e>
 8005372:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005376:	f7fe bc08 	b.w	8003b8a <__swbuf_r>
 800537a:	6813      	ldr	r3, [r2, #0]
 800537c:	1c58      	adds	r0, r3, #1
 800537e:	6010      	str	r0, [r2, #0]
 8005380:	7019      	strb	r1, [r3, #0]
 8005382:	4608      	mov	r0, r1
 8005384:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005388:	4770      	bx	lr

0800538a <__sfputs_r>:
 800538a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538c:	4606      	mov	r6, r0
 800538e:	460f      	mov	r7, r1
 8005390:	4614      	mov	r4, r2
 8005392:	18d5      	adds	r5, r2, r3
 8005394:	42ac      	cmp	r4, r5
 8005396:	d101      	bne.n	800539c <__sfputs_r+0x12>
 8005398:	2000      	movs	r0, #0
 800539a:	e007      	b.n	80053ac <__sfputs_r+0x22>
 800539c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053a0:	463a      	mov	r2, r7
 80053a2:	4630      	mov	r0, r6
 80053a4:	f7ff ffda 	bl	800535c <__sfputc_r>
 80053a8:	1c43      	adds	r3, r0, #1
 80053aa:	d1f3      	bne.n	8005394 <__sfputs_r+0xa>
 80053ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080053b0 <_vfiprintf_r>:
 80053b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b4:	460d      	mov	r5, r1
 80053b6:	b09d      	sub	sp, #116	@ 0x74
 80053b8:	4614      	mov	r4, r2
 80053ba:	4698      	mov	r8, r3
 80053bc:	4606      	mov	r6, r0
 80053be:	b118      	cbz	r0, 80053c8 <_vfiprintf_r+0x18>
 80053c0:	6a03      	ldr	r3, [r0, #32]
 80053c2:	b90b      	cbnz	r3, 80053c8 <_vfiprintf_r+0x18>
 80053c4:	f7fe faf8 	bl	80039b8 <__sinit>
 80053c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80053ca:	07d9      	lsls	r1, r3, #31
 80053cc:	d405      	bmi.n	80053da <_vfiprintf_r+0x2a>
 80053ce:	89ab      	ldrh	r3, [r5, #12]
 80053d0:	059a      	lsls	r2, r3, #22
 80053d2:	d402      	bmi.n	80053da <_vfiprintf_r+0x2a>
 80053d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80053d6:	f7fe fcea 	bl	8003dae <__retarget_lock_acquire_recursive>
 80053da:	89ab      	ldrh	r3, [r5, #12]
 80053dc:	071b      	lsls	r3, r3, #28
 80053de:	d501      	bpl.n	80053e4 <_vfiprintf_r+0x34>
 80053e0:	692b      	ldr	r3, [r5, #16]
 80053e2:	b99b      	cbnz	r3, 800540c <_vfiprintf_r+0x5c>
 80053e4:	4629      	mov	r1, r5
 80053e6:	4630      	mov	r0, r6
 80053e8:	f7fe fc0e 	bl	8003c08 <__swsetup_r>
 80053ec:	b170      	cbz	r0, 800540c <_vfiprintf_r+0x5c>
 80053ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80053f0:	07dc      	lsls	r4, r3, #31
 80053f2:	d504      	bpl.n	80053fe <_vfiprintf_r+0x4e>
 80053f4:	f04f 30ff 	mov.w	r0, #4294967295
 80053f8:	b01d      	add	sp, #116	@ 0x74
 80053fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053fe:	89ab      	ldrh	r3, [r5, #12]
 8005400:	0598      	lsls	r0, r3, #22
 8005402:	d4f7      	bmi.n	80053f4 <_vfiprintf_r+0x44>
 8005404:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005406:	f7fe fcd3 	bl	8003db0 <__retarget_lock_release_recursive>
 800540a:	e7f3      	b.n	80053f4 <_vfiprintf_r+0x44>
 800540c:	2300      	movs	r3, #0
 800540e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005410:	2320      	movs	r3, #32
 8005412:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005416:	f8cd 800c 	str.w	r8, [sp, #12]
 800541a:	2330      	movs	r3, #48	@ 0x30
 800541c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80055cc <_vfiprintf_r+0x21c>
 8005420:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005424:	f04f 0901 	mov.w	r9, #1
 8005428:	4623      	mov	r3, r4
 800542a:	469a      	mov	sl, r3
 800542c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005430:	b10a      	cbz	r2, 8005436 <_vfiprintf_r+0x86>
 8005432:	2a25      	cmp	r2, #37	@ 0x25
 8005434:	d1f9      	bne.n	800542a <_vfiprintf_r+0x7a>
 8005436:	ebba 0b04 	subs.w	fp, sl, r4
 800543a:	d00b      	beq.n	8005454 <_vfiprintf_r+0xa4>
 800543c:	465b      	mov	r3, fp
 800543e:	4622      	mov	r2, r4
 8005440:	4629      	mov	r1, r5
 8005442:	4630      	mov	r0, r6
 8005444:	f7ff ffa1 	bl	800538a <__sfputs_r>
 8005448:	3001      	adds	r0, #1
 800544a:	f000 80a7 	beq.w	800559c <_vfiprintf_r+0x1ec>
 800544e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005450:	445a      	add	r2, fp
 8005452:	9209      	str	r2, [sp, #36]	@ 0x24
 8005454:	f89a 3000 	ldrb.w	r3, [sl]
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 809f 	beq.w	800559c <_vfiprintf_r+0x1ec>
 800545e:	2300      	movs	r3, #0
 8005460:	f04f 32ff 	mov.w	r2, #4294967295
 8005464:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005468:	f10a 0a01 	add.w	sl, sl, #1
 800546c:	9304      	str	r3, [sp, #16]
 800546e:	9307      	str	r3, [sp, #28]
 8005470:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005474:	931a      	str	r3, [sp, #104]	@ 0x68
 8005476:	4654      	mov	r4, sl
 8005478:	2205      	movs	r2, #5
 800547a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800547e:	4853      	ldr	r0, [pc, #332]	@ (80055cc <_vfiprintf_r+0x21c>)
 8005480:	f7fa fec6 	bl	8000210 <memchr>
 8005484:	9a04      	ldr	r2, [sp, #16]
 8005486:	b9d8      	cbnz	r0, 80054c0 <_vfiprintf_r+0x110>
 8005488:	06d1      	lsls	r1, r2, #27
 800548a:	bf44      	itt	mi
 800548c:	2320      	movmi	r3, #32
 800548e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005492:	0713      	lsls	r3, r2, #28
 8005494:	bf44      	itt	mi
 8005496:	232b      	movmi	r3, #43	@ 0x2b
 8005498:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800549c:	f89a 3000 	ldrb.w	r3, [sl]
 80054a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80054a2:	d015      	beq.n	80054d0 <_vfiprintf_r+0x120>
 80054a4:	9a07      	ldr	r2, [sp, #28]
 80054a6:	4654      	mov	r4, sl
 80054a8:	2000      	movs	r0, #0
 80054aa:	f04f 0c0a 	mov.w	ip, #10
 80054ae:	4621      	mov	r1, r4
 80054b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054b4:	3b30      	subs	r3, #48	@ 0x30
 80054b6:	2b09      	cmp	r3, #9
 80054b8:	d94b      	bls.n	8005552 <_vfiprintf_r+0x1a2>
 80054ba:	b1b0      	cbz	r0, 80054ea <_vfiprintf_r+0x13a>
 80054bc:	9207      	str	r2, [sp, #28]
 80054be:	e014      	b.n	80054ea <_vfiprintf_r+0x13a>
 80054c0:	eba0 0308 	sub.w	r3, r0, r8
 80054c4:	fa09 f303 	lsl.w	r3, r9, r3
 80054c8:	4313      	orrs	r3, r2
 80054ca:	9304      	str	r3, [sp, #16]
 80054cc:	46a2      	mov	sl, r4
 80054ce:	e7d2      	b.n	8005476 <_vfiprintf_r+0xc6>
 80054d0:	9b03      	ldr	r3, [sp, #12]
 80054d2:	1d19      	adds	r1, r3, #4
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	9103      	str	r1, [sp, #12]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	bfbb      	ittet	lt
 80054dc:	425b      	neglt	r3, r3
 80054de:	f042 0202 	orrlt.w	r2, r2, #2
 80054e2:	9307      	strge	r3, [sp, #28]
 80054e4:	9307      	strlt	r3, [sp, #28]
 80054e6:	bfb8      	it	lt
 80054e8:	9204      	strlt	r2, [sp, #16]
 80054ea:	7823      	ldrb	r3, [r4, #0]
 80054ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80054ee:	d10a      	bne.n	8005506 <_vfiprintf_r+0x156>
 80054f0:	7863      	ldrb	r3, [r4, #1]
 80054f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80054f4:	d132      	bne.n	800555c <_vfiprintf_r+0x1ac>
 80054f6:	9b03      	ldr	r3, [sp, #12]
 80054f8:	1d1a      	adds	r2, r3, #4
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	9203      	str	r2, [sp, #12]
 80054fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005502:	3402      	adds	r4, #2
 8005504:	9305      	str	r3, [sp, #20]
 8005506:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80055dc <_vfiprintf_r+0x22c>
 800550a:	7821      	ldrb	r1, [r4, #0]
 800550c:	2203      	movs	r2, #3
 800550e:	4650      	mov	r0, sl
 8005510:	f7fa fe7e 	bl	8000210 <memchr>
 8005514:	b138      	cbz	r0, 8005526 <_vfiprintf_r+0x176>
 8005516:	9b04      	ldr	r3, [sp, #16]
 8005518:	eba0 000a 	sub.w	r0, r0, sl
 800551c:	2240      	movs	r2, #64	@ 0x40
 800551e:	4082      	lsls	r2, r0
 8005520:	4313      	orrs	r3, r2
 8005522:	3401      	adds	r4, #1
 8005524:	9304      	str	r3, [sp, #16]
 8005526:	f814 1b01 	ldrb.w	r1, [r4], #1
 800552a:	4829      	ldr	r0, [pc, #164]	@ (80055d0 <_vfiprintf_r+0x220>)
 800552c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005530:	2206      	movs	r2, #6
 8005532:	f7fa fe6d 	bl	8000210 <memchr>
 8005536:	2800      	cmp	r0, #0
 8005538:	d03f      	beq.n	80055ba <_vfiprintf_r+0x20a>
 800553a:	4b26      	ldr	r3, [pc, #152]	@ (80055d4 <_vfiprintf_r+0x224>)
 800553c:	bb1b      	cbnz	r3, 8005586 <_vfiprintf_r+0x1d6>
 800553e:	9b03      	ldr	r3, [sp, #12]
 8005540:	3307      	adds	r3, #7
 8005542:	f023 0307 	bic.w	r3, r3, #7
 8005546:	3308      	adds	r3, #8
 8005548:	9303      	str	r3, [sp, #12]
 800554a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800554c:	443b      	add	r3, r7
 800554e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005550:	e76a      	b.n	8005428 <_vfiprintf_r+0x78>
 8005552:	fb0c 3202 	mla	r2, ip, r2, r3
 8005556:	460c      	mov	r4, r1
 8005558:	2001      	movs	r0, #1
 800555a:	e7a8      	b.n	80054ae <_vfiprintf_r+0xfe>
 800555c:	2300      	movs	r3, #0
 800555e:	3401      	adds	r4, #1
 8005560:	9305      	str	r3, [sp, #20]
 8005562:	4619      	mov	r1, r3
 8005564:	f04f 0c0a 	mov.w	ip, #10
 8005568:	4620      	mov	r0, r4
 800556a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800556e:	3a30      	subs	r2, #48	@ 0x30
 8005570:	2a09      	cmp	r2, #9
 8005572:	d903      	bls.n	800557c <_vfiprintf_r+0x1cc>
 8005574:	2b00      	cmp	r3, #0
 8005576:	d0c6      	beq.n	8005506 <_vfiprintf_r+0x156>
 8005578:	9105      	str	r1, [sp, #20]
 800557a:	e7c4      	b.n	8005506 <_vfiprintf_r+0x156>
 800557c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005580:	4604      	mov	r4, r0
 8005582:	2301      	movs	r3, #1
 8005584:	e7f0      	b.n	8005568 <_vfiprintf_r+0x1b8>
 8005586:	ab03      	add	r3, sp, #12
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	462a      	mov	r2, r5
 800558c:	4b12      	ldr	r3, [pc, #72]	@ (80055d8 <_vfiprintf_r+0x228>)
 800558e:	a904      	add	r1, sp, #16
 8005590:	4630      	mov	r0, r6
 8005592:	f7fd fdcf 	bl	8003134 <_printf_float>
 8005596:	4607      	mov	r7, r0
 8005598:	1c78      	adds	r0, r7, #1
 800559a:	d1d6      	bne.n	800554a <_vfiprintf_r+0x19a>
 800559c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800559e:	07d9      	lsls	r1, r3, #31
 80055a0:	d405      	bmi.n	80055ae <_vfiprintf_r+0x1fe>
 80055a2:	89ab      	ldrh	r3, [r5, #12]
 80055a4:	059a      	lsls	r2, r3, #22
 80055a6:	d402      	bmi.n	80055ae <_vfiprintf_r+0x1fe>
 80055a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80055aa:	f7fe fc01 	bl	8003db0 <__retarget_lock_release_recursive>
 80055ae:	89ab      	ldrh	r3, [r5, #12]
 80055b0:	065b      	lsls	r3, r3, #25
 80055b2:	f53f af1f 	bmi.w	80053f4 <_vfiprintf_r+0x44>
 80055b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80055b8:	e71e      	b.n	80053f8 <_vfiprintf_r+0x48>
 80055ba:	ab03      	add	r3, sp, #12
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	462a      	mov	r2, r5
 80055c0:	4b05      	ldr	r3, [pc, #20]	@ (80055d8 <_vfiprintf_r+0x228>)
 80055c2:	a904      	add	r1, sp, #16
 80055c4:	4630      	mov	r0, r6
 80055c6:	f7fe f84d 	bl	8003664 <_printf_i>
 80055ca:	e7e4      	b.n	8005596 <_vfiprintf_r+0x1e6>
 80055cc:	08005c32 	.word	0x08005c32
 80055d0:	08005c3c 	.word	0x08005c3c
 80055d4:	08003135 	.word	0x08003135
 80055d8:	0800538b 	.word	0x0800538b
 80055dc:	08005c38 	.word	0x08005c38

080055e0 <__sflush_r>:
 80055e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80055e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055e8:	0716      	lsls	r6, r2, #28
 80055ea:	4605      	mov	r5, r0
 80055ec:	460c      	mov	r4, r1
 80055ee:	d454      	bmi.n	800569a <__sflush_r+0xba>
 80055f0:	684b      	ldr	r3, [r1, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	dc02      	bgt.n	80055fc <__sflush_r+0x1c>
 80055f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	dd48      	ble.n	800568e <__sflush_r+0xae>
 80055fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80055fe:	2e00      	cmp	r6, #0
 8005600:	d045      	beq.n	800568e <__sflush_r+0xae>
 8005602:	2300      	movs	r3, #0
 8005604:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005608:	682f      	ldr	r7, [r5, #0]
 800560a:	6a21      	ldr	r1, [r4, #32]
 800560c:	602b      	str	r3, [r5, #0]
 800560e:	d030      	beq.n	8005672 <__sflush_r+0x92>
 8005610:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005612:	89a3      	ldrh	r3, [r4, #12]
 8005614:	0759      	lsls	r1, r3, #29
 8005616:	d505      	bpl.n	8005624 <__sflush_r+0x44>
 8005618:	6863      	ldr	r3, [r4, #4]
 800561a:	1ad2      	subs	r2, r2, r3
 800561c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800561e:	b10b      	cbz	r3, 8005624 <__sflush_r+0x44>
 8005620:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005622:	1ad2      	subs	r2, r2, r3
 8005624:	2300      	movs	r3, #0
 8005626:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005628:	6a21      	ldr	r1, [r4, #32]
 800562a:	4628      	mov	r0, r5
 800562c:	47b0      	blx	r6
 800562e:	1c43      	adds	r3, r0, #1
 8005630:	89a3      	ldrh	r3, [r4, #12]
 8005632:	d106      	bne.n	8005642 <__sflush_r+0x62>
 8005634:	6829      	ldr	r1, [r5, #0]
 8005636:	291d      	cmp	r1, #29
 8005638:	d82b      	bhi.n	8005692 <__sflush_r+0xb2>
 800563a:	4a2a      	ldr	r2, [pc, #168]	@ (80056e4 <__sflush_r+0x104>)
 800563c:	40ca      	lsrs	r2, r1
 800563e:	07d6      	lsls	r6, r2, #31
 8005640:	d527      	bpl.n	8005692 <__sflush_r+0xb2>
 8005642:	2200      	movs	r2, #0
 8005644:	6062      	str	r2, [r4, #4]
 8005646:	04d9      	lsls	r1, r3, #19
 8005648:	6922      	ldr	r2, [r4, #16]
 800564a:	6022      	str	r2, [r4, #0]
 800564c:	d504      	bpl.n	8005658 <__sflush_r+0x78>
 800564e:	1c42      	adds	r2, r0, #1
 8005650:	d101      	bne.n	8005656 <__sflush_r+0x76>
 8005652:	682b      	ldr	r3, [r5, #0]
 8005654:	b903      	cbnz	r3, 8005658 <__sflush_r+0x78>
 8005656:	6560      	str	r0, [r4, #84]	@ 0x54
 8005658:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800565a:	602f      	str	r7, [r5, #0]
 800565c:	b1b9      	cbz	r1, 800568e <__sflush_r+0xae>
 800565e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005662:	4299      	cmp	r1, r3
 8005664:	d002      	beq.n	800566c <__sflush_r+0x8c>
 8005666:	4628      	mov	r0, r5
 8005668:	f7ff f9fe 	bl	8004a68 <_free_r>
 800566c:	2300      	movs	r3, #0
 800566e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005670:	e00d      	b.n	800568e <__sflush_r+0xae>
 8005672:	2301      	movs	r3, #1
 8005674:	4628      	mov	r0, r5
 8005676:	47b0      	blx	r6
 8005678:	4602      	mov	r2, r0
 800567a:	1c50      	adds	r0, r2, #1
 800567c:	d1c9      	bne.n	8005612 <__sflush_r+0x32>
 800567e:	682b      	ldr	r3, [r5, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d0c6      	beq.n	8005612 <__sflush_r+0x32>
 8005684:	2b1d      	cmp	r3, #29
 8005686:	d001      	beq.n	800568c <__sflush_r+0xac>
 8005688:	2b16      	cmp	r3, #22
 800568a:	d11e      	bne.n	80056ca <__sflush_r+0xea>
 800568c:	602f      	str	r7, [r5, #0]
 800568e:	2000      	movs	r0, #0
 8005690:	e022      	b.n	80056d8 <__sflush_r+0xf8>
 8005692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005696:	b21b      	sxth	r3, r3
 8005698:	e01b      	b.n	80056d2 <__sflush_r+0xf2>
 800569a:	690f      	ldr	r7, [r1, #16]
 800569c:	2f00      	cmp	r7, #0
 800569e:	d0f6      	beq.n	800568e <__sflush_r+0xae>
 80056a0:	0793      	lsls	r3, r2, #30
 80056a2:	680e      	ldr	r6, [r1, #0]
 80056a4:	bf08      	it	eq
 80056a6:	694b      	ldreq	r3, [r1, #20]
 80056a8:	600f      	str	r7, [r1, #0]
 80056aa:	bf18      	it	ne
 80056ac:	2300      	movne	r3, #0
 80056ae:	eba6 0807 	sub.w	r8, r6, r7
 80056b2:	608b      	str	r3, [r1, #8]
 80056b4:	f1b8 0f00 	cmp.w	r8, #0
 80056b8:	dde9      	ble.n	800568e <__sflush_r+0xae>
 80056ba:	6a21      	ldr	r1, [r4, #32]
 80056bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80056be:	4643      	mov	r3, r8
 80056c0:	463a      	mov	r2, r7
 80056c2:	4628      	mov	r0, r5
 80056c4:	47b0      	blx	r6
 80056c6:	2800      	cmp	r0, #0
 80056c8:	dc08      	bgt.n	80056dc <__sflush_r+0xfc>
 80056ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056d2:	81a3      	strh	r3, [r4, #12]
 80056d4:	f04f 30ff 	mov.w	r0, #4294967295
 80056d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056dc:	4407      	add	r7, r0
 80056de:	eba8 0800 	sub.w	r8, r8, r0
 80056e2:	e7e7      	b.n	80056b4 <__sflush_r+0xd4>
 80056e4:	20400001 	.word	0x20400001

080056e8 <_fflush_r>:
 80056e8:	b538      	push	{r3, r4, r5, lr}
 80056ea:	690b      	ldr	r3, [r1, #16]
 80056ec:	4605      	mov	r5, r0
 80056ee:	460c      	mov	r4, r1
 80056f0:	b913      	cbnz	r3, 80056f8 <_fflush_r+0x10>
 80056f2:	2500      	movs	r5, #0
 80056f4:	4628      	mov	r0, r5
 80056f6:	bd38      	pop	{r3, r4, r5, pc}
 80056f8:	b118      	cbz	r0, 8005702 <_fflush_r+0x1a>
 80056fa:	6a03      	ldr	r3, [r0, #32]
 80056fc:	b90b      	cbnz	r3, 8005702 <_fflush_r+0x1a>
 80056fe:	f7fe f95b 	bl	80039b8 <__sinit>
 8005702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d0f3      	beq.n	80056f2 <_fflush_r+0xa>
 800570a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800570c:	07d0      	lsls	r0, r2, #31
 800570e:	d404      	bmi.n	800571a <_fflush_r+0x32>
 8005710:	0599      	lsls	r1, r3, #22
 8005712:	d402      	bmi.n	800571a <_fflush_r+0x32>
 8005714:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005716:	f7fe fb4a 	bl	8003dae <__retarget_lock_acquire_recursive>
 800571a:	4628      	mov	r0, r5
 800571c:	4621      	mov	r1, r4
 800571e:	f7ff ff5f 	bl	80055e0 <__sflush_r>
 8005722:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005724:	07da      	lsls	r2, r3, #31
 8005726:	4605      	mov	r5, r0
 8005728:	d4e4      	bmi.n	80056f4 <_fflush_r+0xc>
 800572a:	89a3      	ldrh	r3, [r4, #12]
 800572c:	059b      	lsls	r3, r3, #22
 800572e:	d4e1      	bmi.n	80056f4 <_fflush_r+0xc>
 8005730:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005732:	f7fe fb3d 	bl	8003db0 <__retarget_lock_release_recursive>
 8005736:	e7dd      	b.n	80056f4 <_fflush_r+0xc>

08005738 <__swhatbuf_r>:
 8005738:	b570      	push	{r4, r5, r6, lr}
 800573a:	460c      	mov	r4, r1
 800573c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005740:	2900      	cmp	r1, #0
 8005742:	b096      	sub	sp, #88	@ 0x58
 8005744:	4615      	mov	r5, r2
 8005746:	461e      	mov	r6, r3
 8005748:	da0d      	bge.n	8005766 <__swhatbuf_r+0x2e>
 800574a:	89a3      	ldrh	r3, [r4, #12]
 800574c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005750:	f04f 0100 	mov.w	r1, #0
 8005754:	bf14      	ite	ne
 8005756:	2340      	movne	r3, #64	@ 0x40
 8005758:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800575c:	2000      	movs	r0, #0
 800575e:	6031      	str	r1, [r6, #0]
 8005760:	602b      	str	r3, [r5, #0]
 8005762:	b016      	add	sp, #88	@ 0x58
 8005764:	bd70      	pop	{r4, r5, r6, pc}
 8005766:	466a      	mov	r2, sp
 8005768:	f000 f848 	bl	80057fc <_fstat_r>
 800576c:	2800      	cmp	r0, #0
 800576e:	dbec      	blt.n	800574a <__swhatbuf_r+0x12>
 8005770:	9901      	ldr	r1, [sp, #4]
 8005772:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005776:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800577a:	4259      	negs	r1, r3
 800577c:	4159      	adcs	r1, r3
 800577e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005782:	e7eb      	b.n	800575c <__swhatbuf_r+0x24>

08005784 <__smakebuf_r>:
 8005784:	898b      	ldrh	r3, [r1, #12]
 8005786:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005788:	079d      	lsls	r5, r3, #30
 800578a:	4606      	mov	r6, r0
 800578c:	460c      	mov	r4, r1
 800578e:	d507      	bpl.n	80057a0 <__smakebuf_r+0x1c>
 8005790:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005794:	6023      	str	r3, [r4, #0]
 8005796:	6123      	str	r3, [r4, #16]
 8005798:	2301      	movs	r3, #1
 800579a:	6163      	str	r3, [r4, #20]
 800579c:	b003      	add	sp, #12
 800579e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057a0:	ab01      	add	r3, sp, #4
 80057a2:	466a      	mov	r2, sp
 80057a4:	f7ff ffc8 	bl	8005738 <__swhatbuf_r>
 80057a8:	9f00      	ldr	r7, [sp, #0]
 80057aa:	4605      	mov	r5, r0
 80057ac:	4639      	mov	r1, r7
 80057ae:	4630      	mov	r0, r6
 80057b0:	f7ff f9ce 	bl	8004b50 <_malloc_r>
 80057b4:	b948      	cbnz	r0, 80057ca <__smakebuf_r+0x46>
 80057b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057ba:	059a      	lsls	r2, r3, #22
 80057bc:	d4ee      	bmi.n	800579c <__smakebuf_r+0x18>
 80057be:	f023 0303 	bic.w	r3, r3, #3
 80057c2:	f043 0302 	orr.w	r3, r3, #2
 80057c6:	81a3      	strh	r3, [r4, #12]
 80057c8:	e7e2      	b.n	8005790 <__smakebuf_r+0xc>
 80057ca:	89a3      	ldrh	r3, [r4, #12]
 80057cc:	6020      	str	r0, [r4, #0]
 80057ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057d2:	81a3      	strh	r3, [r4, #12]
 80057d4:	9b01      	ldr	r3, [sp, #4]
 80057d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80057da:	b15b      	cbz	r3, 80057f4 <__smakebuf_r+0x70>
 80057dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057e0:	4630      	mov	r0, r6
 80057e2:	f000 f81d 	bl	8005820 <_isatty_r>
 80057e6:	b128      	cbz	r0, 80057f4 <__smakebuf_r+0x70>
 80057e8:	89a3      	ldrh	r3, [r4, #12]
 80057ea:	f023 0303 	bic.w	r3, r3, #3
 80057ee:	f043 0301 	orr.w	r3, r3, #1
 80057f2:	81a3      	strh	r3, [r4, #12]
 80057f4:	89a3      	ldrh	r3, [r4, #12]
 80057f6:	431d      	orrs	r5, r3
 80057f8:	81a5      	strh	r5, [r4, #12]
 80057fa:	e7cf      	b.n	800579c <__smakebuf_r+0x18>

080057fc <_fstat_r>:
 80057fc:	b538      	push	{r3, r4, r5, lr}
 80057fe:	4d07      	ldr	r5, [pc, #28]	@ (800581c <_fstat_r+0x20>)
 8005800:	2300      	movs	r3, #0
 8005802:	4604      	mov	r4, r0
 8005804:	4608      	mov	r0, r1
 8005806:	4611      	mov	r1, r2
 8005808:	602b      	str	r3, [r5, #0]
 800580a:	f7fb ffc9 	bl	80017a0 <_fstat>
 800580e:	1c43      	adds	r3, r0, #1
 8005810:	d102      	bne.n	8005818 <_fstat_r+0x1c>
 8005812:	682b      	ldr	r3, [r5, #0]
 8005814:	b103      	cbz	r3, 8005818 <_fstat_r+0x1c>
 8005816:	6023      	str	r3, [r4, #0]
 8005818:	bd38      	pop	{r3, r4, r5, pc}
 800581a:	bf00      	nop
 800581c:	20001484 	.word	0x20001484

08005820 <_isatty_r>:
 8005820:	b538      	push	{r3, r4, r5, lr}
 8005822:	4d06      	ldr	r5, [pc, #24]	@ (800583c <_isatty_r+0x1c>)
 8005824:	2300      	movs	r3, #0
 8005826:	4604      	mov	r4, r0
 8005828:	4608      	mov	r0, r1
 800582a:	602b      	str	r3, [r5, #0]
 800582c:	f7fb ffbd 	bl	80017aa <_isatty>
 8005830:	1c43      	adds	r3, r0, #1
 8005832:	d102      	bne.n	800583a <_isatty_r+0x1a>
 8005834:	682b      	ldr	r3, [r5, #0]
 8005836:	b103      	cbz	r3, 800583a <_isatty_r+0x1a>
 8005838:	6023      	str	r3, [r4, #0]
 800583a:	bd38      	pop	{r3, r4, r5, pc}
 800583c:	20001484 	.word	0x20001484

08005840 <_sbrk_r>:
 8005840:	b538      	push	{r3, r4, r5, lr}
 8005842:	4d06      	ldr	r5, [pc, #24]	@ (800585c <_sbrk_r+0x1c>)
 8005844:	2300      	movs	r3, #0
 8005846:	4604      	mov	r4, r0
 8005848:	4608      	mov	r0, r1
 800584a:	602b      	str	r3, [r5, #0]
 800584c:	f7fb ffb2 	bl	80017b4 <_sbrk>
 8005850:	1c43      	adds	r3, r0, #1
 8005852:	d102      	bne.n	800585a <_sbrk_r+0x1a>
 8005854:	682b      	ldr	r3, [r5, #0]
 8005856:	b103      	cbz	r3, 800585a <_sbrk_r+0x1a>
 8005858:	6023      	str	r3, [r4, #0]
 800585a:	bd38      	pop	{r3, r4, r5, pc}
 800585c:	20001484 	.word	0x20001484

08005860 <memcpy>:
 8005860:	440a      	add	r2, r1
 8005862:	4291      	cmp	r1, r2
 8005864:	f100 33ff 	add.w	r3, r0, #4294967295
 8005868:	d100      	bne.n	800586c <memcpy+0xc>
 800586a:	4770      	bx	lr
 800586c:	b510      	push	{r4, lr}
 800586e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005872:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005876:	4291      	cmp	r1, r2
 8005878:	d1f9      	bne.n	800586e <memcpy+0xe>
 800587a:	bd10      	pop	{r4, pc}

0800587c <__assert_func>:
 800587c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800587e:	4614      	mov	r4, r2
 8005880:	461a      	mov	r2, r3
 8005882:	4b09      	ldr	r3, [pc, #36]	@ (80058a8 <__assert_func+0x2c>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4605      	mov	r5, r0
 8005888:	68d8      	ldr	r0, [r3, #12]
 800588a:	b14c      	cbz	r4, 80058a0 <__assert_func+0x24>
 800588c:	4b07      	ldr	r3, [pc, #28]	@ (80058ac <__assert_func+0x30>)
 800588e:	9100      	str	r1, [sp, #0]
 8005890:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005894:	4906      	ldr	r1, [pc, #24]	@ (80058b0 <__assert_func+0x34>)
 8005896:	462b      	mov	r3, r5
 8005898:	f000 f842 	bl	8005920 <fiprintf>
 800589c:	f000 f852 	bl	8005944 <abort>
 80058a0:	4b04      	ldr	r3, [pc, #16]	@ (80058b4 <__assert_func+0x38>)
 80058a2:	461c      	mov	r4, r3
 80058a4:	e7f3      	b.n	800588e <__assert_func+0x12>
 80058a6:	bf00      	nop
 80058a8:	20000018 	.word	0x20000018
 80058ac:	08005c4d 	.word	0x08005c4d
 80058b0:	08005c5a 	.word	0x08005c5a
 80058b4:	08005c88 	.word	0x08005c88

080058b8 <_calloc_r>:
 80058b8:	b570      	push	{r4, r5, r6, lr}
 80058ba:	fba1 5402 	umull	r5, r4, r1, r2
 80058be:	b934      	cbnz	r4, 80058ce <_calloc_r+0x16>
 80058c0:	4629      	mov	r1, r5
 80058c2:	f7ff f945 	bl	8004b50 <_malloc_r>
 80058c6:	4606      	mov	r6, r0
 80058c8:	b928      	cbnz	r0, 80058d6 <_calloc_r+0x1e>
 80058ca:	4630      	mov	r0, r6
 80058cc:	bd70      	pop	{r4, r5, r6, pc}
 80058ce:	220c      	movs	r2, #12
 80058d0:	6002      	str	r2, [r0, #0]
 80058d2:	2600      	movs	r6, #0
 80058d4:	e7f9      	b.n	80058ca <_calloc_r+0x12>
 80058d6:	462a      	mov	r2, r5
 80058d8:	4621      	mov	r1, r4
 80058da:	f7fe f9eb 	bl	8003cb4 <memset>
 80058de:	e7f4      	b.n	80058ca <_calloc_r+0x12>

080058e0 <__ascii_mbtowc>:
 80058e0:	b082      	sub	sp, #8
 80058e2:	b901      	cbnz	r1, 80058e6 <__ascii_mbtowc+0x6>
 80058e4:	a901      	add	r1, sp, #4
 80058e6:	b142      	cbz	r2, 80058fa <__ascii_mbtowc+0x1a>
 80058e8:	b14b      	cbz	r3, 80058fe <__ascii_mbtowc+0x1e>
 80058ea:	7813      	ldrb	r3, [r2, #0]
 80058ec:	600b      	str	r3, [r1, #0]
 80058ee:	7812      	ldrb	r2, [r2, #0]
 80058f0:	1e10      	subs	r0, r2, #0
 80058f2:	bf18      	it	ne
 80058f4:	2001      	movne	r0, #1
 80058f6:	b002      	add	sp, #8
 80058f8:	4770      	bx	lr
 80058fa:	4610      	mov	r0, r2
 80058fc:	e7fb      	b.n	80058f6 <__ascii_mbtowc+0x16>
 80058fe:	f06f 0001 	mvn.w	r0, #1
 8005902:	e7f8      	b.n	80058f6 <__ascii_mbtowc+0x16>

08005904 <__ascii_wctomb>:
 8005904:	4603      	mov	r3, r0
 8005906:	4608      	mov	r0, r1
 8005908:	b141      	cbz	r1, 800591c <__ascii_wctomb+0x18>
 800590a:	2aff      	cmp	r2, #255	@ 0xff
 800590c:	d904      	bls.n	8005918 <__ascii_wctomb+0x14>
 800590e:	228a      	movs	r2, #138	@ 0x8a
 8005910:	601a      	str	r2, [r3, #0]
 8005912:	f04f 30ff 	mov.w	r0, #4294967295
 8005916:	4770      	bx	lr
 8005918:	700a      	strb	r2, [r1, #0]
 800591a:	2001      	movs	r0, #1
 800591c:	4770      	bx	lr
	...

08005920 <fiprintf>:
 8005920:	b40e      	push	{r1, r2, r3}
 8005922:	b503      	push	{r0, r1, lr}
 8005924:	4601      	mov	r1, r0
 8005926:	ab03      	add	r3, sp, #12
 8005928:	4805      	ldr	r0, [pc, #20]	@ (8005940 <fiprintf+0x20>)
 800592a:	f853 2b04 	ldr.w	r2, [r3], #4
 800592e:	6800      	ldr	r0, [r0, #0]
 8005930:	9301      	str	r3, [sp, #4]
 8005932:	f7ff fd3d 	bl	80053b0 <_vfiprintf_r>
 8005936:	b002      	add	sp, #8
 8005938:	f85d eb04 	ldr.w	lr, [sp], #4
 800593c:	b003      	add	sp, #12
 800593e:	4770      	bx	lr
 8005940:	20000018 	.word	0x20000018

08005944 <abort>:
 8005944:	b508      	push	{r3, lr}
 8005946:	2006      	movs	r0, #6
 8005948:	f000 f82c 	bl	80059a4 <raise>
 800594c:	2001      	movs	r0, #1
 800594e:	f7fb ff0e 	bl	800176e <_exit>

08005952 <_raise_r>:
 8005952:	291f      	cmp	r1, #31
 8005954:	b538      	push	{r3, r4, r5, lr}
 8005956:	4605      	mov	r5, r0
 8005958:	460c      	mov	r4, r1
 800595a:	d904      	bls.n	8005966 <_raise_r+0x14>
 800595c:	2316      	movs	r3, #22
 800595e:	6003      	str	r3, [r0, #0]
 8005960:	f04f 30ff 	mov.w	r0, #4294967295
 8005964:	bd38      	pop	{r3, r4, r5, pc}
 8005966:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005968:	b112      	cbz	r2, 8005970 <_raise_r+0x1e>
 800596a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800596e:	b94b      	cbnz	r3, 8005984 <_raise_r+0x32>
 8005970:	4628      	mov	r0, r5
 8005972:	f000 f831 	bl	80059d8 <_getpid_r>
 8005976:	4622      	mov	r2, r4
 8005978:	4601      	mov	r1, r0
 800597a:	4628      	mov	r0, r5
 800597c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005980:	f000 b818 	b.w	80059b4 <_kill_r>
 8005984:	2b01      	cmp	r3, #1
 8005986:	d00a      	beq.n	800599e <_raise_r+0x4c>
 8005988:	1c59      	adds	r1, r3, #1
 800598a:	d103      	bne.n	8005994 <_raise_r+0x42>
 800598c:	2316      	movs	r3, #22
 800598e:	6003      	str	r3, [r0, #0]
 8005990:	2001      	movs	r0, #1
 8005992:	e7e7      	b.n	8005964 <_raise_r+0x12>
 8005994:	2100      	movs	r1, #0
 8005996:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800599a:	4620      	mov	r0, r4
 800599c:	4798      	blx	r3
 800599e:	2000      	movs	r0, #0
 80059a0:	e7e0      	b.n	8005964 <_raise_r+0x12>
	...

080059a4 <raise>:
 80059a4:	4b02      	ldr	r3, [pc, #8]	@ (80059b0 <raise+0xc>)
 80059a6:	4601      	mov	r1, r0
 80059a8:	6818      	ldr	r0, [r3, #0]
 80059aa:	f7ff bfd2 	b.w	8005952 <_raise_r>
 80059ae:	bf00      	nop
 80059b0:	20000018 	.word	0x20000018

080059b4 <_kill_r>:
 80059b4:	b538      	push	{r3, r4, r5, lr}
 80059b6:	4d07      	ldr	r5, [pc, #28]	@ (80059d4 <_kill_r+0x20>)
 80059b8:	2300      	movs	r3, #0
 80059ba:	4604      	mov	r4, r0
 80059bc:	4608      	mov	r0, r1
 80059be:	4611      	mov	r1, r2
 80059c0:	602b      	str	r3, [r5, #0]
 80059c2:	f7fb fecc 	bl	800175e <_kill>
 80059c6:	1c43      	adds	r3, r0, #1
 80059c8:	d102      	bne.n	80059d0 <_kill_r+0x1c>
 80059ca:	682b      	ldr	r3, [r5, #0]
 80059cc:	b103      	cbz	r3, 80059d0 <_kill_r+0x1c>
 80059ce:	6023      	str	r3, [r4, #0]
 80059d0:	bd38      	pop	{r3, r4, r5, pc}
 80059d2:	bf00      	nop
 80059d4:	20001484 	.word	0x20001484

080059d8 <_getpid_r>:
 80059d8:	f7fb bebf 	b.w	800175a <_getpid>

080059dc <_init>:
 80059dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059de:	bf00      	nop
 80059e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059e2:	bc08      	pop	{r3}
 80059e4:	469e      	mov	lr, r3
 80059e6:	4770      	bx	lr

080059e8 <_fini>:
 80059e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ea:	bf00      	nop
 80059ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ee:	bc08      	pop	{r3}
 80059f0:	469e      	mov	lr, r3
 80059f2:	4770      	bx	lr
